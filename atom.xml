<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kerwin</title>
  
  <subtitle>个人技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-12T16:09:59.354Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kerwin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题</title>
    <link href="http://yoursite.com/2017/10/12/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/12/面试题/</id>
    <published>2017-10-12T15:04:18.000Z</published>
    <updated>2017-10-12T16:09:59.354Z</updated>
    
    <content type="html"><![CDATA[<p>1.你使用过Objective-C的运行时编程（Runtime Programming）么？如果使用过，你用它做了什么？你还能记得你所使用的相关的头文件或者某些方法的名称吗？  </p><p>2.你实现过多线程的Core Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？  </p><p>3.Core开头的系列的内容。是否使用过CoreAnimation和CoreGraphics。UI框架和CA，CG框架的联系是什么？分别用CA和CG做过些什么动画或者图像上的内容。（有需要的话还可以涉及Quartz的一些内容）  </p><p>4.是否使用过CoreText或者CoreImage等？如果使用过，请谈谈你使用CoreText或者CoreImage的体验。  </p><p>5.NSNotification和KVO的区别和用法是什么？什么时候应该使用通知，什么时候应该使用KVO，它们的实现上有什么区别吗？如果用protocol和delegate（或者delegate的Array）来实现类似的功能可能吗？如果可能，会有什么潜在的问题？如果不能，为什么？（虽然protocol和delegate这种东西面试已经面烂了…）  </p><p>6.你用过NSOperationQueue么？如果用过或者了解的话，你为什么要使用NSOperationQueue，实现了什么？请描述它和GCD的区别和类似的地方（提示：可以从两者的实现机制和适用范围来描述）。  </p><p>7.既然提到GCD，那么问一下在使用GCD以及block时要注意些什么？它们两是一回事儿么？block在ARC中和传统的MRC中的行为和用法有没有什么区别，需要注意些什么？  </p><p>8.您是否做过异步的网络处理和通讯方面的工作？如果有，能具体介绍一些实现策略么？  </p><p>9.对于Objective-C，你认为它最大的优点和最大的不足是什么？对于不足之处，现在有没有可用的方法绕过这些不足来实现需求。如果可以的话，你有没有考虑或者实践过重新实现OC的一些功能，如果有，具体会如何做？  </p><p>10.你实现过一个框架或者库以供别人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意一些什么方面，来使别人容易地使用你的框架。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.你使用过Objective-C的运行时编程（Runtime Programming）么？如果使用过，你用它做了什么？你还能记得你所使用的相关的头文件或者某些方法的名称吗？  &lt;/p&gt;
&lt;p&gt;2.你实现过多线程的Core Data么？NSPersistentStoreCo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小知识点</title>
    <link href="http://yoursite.com/2017/10/12/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2017/10/12/小知识点/</id>
    <published>2017-10-12T13:30:11.000Z</published>
    <updated>2017-10-12T13:30:46.551Z</updated>
    
    <content type="html"><![CDATA[<p>1、在由NSString生成NSURL对象时，有可能会出现NSString中包含百分号各类括号冒号等对于url来说的非法字符如果直接进行转换的话将得到nil。在对于复杂url进行转换前，可以先试试对待转换的NSString发送 stringByAddingPercentEscapesUsingEncoding: 将其转换为合法的url字符串（其实目的就是保证非法字符用UTF8编码..） 比如这样：  </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *fixedStr = [reqStr stringByAddingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div></pre></td></tr></table></figure><p>2、利用代码添加autolayout约束  </p><ul><li><p>纯OC代码   </p><ul><li>在storyboard中的一条约束在代码中的体现就是一个约束对象，所以添加在storyboard上添加一条约束，相当于创建了一个约束对象并将该约束对象添加到对应的视图上  </li><li>第一步：创建子控件视图</li><li>第二步：禁用子控件的autoresizing属性</li><li>第三步：创建约束对象</li><li>第四步：添加约束对象</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"> - (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// 1.创建一个子视图，添加到父视图上面</span></div><div class="line">    <span class="built_in">UIView</span> *redView = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    redView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:redView];</div><div class="line"><span class="meta">#warning 注意点: 如果通过代码来设置Autolayout约束, 那么必须先禁用Autoresizing</span></div><div class="line">    <span class="comment">// 2.禁用autoresizing</span></div><div class="line">    <span class="comment">// 2.1给需要设置约束的视图禁用autoresizing，禁用父视图autoresizing对子控件无效</span></div><div class="line">    <span class="comment">//self.view.translatesAutoresizingMaskIntoConstraints = NO;//错误写法</span></div><div class="line">    redView.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 3.添加约束</span></div><div class="line">    <span class="comment">// 3.1红色(红色距离顶部和左边以及右边的边距固定为20，高度固定为50)</span></div><div class="line">    <span class="comment">// 3.1.1顶部(基于父控件)</span></div><div class="line">    <span class="comment">/*</span></div><div class="line">     constraintWithItem:需要设置约束的view</div><div class="line">     attribute:需要设置约束的位置</div><div class="line">     relatedBy:约束的条件</div><div class="line">     toItem:约束依赖目标</div><div class="line">     attribute:依赖目标约束位置</div><div class="line">     multiplier:配置系数</div><div class="line">     constant:额外需要添加的长度</div><div class="line">     */</div><div class="line">     <span class="comment">/*</span></div><div class="line">     计算公式:redView.attribute = self.view.attribute * multiplier + constant;</div><div class="line">     其中:＝符号取决于relatedBy:参数</div><div class="line">     typedef NS_ENUM(NSInteger, NSLayoutRelation) &#123;</div><div class="line">     NSLayoutRelationLessThanOrEqual = -1,   小于等于</div><div class="line">     NSLayoutRelationEqual = 0,              等于</div><div class="line">     NSLayoutRelationGreaterThanOrEqual = 1, 大于等于</div><div class="line">     &#125;;</div><div class="line">     */</div><div class="line">    <span class="comment">// 3.1.1.1创建约束对象</span></div><div class="line">    <span class="built_in">NSLayoutConstraint</span> *redTopCos = [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:redView attribute:<span class="built_in">NSLayoutAttributeTop</span> relatedBy:<span class="built_in">NSLayoutRelationEqual</span> toItem:<span class="keyword">self</span>.view attribute:<span class="built_in">NSLayoutAttributeTop</span> multiplier:<span class="number">1.0</span> constant:<span class="number">20</span>];</div><div class="line">    <span class="comment">// 3.1.1.2判断约束条件的层级关系，并添加到对应的视图</span></div><div class="line">    [<span class="keyword">self</span>.view addConstraint:redTopCos];</div><div class="line">    <span class="comment">/*</span></div><div class="line">     attribute:传入的是枚举参数</div><div class="line">     NSLayoutAttributeLeft = 1,  左边距</div><div class="line">     NSLayoutAttributeRight,     右边距</div><div class="line">     NSLayoutAttributeTop,       距离顶部边距</div><div class="line">     NSLayoutAttributeBottom,    距离底部边距</div><div class="line">     NSLayoutAttributeLeading,   左对齐</div><div class="line">     NSLayoutAttributeTrailing,  右对齐</div><div class="line">     NSLayoutAttributeWidth,     宽度</div><div class="line">     NSLayoutAttributeHeight,    高度</div><div class="line">     NSLayoutAttributeCenterX,   中点X</div><div class="line">     NSLayoutAttributeCenterY,   中点Y</div><div class="line">     NSLayoutAttributeBaseline,  文本底线对齐</div><div class="line">     */</div><div class="line">    <span class="comment">// 3.1.2左边约束(基于父控件)</span></div><div class="line">    <span class="built_in">NSLayoutConstraint</span> *redLeftCos = [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:redView attribute:<span class="built_in">NSLayoutAttributeLeft</span> relatedBy:<span class="built_in">NSLayoutRelationEqual</span> toItem:<span class="keyword">self</span>.view attribute:<span class="built_in">NSLayoutAttributeLeft</span> multiplier:<span class="number">1.0</span> constant:<span class="number">20</span>];</div><div class="line">    <span class="comment">// 3.1.2.2判断约束条件的层级关系，并添加到对应的视图</span></div><div class="line">    [<span class="keyword">self</span>.view addConstraint:redLeftCos];</div><div class="line"></div><div class="line">    <span class="comment">// 3.1.3右边约束(基于父控件)</span></div><div class="line">    <span class="built_in">NSLayoutConstraint</span> *redRightCos = [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:redView attribute:<span class="built_in">NSLayoutAttributeRight</span> relatedBy:<span class="built_in">NSLayoutRelationEqual</span> toItem:<span class="keyword">self</span>.view attribute:<span class="built_in">NSLayoutAttributeRight</span> multiplier:<span class="number">1.0</span> constant:<span class="number">-20</span>];</div><div class="line">    <span class="comment">// 3.1.3.2判断约束条件的层级关系，并添加到对应的视图</span></div><div class="line">    [<span class="keyword">self</span>.view addConstraint:redRightCos];</div><div class="line"></div><div class="line">    <span class="comment">// 3.1.4 高度约束(自身)</span></div><div class="line">    <span class="built_in">NSLayoutConstraint</span> *redHeightCos = [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:redView attribute:<span class="built_in">NSLayoutAttributeHeight</span> relatedBy:<span class="built_in">NSLayoutRelationEqual</span> toItem:<span class="literal">nil</span> attribute:<span class="number">0</span> multiplier:<span class="number">1.0</span> constant:<span class="number">50</span>];</div><div class="line">    <span class="comment">// 3.1.3.2判断约束条件的层级关系，并添加到对应的视图</span></div><div class="line">    [redView addConstraint:redHeightCos];</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ul><li>VFL语言实现约束的添加</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// 1.创建二个子视图，添加到父视图上面</span></div><div class="line">    <span class="built_in">UIView</span> *redView = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    redView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:redView];</div><div class="line"></div><div class="line">    <span class="built_in">UIView</span> *blueView = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    blueView.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:blueView];</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#warning 注意点: 如果通过代码来设置Autolayout约束, 那么必须先禁用Autoresizing</span></div><div class="line">    <span class="comment">// 2.禁用autoresizing</span></div><div class="line">    <span class="comment">// 2.1给需要设置约束的视图禁用autoresizing，禁用父视图autoresizing对子控件无效</span></div><div class="line">    <span class="comment">//self.view.translatesAutoresizingMaskIntoConstraints = NO;//错误写法</span></div><div class="line">    redView.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</div><div class="line">    blueView.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 3.添加约束</span></div><div class="line">    <span class="comment">/*</span></div><div class="line">     VisualFormat: VFL语句</div><div class="line">     options: 对齐方式等</div><div class="line">     metrics: VFL语句中使用到的一些变量</div><div class="line">     views: VFL语句中使用到的一些控件</div><div class="line">     */</div><div class="line">    <span class="comment">// 3.1红色视图</span></div><div class="line">    <span class="comment">// 水平方向</span></div><div class="line">    <span class="built_in">NSArray</span> *hCos = [<span class="built_in">NSLayoutConstraint</span> constraintsWithVisualFormat:<span class="string">@"H:|-20-[redView]-20-|"</span> options:kNilOptions metrics:<span class="literal">nil</span> views:<span class="built_in">NSDictionaryOfVariableBindings</span>(redView)];</div><div class="line">    [<span class="keyword">self</span>.view addConstraints:hCos];</div><div class="line"></div><div class="line">    <span class="comment">//竖直方向</span></div><div class="line"></div><div class="line">    <span class="built_in">NSArray</span> *vCos = [<span class="built_in">NSLayoutConstraint</span> constraintsWithVisualFormat:<span class="string">@"V:|-20-[redView(==50)]"</span> options:kNilOptions metrics:<span class="literal">nil</span> views:<span class="built_in">NSDictionaryOfVariableBindings</span>(redView)];</div><div class="line">    [<span class="keyword">self</span>.view addConstraints:vCos];</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 3.2蓝色视图</span></div><div class="line">    <span class="comment">// 垂直方向</span></div><div class="line">    <span class="built_in">NSArray</span> *vBlueCos = [<span class="built_in">NSLayoutConstraint</span> constraintsWithVisualFormat:<span class="string">@"V:[redView]-20-[blueView(==50)]"</span> options:<span class="built_in">NSLayoutFormatAlignAllRight</span> metrics:<span class="literal">nil</span> views:<span class="built_in">NSDictionaryOfVariableBindings</span>(redView,blueView)];</div><div class="line">    [<span class="keyword">self</span>.view addConstraints:vBlueCos];</div><div class="line">    <span class="comment">// 水平方向</span></div><div class="line">    <span class="built_in">NSLayoutConstraint</span> *hBlueCos = [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:blueView attribute:<span class="built_in">NSLayoutAttributeWidth</span> relatedBy:<span class="built_in">NSLayoutRelationEqual</span> toItem:redView attribute:<span class="built_in">NSLayoutAttributeWidth</span> multiplier:<span class="number">0.5</span> constant:<span class="number">0.0</span>];</div><div class="line">    [<span class="keyword">self</span>.view addConstraint:hBlueCos];</div><div class="line">    <span class="comment">/*VFL格式说明</span></div><div class="line">     功能　　　　　　　　表达式</div><div class="line">     水平方向  　　　　　 H:</div><div class="line">     垂直方向  　　　　　 V:</div><div class="line">     Views　　　　　　　　[view]</div><div class="line">     SuperView　　　　　 |</div><div class="line">     关系　　　　　　　　　&gt;=,==,&lt;=</div><div class="line">     空间,间隙　　　　　　　-</div><div class="line">     优先级　　　　　　　　@value</div><div class="line">     */</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>-(void)addConstraint:(NSLayoutConstraint *)constraint; 用来将约束添加到view。在添加时唯一要注意的是添加的目标view要遵循以下规则：  <ul><li>对于两个同层级view之间的约束关系，添加到他们的父view上<br><img src="http://oui2ar2u7.bkt.clouddn.com/83bbf18dgw1dx3236wmnnj.jpg" alt="">  </li><li>对于两个不同层级view之间的约束关系，添加到他们最近的共同父view上<br><img src="http://oui2ar2u7.bkt.clouddn.com/83bbf18dgw1dx3237dsbxj.jpg" alt="">  </li><li>对于有层次关系的两个view之间的约束关系，添加到层次较高的父view上<br><img src="http://oui2ar2u7.bkt.clouddn.com/83bbf18dgw1dx32384ardj.jpg" alt="">  </li></ul></li></ul><p>&gt;<br>可以通过-setNeedsUpdateConstraints和-layoutIfNeeded两个方法来刷新约束的改变，使UIView重新布局。这和CoreGraphic的-setNeedsDisplay一套东西是一样的～</p><p>具体可以看<a href="https://onevcat.com/2012/09/autoayout/" target="_blank" rel="external">喵神的AutoLayout（自动布局）入门</a></p><p>3、iOS 11实现左长滑删除cell </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现代理方法</span></div><div class="line">- (<span class="built_in">UISwipeActionsConfiguration</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView trailingSwipeActionsConfigurationForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</div><div class="line">&#123;</div><div class="line">    <span class="comment">//删除</span></div><div class="line">    <span class="built_in">UIContextualAction</span> * deleteRowAction = [<span class="built_in">UIContextualAction</span> contextualActionWithStyle:<span class="built_in">UIContextualActionStyleDestructive</span> title:<span class="string">@"delete"</span> handler:^(<span class="built_in">UIContextualAction</span> * _Nonnull action, __kindof <span class="built_in">UIView</span> * _Nonnull sourceView, <span class="keyword">void</span> (^ _Nonnull completionHandler)(<span class="built_in">BOOL</span>)) &#123;</div><div class="line">        completionHandler(<span class="literal">YES</span>);</div><div class="line">    &#125;];</div><div class="line">    deleteRowAction.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [<span class="built_in">UISwipeActionsConfiguration</span> configurationWithActions:@[deleteRowAction]];</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、在由NSString生成NSURL对象时，有可能会出现NSString中包含百分号各类括号冒号等对于url来说的非法字符如果直接进行转换的话将得到nil。在对于复杂url进行转换前，可以先试试对待转换的NSString发送 stringByAddingPercentEs
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用blend修改图片的颜色</title>
    <link href="http://yoursite.com/2017/10/12/%E7%94%A8blend%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E7%9A%84%E9%A2%9C%E8%89%B2/"/>
    <id>http://yoursite.com/2017/10/12/用blend修改图片的颜色/</id>
    <published>2017-10-12T13:28:45.000Z</published>
    <updated>2017-10-12T13:29:32.348Z</updated>
    
    <content type="html"><![CDATA[<h4 id="现在存在的问题"><a href="#现在存在的问题" class="headerlink" title="现在存在的问题"></a>现在存在的问题</h4><p>如果一个APP中可以根据用户喜好，更改APP中图片的颜色，则设计师必须重复修改图片，开发者图片文件重命名、移动和导入无用功较多，下载安装包较大。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>用blending给这张图片加上另一个纯色作为tint，并保持原来的alpha通道，然后结合Core Graphics。步骤如下：  </p><blockquote><p>1.创建一个上下文用以画新的图片<br>2.将新的tintColor设置为填充颜色<br>3.将原图片画在创建的上下文中，并用新的填充色着色（注意保持alpha通道）<br>4.从当前上下文中取得图片并返回 </p></blockquote><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>UIImage+tint</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UIImage+tint.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">tint</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">UIImage</span> *)imageWithTintColor:(<span class="built_in">UIColor</span> *)tintColor blendMode:(<span class="built_in">CGBlendMode</span>)blendMode</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="keyword">self</span>.size, <span class="literal">NO</span>, <span class="number">0.0</span>f);</div><div class="line">    [tintColor setFill];<span class="comment">//填充颜色</span></div><div class="line">    <span class="built_in">CGRect</span> bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span>.size.width, <span class="keyword">self</span>.size.height);</div><div class="line">    <span class="built_in">UIRectFill</span>(bounds);</div><div class="line">    <span class="comment">//设置绘画透明混合模式和透明度</span></div><div class="line">    [<span class="keyword">self</span> drawInRect:bounds blendMode:blendMode alpha:<span class="number">1.0</span>f];</div><div class="line">    <span class="keyword">if</span> (blendMode == kCGBlendModeOverlay) &#123;</div><div class="line">        <span class="comment">//保留透明度信息</span></div><div class="line">        [<span class="keyword">self</span> drawInRect:bounds blendMode:kCGBlendModeDestinationIn alpha:<span class="number">1.0</span>f];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">UIImage</span> * tintedImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> tintedImage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><p>ViewController</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"UIImage+tint.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImageView</span> * imageView;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UILabel</span> * msgLabel;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    [<span class="keyword">self</span> createUI];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)createUI</div><div class="line">&#123;</div><div class="line">    _imageView = [[<span class="built_in">UIImageView</span> alloc] initWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"image.png"</span>]];</div><div class="line">    _imageView.center = <span class="keyword">self</span>.view.center;</div><div class="line">    _imageView.userInteractionEnabled = <span class="literal">YES</span>;</div><div class="line">    <span class="built_in">UITapGestureRecognizer</span> * tap = [[<span class="built_in">UITapGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(changeBlendMode:)];</div><div class="line">    tap.numberOfTouchesRequired = <span class="number">1</span>;</div><div class="line">    tap.numberOfTapsRequired = <span class="number">1</span>;</div><div class="line">    [_imageView addGestureRecognizer:tap];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_imageView];</div><div class="line">    </div><div class="line">    _msgLabel = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">20</span>, <span class="built_in">CGRectGetMaxY</span>(_imageView.frame) + <span class="number">20</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.view.frame) - <span class="number">40</span>, <span class="number">120</span>)];</div><div class="line">    _msgLabel.numberOfLines = <span class="number">0</span>;</div><div class="line">    _msgLabel.text = <span class="string">@"在屏幕中绘图时设置透明度；点击图片切换为混合模式绘制的图片"</span>;</div><div class="line">    _msgLabel.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line">    _msgLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">    _msgLabel.layer.borderColor = [<span class="built_in">UIColor</span> grayColor].CGColor;</div><div class="line">    _msgLabel.layer.borderWidth = <span class="number">1.0</span>;</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_msgLabel];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)changeBlendMode:(<span class="built_in">UIGestureRecognizer</span>*)gesture</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">CGBlendMode</span> blendMode = kCGBlendModeNormal;</div><div class="line">    <span class="built_in">NSString</span> *strMsg;</div><div class="line">    <span class="keyword">switch</span> (blendMode) &#123;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeNormal:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeNormal:正常；也是默认的模式。前景图会覆盖背景图"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeMultiply:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeMultiply:正片叠底；混合了前景和背景的颜色，最终颜色比原来的都暗"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeScreen:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeScreen:滤色；把前景和背景图的颜色先反过来，然后混合"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeOverlay:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeOverlay:覆盖：能保留灰度信息，结合kCGBlendModeDestinationIn能保留透明度信息，在imageWithBlendMode方法中两次执行drawInRect方法实现我们的基本需求"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeDarken:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeDarken:变暗"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeLighten:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeLighten:变亮"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeColorDodge:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeColorDodge:颜色变淡"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeColorBurn:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeColorBurn:颜色加深"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeHardLight:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeHardLight:强光"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeSoftLight:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeSoftLight:柔光"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeDifference:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeDifference:插值"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeExclusion:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeExclusion:排除"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeHue:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeHue:色调"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeSaturation:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeSaturation:饱和度"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeColor:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeColor:颜色"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeLuminosity:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeLuminosity:亮度"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">            <span class="comment">//Apple额外定义的枚举</span></div><div class="line">            <span class="comment">//R: premultiplied result, 表示混合结果</span></div><div class="line">            <span class="comment">//S: Source, 表示源颜色(Sa对应透明度值: 0.0-1.0)</span></div><div class="line">            <span class="comment">//D: destination colors with alpha, 表示带透明度的目标颜色(Da对应透明度值: 0.0-1.0)</span></div><div class="line">        <span class="keyword">case</span> kCGBlendModeClear:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeClear:R = 0"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeCopy:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeCopy:R = S"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeSourceIn:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeSourceIn:R = S * Da"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeSourceOut:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeSourceOut:R = S * (1 - Da)"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeSourceAtop:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeSourceAtop:R = S * Da + D * (1 - Da)"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeDestinationOver:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeDestinationOver:R = S * (1 - Da) + D"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeDestinationIn:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeDestinationIn: R = D * Sa;保留透明度信息"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeDestinationOut:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeDestinationOut: R = D * (1 - Sa)"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeDestinationAtop:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeDestinationAtop: R = S * (1 - Da) + D * Sa"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModeXOR:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModeXOR: R = S * (1 - Da) + D * (1 - Sa)"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModePlusDarker:</div><div class="line">            strMsg = <span class="string">@"KCGBlendModePlusDarker: R = MAX(0, (1 - D) + (1 - S))"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> kCGBlendModePlusLighter:</div><div class="line">            strMsg = <span class="string">@"kCGBlendModePlusLighter: R = MIN(1, S + D)（最后一种混合模式）"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    _imageView.image = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"image.png"</span>] imageWithTintColor:[<span class="built_in">UIColor</span> orangeColor] blendMode:blendMode];</div><div class="line">    _msgLabel.text = strMsg;</div><div class="line">    </div><div class="line">    blendMode ++;</div><div class="line">    <span class="keyword">if</span> (blendMode &gt; kCGBlendModePlusLighter) &#123;</div><div class="line">        blendMode = kCGBlendModeNormal;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><blockquote><p>注：用kCGBlendModeOverlay能保留灰度信息，用kCGBlendModeDestinationIn能保留透明度信息。<br>因为每次使用UIImage+tint的方法绘图时，都使用了CG的绘制方法，这就意味着每次调用都会是用到CPU的Offscreen drawing，大量使用的话可能导致性能的问题。对于这里的UIImage+tint的实现，可以写一套缓存的机制，来确保大量重复的元素只在load的时候blend一次，之后将其缓存在内存中以快速读取。这是一个权衡的问题，在时间和空间中做出正确的平衡和选择是程序设计的乐趣所在。</p></blockquote><p>参考链接<br><a href="https://onevcat.com/2013/04/using-blending-in-ios/" target="_blank" rel="external">iOS中使用blend改变图片颜色</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;现在存在的问题&quot;&gt;&lt;a href=&quot;#现在存在的问题&quot; class=&quot;headerlink&quot; title=&quot;现在存在的问题&quot;&gt;&lt;/a&gt;现在存在的问题&lt;/h4&gt;&lt;p&gt;如果一个APP中可以根据用户喜好，更改APP中图片的颜色，则设计师必须重复修改图片，开发者图片文件重
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS改变状态栏文字颜色</title>
    <link href="http://yoursite.com/2017/08/31/iOS%E6%94%B9%E5%8F%98%E7%8A%B6%E6%80%81%E6%A0%8F%E6%96%87%E5%AD%97%E9%A2%9C%E8%89%B2/"/>
    <id>http://yoursite.com/2017/08/31/iOS改变状态栏文字颜色/</id>
    <published>2017-08-30T23:48:08.000Z</published>
    <updated>2017-08-30T23:49:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="iOS改变状态栏文字颜色"><a href="#iOS改变状态栏文字颜色" class="headerlink" title="iOS改变状态栏文字颜色"></a>iOS改变状态栏文字颜色</h4><p>UINavigationController不会将<strong>preferredStatusBarStyle</strong>方法调用转给它的子视图,而是由它<strong>自己管理状态</strong>,而且它也应该那样做.因为<strong>UINavigationController</strong>包含了它自己的状态栏因此就算<strong>UINavigationController</strong>中的<strong>viewController</strong>实现了<strong>preferredStatusBarStyle</strong>方法 也不会调用那<strong>UINavigationController</strong>是怎么决定 该返回<strong>UIStatusBarStyleLightContent</strong>还是<strong>UIStatusBarStyleDefault</strong>的呢? 它是基于它的<strong>UINavigationBar.barStyle</strong>属性.默认<strong>(UIBarStyleDefault)</strong>的是<strong>黑色</strong>文本的状态栏 而<strong>UIBarStyleBlack</strong>是设置为<strong>白色</strong>文本的状态栏。</p><p>可以在自定义的导航控制器中或者系统导航控制器中的类别中添加代码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.topViewController.preferredStatusBarStyle;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>比如有这样的一个需求，默认大多数界面的状态栏文本颜色为白色，个别为黑色，可以为项目中自定义的父控制器或者UIViewController的类别中添加代码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">UIStatusBarStyleLightContent</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在需要的改变的个别页面中添加代码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">UIStatusBarStyleLightContent</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>注意：info里面如果你加了View controller-based status bar appearance,设置为YES,如果设置为NO，上面的代码没效果</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;iOS改变状态栏文字颜色&quot;&gt;&lt;a href=&quot;#iOS改变状态栏文字颜色&quot; class=&quot;headerlink&quot; title=&quot;iOS改变状态栏文字颜色&quot;&gt;&lt;/a&gt;iOS改变状态栏文字颜色&lt;/h4&gt;&lt;p&gt;UINavigationController不会将&lt;stro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS查看子视图</title>
    <link href="http://yoursite.com/2017/08/31/iOS%E6%9F%A5%E7%9C%8B%E5%AD%90%E8%A7%86%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/08/31/iOS查看子视图/</id>
    <published>2017-08-30T23:47:27.000Z</published>
    <updated>2017-08-30T23:49:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="iOS遍历打印所有子视图"><a href="#iOS遍历打印所有子视图" class="headerlink" title="iOS遍历打印所有子视图"></a>iOS遍历打印所有子视图</h4><p>有时我们想看一下系统的view比如导航条的子视图结构，可以用下面的代码来实现</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 递归获取子视图</span></div><div class="line">- (<span class="keyword">void</span>)getSub:(<span class="built_in">UIView</span> *)view andLevel:(<span class="keyword">int</span>)level &#123;</div><div class="line">    <span class="built_in">NSArray</span> *subviews = [view subviews];</div><div class="line"></div><div class="line">    <span class="comment">// 如果没有子视图就直接返回</span></div><div class="line">    <span class="keyword">if</span> ([subviews count] == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *subview <span class="keyword">in</span> subviews) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 根据层级决定前面空格个数，来缩进显示</span></div><div class="line">        <span class="built_in">NSString</span> *blank = <span class="string">@""</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; level; i++) &#123;</div><div class="line">            blank = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"  %@"</span>, blank];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 打印子视图类名</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@%d: %@"</span>, blank, level, subview.class);</div><div class="line"></div><div class="line">        <span class="comment">// 递归获取此视图的子视图</span></div><div class="line">        [<span class="keyword">self</span> getSub:subview andLevel:(level+<span class="number">1</span>)];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>打印导航条</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打印所有子视图</span></div><div class="line">[<span class="keyword">self</span> getSub:<span class="keyword">self</span>.navigationController.navigationBar andLevel:<span class="number">1</span>];</div></pre></td></tr></table></figure><p><img src="http://oui2ar2u7.bkt.clouddn.com/2017-08-28.png" alt=""> </p><h4 id="OC中load方法和initialize方法的异同"><a href="#OC中load方法和initialize方法的异同" class="headerlink" title="OC中load方法和initialize方法的异同"></a>OC中load方法和initialize方法的异同</h4><p>+load</p><p>首先，load方法是一定会在runtime中被调用的，只要类被添加到runtime中了，就会调用load方法，所以我们可以自己实现laod方法来在这个时候执行一些行为。</p><p>而且有意思的一点是，load方法不会覆盖。也就是说，如果子类实现了load方法，那么会先调用父类的load方法，然后又去执行子类的load方法。同样的，如果分类实现了load方法，也会先执行主类的load方法，然后又会去执行分类的load方法。所以父类的load会执行很多次，这一点需要注意。而且执行顺序是 类 -&gt; 子类 -&gt;分类。而不同类之间的顺序不一定。</p><p>+initialize</p><p>与load不同的是，initialize方法不一定会执行。只有当一个类第一次被发送消息的时候会执行，注意是第一次。什么叫发送消息呢，就是执行类的一些方法的时候。也就是说这个方法是懒加载，没有用到这个类就不会调用，可以节省系统资源。</p><p>还有一点截然相反，却更符合我们预期的就是，initialize方法会覆盖。也就是说如果子类实现了initialize方法，就不会执行父类的了，直接执行子类本身的。如果类别实现了initialize方法，也不会再执行主类的。所以initialize方法的执行覆盖顺序是 子类类别 -&gt; 子类 -&gt; 父类类别 -&gt;类。且只会有一个initialize方法被执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;iOS遍历打印所有子视图&quot;&gt;&lt;a href=&quot;#iOS遍历打印所有子视图&quot; class=&quot;headerlink&quot; title=&quot;iOS遍历打印所有子视图&quot;&gt;&lt;/a&gt;iOS遍历打印所有子视图&lt;/h4&gt;&lt;p&gt;有时我们想看一下系统的view比如导航条的子视图结构，可以用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS自定义导航条</title>
    <link href="http://yoursite.com/2017/08/27/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%9D%A1/"/>
    <id>http://yoursite.com/2017/08/27/iOS自定义导航条/</id>
    <published>2017-08-27T12:35:19.000Z</published>
    <updated>2017-08-27T12:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="调整导航条的按钮的位置"><a href="#调整导航条的按钮的位置" class="headerlink" title="调整导航条的按钮的位置"></a>调整导航条的按钮的位置</h4><p>在自定义导航条左侧返回按钮，返回按钮明显会有点偏右，应该如何调整的，由于导航栏的<strong>NavigationItem</strong>是个比较特殊的<strong>View</strong>，设置<strong>Frame</strong>是行不通的，在苹果提供的<strong>UIButtonBarItem</strong>中有个叫做<strong>UIBarButtonSystemItemFixedSpace</strong>的控件，利用它，我们就可以轻松调整返回按钮的位置,具体代码如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> leftBtn = <span class="type">UIButton</span>(type: .custom)</div><div class="line">leftBtn.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">25</span>, height: <span class="number">25</span>)</div><div class="line">leftBtn.setBackgroundImage(<span class="type">UIImage</span>(named: <span class="string">"back"</span>), <span class="keyword">for</span>: .normal)</div><div class="line">leftBtn.addTarget(<span class="keyword">self</span>, action: #selector(leftBarBtnClicked(btn:)), <span class="keyword">for</span>: .touchUpInside);</div><div class="line"><span class="keyword">let</span> leftBarBtn = <span class="type">UIBarButtonItem</span>(customView: leftBtn)</div><div class="line">        </div><div class="line"><span class="comment">//创建UIBarButtonSystemItemFixedSpace</span></div><div class="line"><span class="keyword">let</span> spaceItem = <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .fixedSpace, target: <span class="literal">nil</span>, action: <span class="literal">nil</span>)</div><div class="line">        </div><div class="line"><span class="comment">//将宽度设置为负值</span></div><div class="line">spaceItem.width = -<span class="number">15</span>;</div><div class="line">        </div><div class="line"><span class="comment">//将两个BarButtonItem都返回给NavigationItem</span></div><div class="line">navigationItem.leftBarButtonItems = [spaceItem,leftBarBtn];</div><div class="line">```  </div><div class="line">调整完可以棉线看到返回按钮已经紧靠着屏幕边缘，`这个方法同样适用于调整导航栏右侧的按钮`  </div><div class="line"></div><div class="line">#### 让滑动返回手势生效</div><div class="line">适用自定义的按钮去替换系统默认的返回按钮，会出现滑动返回手势失效的情况。可以通过重新添加导航栏的`interactivePopGestureRecognizer`的`delegate`即可。  </div><div class="line">首先为<span class="type">ViewController</span>添加`<span class="type">UIGestureRecognizerDelegate</span>`协议  </div><div class="line"></div><div class="line">```swift</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstViewController</span>: <span class="title">UIViewController</span>,<span class="title">UIGestureRecognizerDelegate</span> </span>&#123;&#125;</div></pre></td></tr></table></figure><p>然后设置代理  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">navigationController?.interactivePopGestureRecognizer?.delegate = <span class="keyword">self</span>;</div></pre></td></tr></table></figure><h4 id="全屏滑动返回"><a href="#全屏滑动返回" class="headerlink" title="全屏滑动返回"></a>全屏滑动返回</h4><p>(1)系统自带的手势是<code>UIScreenEdgePanGestureRecognizer</code>类型对象，看名字就知道这个是屏幕边缘滑动手势。所以系统自带的滑动效果，自然只能实现侧边滑动。<br>(2)我们自己给导航控制器添加UIGestureRecognizerDelegate协议，添加一个全屏的滑动手势。然后用新添加的滑动手势，来调用系统实现的滑动返回功能（<code>handleNavigationTransition</code> 方法），这样就实现了全屏滑动功能。<br>(3)注意：我们还要禁止系统自带滑动手势，同时只有非根控制器才有滑动返回功能，根控制器没有。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomNavigationController</span>: <span class="title">UINavigationController</span>,<span class="title">UIGestureRecognizerDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> target = interactivePopGestureRecognizer?.delegate</div><div class="line">        </div><div class="line">        <span class="comment">//创建全屏滑动手势，调用系统自带滑动手势的target的action方法</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> pan = <span class="type">UIPanGestureRecognizer</span>(target: target, action: <span class="type">Selector</span>(<span class="string">"handleNavigationTransition:"</span>))</div><div class="line">        </div><div class="line">        <span class="comment">//设置手势的代理</span></div><div class="line">        pan.delegate = <span class="keyword">self</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//给导航控制器的View添加全屏滑动手势</span></div><div class="line">        view.addGestureRecognizer(pan)</div><div class="line">        </div><div class="line">        <span class="comment">//禁止使用系统自带的滑动手势</span></div><div class="line">        interactivePopGestureRecognizer?.isEnabled = <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gestureRecognizer</span><span class="params">(<span class="number">_</span> gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">if</span> childViewControllers.<span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种方法的原理其实很简单，其实就是自定义一个全屏滑动手势，并将滑动事件设置为系统滑动事件，然后禁用系统滑动手势即可。<code>handleNavigationTransition</code>就是系统滑动的方法，虽然系统并未提供接口，但是可以通过runtime找到这个方法，因此直接调用即可。</p><h4 id="整体滑动返回"><a href="#整体滑动返回" class="headerlink" title="整体滑动返回"></a>整体滑动返回</h4><p>虽然实现了全屏滑动返回，但是滑动时的切换依然是系统自带的动画，如果遇到前一个界面的NavigationBar为透明或前后两个Bar颜色不一样，这种渐变式的动画看起来就会不太友好，尤其当前后两个界面其中一个界面的NavigationBar为透明或隐藏时，其效果更是惨不忍睹。<br>整体滑动返回等于将两个NavigationBar独立开来，因此可以相对完美的解决导航栏滑动切换中的种种Bug。<br>实现这个效果有三种基本思路 </p><p>&gt;</p><ul><li>使用UINavigationController自带的setNavigationBarHidden: animated:方法来实现，每次push或pop时，在当前控制器的viewWillDisappear:中设置隐藏，在要跳转的控制器的viewWillAppear:中设置导航栏显示。  </li><li>在每次Push前对当前页面进行截图并保存到数组，Pop时取数组最后一个元素显示，滑动结束后调用系统Pop方法并删除最后一张截图。  </li><li>使用iOS 7之后开放的，UIViewControllerAnimatedTransitioning协议，来实现自定义导航栏转场动画及交互。</li></ul><p>三种方法中，方法一十分繁琐，且会有很多莫名其妙的BUG，直接pass。<br>在iOS的交互中，push一般通过按钮的点击事件或View的tap事件触发，而pop则可能通过事件触发，也可能通过右滑手势触发。因此，我们将这个我们要实现的动画效果分为交互效果和无交互效果两种。分别实现这两种效果，可以较为完美的解决Push和Pop的动画问题。  </p><h5 id="实现交互动画效果"><a href="#实现交互动画效果" class="headerlink" title="实现交互动画效果"></a>实现交互动画效果</h5><p>方法二</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="type">ScreenWidth</span> = <span class="type">UIScreen</span>.main.bounds.size.width</div><div class="line"><span class="keyword">let</span> <span class="type">ScreenHeight</span> = <span class="type">UIScreen</span>.main.bounds.size.height</div><div class="line"><span class="keyword">let</span> kDefaultAlpha : <span class="type">CGFloat</span> = <span class="number">0.6</span> <span class="comment">//默认的将要变透明的遮罩的初始透明度（全黑）</span></div><div class="line"><span class="keyword">let</span> kTargetTranslateScale : <span class="type">CGFloat</span> = <span class="number">0.75</span> <span class="comment">//当拖动的距离，占了屏幕的总宽度的3/4时，就让imageView完全显示，遮盖完全消失</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomNavigationController</span>: <span class="title">UINavigationController</span>,<span class="title">UIGestureRecognizerDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> screenshotImageView : <span class="type">UIImageView</span>!</div><div class="line">    <span class="keyword">var</span> coverView : <span class="type">UIView</span>!</div><div class="line">    <span class="keyword">var</span> screenshotImgs : <span class="type">Array</span>&lt;<span class="type">UIImage</span>&gt;!</div><div class="line">    <span class="keyword">var</span> panGestureRec : <span class="type">UIScreenEdgePanGestureRecognizer</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">//1、创建Pan手势识别器，并绑定监听方法</span></div><div class="line">        panGestureRec = <span class="type">UIScreenEdgePanGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(panGestureRecognizer(pan:)))</div><div class="line">        panGestureRec.edges = <span class="type">UIRectEdge</span>.<span class="keyword">left</span></div><div class="line">        <span class="comment">//为导航控制器的view添加Pan手势识别器</span></div><div class="line">        view.addGestureRecognizer(panGestureRec)</div><div class="line">        </div><div class="line">        <span class="comment">//2、创建截图的ImageView</span></div><div class="line">        screenshotImageView = <span class="type">UIImageView</span>()</div><div class="line">        <span class="comment">//app的frame是包括了状态栏高度的frame</span></div><div class="line">        screenshotImageView.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">ScreenWidth</span>, height: <span class="type">ScreenHeight</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//3、创建截图上面的黑色半透明遮罩</span></div><div class="line">        coverView = <span class="type">UIView</span>()</div><div class="line">        <span class="comment">//遮罩的frame就是截图的frame</span></div><div class="line">        coverView.frame = screenshotImageView.frame</div><div class="line">        <span class="comment">//遮罩为黑色</span></div><div class="line">        coverView.backgroundColor = <span class="type">UIColor</span>.black</div><div class="line">        </div><div class="line">        <span class="comment">//4、存放所有的截图数组初始化</span></div><div class="line">        screenshotImgs = []</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:响应手势的方法</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">panGestureRecognizer</span><span class="params">(pan : UIScreenEdgePanGestureRecognizer)</span></span> &#123;</div><div class="line">        <span class="comment">//如果当前显示的控制器已经是根控制器了，不做任何切换动画，直接返回</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.visibleViewController == <span class="keyword">self</span>.viewControllers[<span class="number">0</span>] &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//判断pan手势的各个阶段</span></div><div class="line">        <span class="keyword">switch</span> panGestureRec.state &#123;</div><div class="line">        <span class="keyword">case</span> .began:<span class="comment">//开始拖拽阶段</span></div><div class="line">            dragBegin()</div><div class="line">        <span class="keyword">case</span> .ended:<span class="comment">//结束拖拽阶段</span></div><div class="line">            dragEnd()</div><div class="line">        <span class="keyword">default</span>:<span class="comment">//正在拖拽阶段</span></div><div class="line">            dragging(pan: pan)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:开始拖拽，添加图片和遮罩</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dragBegin</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//重点：每次开始pan手势时，都要添加截图imageView和遮罩cover到window中</span></div><div class="line">        view.window?.insertSubview(screenshotImageView, at: <span class="number">0</span>)</div><div class="line">        view.window?.insertSubview(coverView, aboveSubview: screenshotImageView)</div><div class="line">        </div><div class="line">        <span class="comment">//并且，让imageView显示截图数组中的最后（最新）一张截图</span></div><div class="line">        screenshotImageView.image = screenshotImgs.last</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:正在拖动，动画效果的精髓，进行位移和透明度的变化</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dragging</span><span class="params">(pan : UIScreenEdgePanGestureRecognizer)</span></span> &#123;</div><div class="line">        <span class="comment">//得到手指拖动的位移</span></div><div class="line">        <span class="keyword">let</span> offsetX = pan.translation(<span class="keyword">in</span>: view).x</div><div class="line">        </div><div class="line">        <span class="comment">//让整个view都平移</span></div><div class="line">        <span class="comment">//挪动整个导航view</span></div><div class="line">        <span class="keyword">if</span> offsetX &gt; <span class="number">0</span> &#123;</div><div class="line">            view.transform = <span class="type">CGAffineTransform</span>(translationX: offsetX, y: <span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//计算目前手指拖动位移占屏幕总的宽高的比例，当这个比例达到3/4时，就让imageview完全显示，遮盖完全消失</span></div><div class="line">        <span class="keyword">let</span> currentTranslateScaleX = offsetX / <span class="keyword">self</span>.view.frame.width</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> offsetX &lt; <span class="type">ScreenWidth</span> &#123;</div><div class="line">            screenshotImageView.transform = <span class="type">CGAffineTransform</span>(translationX: (offsetX - <span class="type">ScreenWidth</span>) * <span class="number">0.6</span>, y: <span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 让遮盖透明度改变,直到减为0,让遮罩完全透明,默认的比例-(当前平衡比例/目标平衡比例)*默认的比例</span></div><div class="line">        <span class="keyword">let</span> alpha = kDefaultAlpha - (currentTranslateScaleX / kTargetTranslateScale) * kDefaultAlpha</div><div class="line">        </div><div class="line">        coverView.alpha = alpha</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:结束拖动，判断结束时拖动的距离做响应的处理，并将图片和遮罩从父控件上移除</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dragEnd</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//取出挪动的距离</span></div><div class="line">        <span class="keyword">let</span> translateX = view.transform.tx</div><div class="line">        <span class="comment">//取出宽度</span></div><div class="line">        <span class="keyword">let</span> width = view.frame.size.width</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> translateX &lt;= <span class="number">40</span> &#123;<span class="comment">// 如果手指移动的距离还不到屏幕的一半,往左边挪 (弹回)</span></div><div class="line">            <span class="type">UIView</span>.animate(withDuration: <span class="number">0.3</span>, animations: &#123; </div><div class="line">                <span class="comment">//重要~~让被右移的view弹回归位,只要清空transform即可办到</span></div><div class="line">                <span class="keyword">self</span>.view.transform = <span class="type">CGAffineTransform</span>.identity</div><div class="line">                <span class="comment">//让imageview大小恢复默认的</span></div><div class="line">                <span class="keyword">self</span>.screenshotImageView.transform = <span class="type">CGAffineTransform</span>(translationX: -<span class="type">ScreenWidth</span>, y: <span class="number">0</span>)</div><div class="line">                <span class="comment">//让遮盖的透明度恢复默认的alpha</span></div><div class="line">                <span class="keyword">self</span>.coverView.alpha = kDefaultAlpha</div><div class="line">            &#125;, completion: &#123; (finished) <span class="keyword">in</span></div><div class="line">                <span class="comment">//重要,动画完成之后,每次都要记得 移除两个view,下次开始拖动时,再添加进来</span></div><div class="line">                <span class="keyword">self</span>.screenshotImageView.removeFromSuperview()</div><div class="line">                <span class="keyword">self</span>.coverView.removeFromSuperview()</div><div class="line">                </div><div class="line">            &#125;)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// 如果手指移动的距离还超过了屏幕的一半,往右边挪</span></div><div class="line">            <span class="type">UIView</span>.animate(withDuration: <span class="number">0.3</span>, animations: &#123; </div><div class="line">                <span class="comment">// 让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform</span></div><div class="line">                <span class="keyword">self</span>.view.transform = <span class="type">CGAffineTransform</span>(translationX: width, y: <span class="number">0</span>)</div><div class="line">                <span class="comment">//让imageView位移还原</span></div><div class="line">                <span class="keyword">self</span>.screenshotImageView.transform = <span class="type">CGAffineTransform</span>(translationX: <span class="number">0</span>, y: <span class="number">0</span>)</div><div class="line">                <span class="comment">//让遮盖alpha变为0，变得完全透明</span></div><div class="line">                <span class="keyword">self</span>.coverView.alpha = <span class="number">0</span></div><div class="line">            &#125;, completion: &#123; (finished) <span class="keyword">in</span></div><div class="line">                <span class="comment">// 重要~~让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform,不然下次再次开始drag时会出问题,因为view的transform没有归零</span></div><div class="line">                <span class="keyword">self</span>.view.transform = <span class="type">CGAffineTransform</span>.identity</div><div class="line">                <span class="comment">// 移除两个view,下次开始拖动时,再加回来</span></div><div class="line">                <span class="keyword">self</span>.screenshotImageView.removeFromSuperview()</div><div class="line">                <span class="keyword">self</span>.coverView.removeFromSuperview()</div><div class="line">                <span class="comment">// 执行正常的Pop操作:移除栈顶控制器,让真正的前一个控制器成为导航控制器的栈顶控制器</span></div><div class="line">                <span class="keyword">self</span>.popViewController(animated: <span class="literal">false</span>)</div><div class="line">            &#125;)</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">            </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:实现截图保存功能，并在push前截图</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">screenShot</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//将要被截图的view，即窗口的根控制器的view</span></div><div class="line">        <span class="keyword">let</span> beyondVC = <span class="keyword">self</span>.view.window?.rootViewController;</div><div class="line">        <span class="comment">//背景图片 总的大小</span></div><div class="line">        <span class="keyword">let</span> size = beyondVC?.view.frame.size</div><div class="line">        <span class="comment">//开启上下文，使用参数之后，截出来的是原图（YES  0.0 质量高）</span></div><div class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(size!, <span class="literal">true</span>, <span class="number">0.0</span>)</div><div class="line">        <span class="comment">//要裁剪的矩形范围</span></div><div class="line">        <span class="keyword">let</span> rect = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">ScreenWidth</span>, height: <span class="type">ScreenHeight</span>)</div><div class="line">        <span class="comment">////注：iOS7以后renderInContext：由drawViewHierarchyInRect：afterScreenUpdates：替代</span></div><div class="line">        beyondVC?.view.drawHierarchy(<span class="keyword">in</span>: rect, afterScreenUpdates: <span class="literal">false</span>)</div><div class="line">        <span class="comment">//从上下文中，取出UIImage</span></div><div class="line">        <span class="keyword">let</span> snapshot = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()</div><div class="line">        <span class="comment">//添加截取好的图片到图片数组</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> _snapshot = snapshot &#123;</div><div class="line">            screenshotImgs.append(_snapshot)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//千万记得，结束上下文（移除栈顶的基于当前位图的图形上下文）</span></div><div class="line">        <span class="type">UIGraphicsEndImageContext</span>()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">pushViewController</span><span class="params">(<span class="number">_</span> viewController: UIViewController, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="comment">//有在导航控制器里面有子控制器的时候才需要截图</span></div><div class="line">        <span class="keyword">if</span> viewControllers.<span class="built_in">count</span> &gt;= <span class="number">1</span> &#123;</div><div class="line">            <span class="comment">//调用自定义方法，使用上下文截图</span></div><div class="line">            screenShot()</div><div class="line">            viewController.navigationItem.leftBarButtonItems = <span class="type">UIBarButtonItem</span>.leftBarbuttonItem(<span class="keyword">self</span>, action: #selector(leftBarBtnClicked(btn:)), normalIcon: <span class="string">"back"</span>, hightlightIcon: <span class="string">"back"</span>)</div><div class="line">        &#125;</div><div class="line">         <span class="comment">//截图完毕之后，才调用父类的push方法</span></div><div class="line">        <span class="keyword">super</span>.pushViewController(viewController, animated: <span class="literal">true</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//重写常用的Pop方法</span></div><div class="line">    <span class="comment">/*</span></div><div class="line">     由于可能调用的是导航栏的popViewController(animated: Bool) -&gt; UIViewController?方法、popToViewController(_ viewController: UIViewController, animated: Bool) -&gt; [UIViewController]?方法 或func popToRootViewController(animated: Bool) -&gt; [UIViewController]?来返回，这种情况下，删除的可能就不是一张截图，因此我们需要分别重写这些Pop方法，去确定我们要删除多少张图片</div><div class="line">     */</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">popViewController</span><span class="params">(animated: Bool)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">        screenshotImgs.removeLast()</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.popViewController(animated: animated)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">popToViewController</span><span class="params">(<span class="number">_</span> viewController: UIViewController, animated: Bool)</span></span> -&gt; [<span class="type">UIViewController</span>]? &#123;</div><div class="line">        <span class="keyword">for</span>  vc <span class="keyword">in</span> viewControllers &#123;</div><div class="line">            <span class="keyword">if</span> viewController == vc &#123;</div><div class="line">                <span class="keyword">break</span></div><div class="line">            &#125;</div><div class="line">            screenshotImgs.removeLast()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.popToViewController(viewController, animated: animated)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">popToRootViewController</span><span class="params">(animated: Bool)</span></span> -&gt; [<span class="type">UIViewController</span>]? &#123;</div><div class="line">        screenshotImgs.removeAll()</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.popToRootViewController(animated: animated)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:返回方法</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">leftBarBtnClicked</span><span class="params">(btn:UIButton)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.popViewController(animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="实现非交互动画效果"><a href="#实现非交互动画效果" class="headerlink" title="实现非交互动画效果"></a>实现非交互动画效果</h4><p>实现原理  </p><blockquote><p>注：FromVC代表即将消失的视图控制器，ToVC表示将要展示的视图控制器</p></blockquote><p>要实现的效果：<br>Push的时候，FromVC往左移动，ToVC从屏幕右侧出现跟随FromVC左移直至FromVC消失，此时ToVC刚好完整显示在屏幕上。<br>Pop的时候，FromVC向右移动，ToVC从屏幕边缘出现跟随FromVC向右移动直至FromVC消失，此时ToVC刚好完整显示在屏幕上  </p><p>实现的时候，我们依然需要将Push和Pop分开讨论<br>先说Pop<br>1.和交互式动画一样，每次Push时对屏幕截屏并保存，Pop的再次截屏但不保存<br>2.把Pop时截取的图片作为FromVC展示，把Push到这个界面时截取的图片作为ToVC展示<br>3.并对两张图片做位移动画，动画结束后移除两张图片  </p><p>然后是Push<br>1.Push时先对当前屏幕截屏。<br>2.将截取的图片保存方便Pop回来时使用，并把这张图片作为这次Push的FromVC保存。<br>3.获取当前导航栏控制器对象，调整其Transform属性中的位移参数作为ToVC展示<br>4.对截图和导航栏做位移，动画结束后直接移除截屏图片  </p><blockquote><p><strong>为什么要对导航栏作位移？</strong></p><p>首先，在Push结束之前，我们是无法知道ToVC具体是什么样子，系统的截屏方法对于未加载出来的View是无能为力的，而UIView的 snapshotViewAfterScreenUpdates:方法又无法带着导航栏一起映射到一个新的View上，因此视觉效果很差。<br>正好在Pop的时候，为了达到想要的动画效果，用来展示的两张图片都需要放到导航栏的View上，因此在Push的时候我们就直接将导航栏的View做一个放射变换，当然，这也就意味着，当我们Push的时候，截屏就不能再放到导航栏上，而是应该放到它的“更上一层“ – UITabbarController的View上。</p></blockquote><p>话不多说，附上代码如下</p><h5 id="AnimationController"><a href="#AnimationController" class="headerlink" title="AnimationController"></a>AnimationController</h5><p>创建动画控制器。更准确的说，需要实现的细节都在UIViewControllerAnimatedTransitioning中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimationController</span>: <span class="title">NSObject</span>,<span class="title">UIViewControllerAnimatedTransitioning</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> navigationOperation : <span class="type">UINavigationControllerOperation</span>!</div><div class="line">    <span class="keyword">var</span> navigationController : <span class="type">UINavigationController</span>?&#123;</div><div class="line">        <span class="keyword">didSet</span>&#123;</div><div class="line">           <span class="keyword">let</span> beyondVC = navigationController!.view.window?.rootViewController</div><div class="line">            <span class="comment">//判断该导航栏是否有TabBarController</span></div><div class="line">            <span class="keyword">if</span> navigationController!.tabBarController == beyondVC &#123;</div><div class="line">                isTabbarExist = <span class="literal">true</span></div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                isTabbarExist = <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//导航栏Pop时删除了多少张截图（调用PopToViewController时，计算要删除的截图的数量）</span></div><div class="line">    <span class="keyword">var</span> removeCount : <span class="type">NSInteger</span> = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> screenShotArray : <span class="type">Array</span>&lt;<span class="type">UIImage</span>&gt; = []</div><div class="line">    <span class="comment">//所属的导航栏有没有TabBarController</span></div><div class="line">    <span class="keyword">var</span> isTabbarExist = <span class="literal">false</span></div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">animationController</span>(<span class="title">operation</span> : <span class="title">UINavigationControllerOperation</span>) -&gt; <span class="title">AnimationController</span></span>&#123;</div><div class="line">        <span class="keyword">let</span> ac = <span class="type">AnimationController</span>()</div><div class="line">        ac.navigationOperation = operation;</div><div class="line">        <span class="keyword">return</span> ac</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">animationController</span>(<span class="title">operation</span> : <span class="title">UINavigationControllerOperation</span>, <span class="title">navigationController</span> : <span class="title">UINavigationController</span>) -&gt; <span class="title">AnimationController</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> ac = <span class="type">AnimationController</span>()</div><div class="line">        ac.navigationController = navigationController</div><div class="line">        ac.navigationOperation = operation</div><div class="line">        <span class="keyword">return</span> ac</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:UIViewControllerAnimatedTransitioning</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transitionDuration</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class="type">TimeInterval</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.4</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">animateTransition</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> screenImgView = <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">ScreenWidth</span>, height: <span class="type">ScreenHeight</span>))</div><div class="line">        <span class="keyword">let</span> screenImg = <span class="keyword">self</span>.screenShot()</div><div class="line">        screenImgView.image = screenImg</div><div class="line">        </div><div class="line">        <span class="comment">//取出fromViewController,fromView和toViewController，toView</span></div><div class="line">        <span class="keyword">let</span> fromVC = transitionContext.viewController(forKey: .from)</div><div class="line">        <span class="keyword">let</span> toVC = transitionContext.viewController(forKey: .to)</div><div class="line">        <span class="keyword">let</span> toView = transitionContext.view(forKey: .to)</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> fromViewEndFrame = transitionContext.finalFrame(<span class="keyword">for</span>: fromVC!)</div><div class="line">        fromViewEndFrame.origin.x = <span class="type">ScreenWidth</span></div><div class="line">        <span class="keyword">var</span> fromViewStartFrame = fromViewEndFrame</div><div class="line">        <span class="keyword">let</span> toViewEndFrame = transitionContext.finalFrame(<span class="keyword">for</span>: toVC!)</div><div class="line">        <span class="keyword">let</span> toViewStartFrame = toViewEndFrame</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> containerView = transitionContext.containerView</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> navigationOperation == <span class="type">UINavigationControllerOperation</span>.push &#123;</div><div class="line">            screenShotArray.append(screenImg!)</div><div class="line">            </div><div class="line">            <span class="comment">//这句非常重要，没有这句，就无法正常push和Pop出对应的界面</span></div><div class="line">            containerView.addSubview(toView!)</div><div class="line">            </div><div class="line">            toView?.frame = toViewStartFrame</div><div class="line">            </div><div class="line">            <span class="comment">//将截图添加到导航栏的view所属的window上</span></div><div class="line">            navigationController?.view.window?.insertSubview(screenImgView, at: <span class="number">0</span>)</div><div class="line">            </div><div class="line">            navigationController?.view.transform = <span class="type">CGAffineTransform</span>(translationX: <span class="type">ScreenWidth</span>, y: <span class="number">0</span>)</div><div class="line">            </div><div class="line">            <span class="type">UIView</span>.animate(withDuration: transitionDuration(using: transitionContext), animations: &#123; </div><div class="line">                <span class="keyword">self</span>.navigationController?.view.transform = <span class="type">CGAffineTransform</span>(translationX: <span class="number">0</span>, y: <span class="number">0</span>)</div><div class="line">                screenImgView.center = <span class="type">CGPoint</span>(x: -<span class="type">ScreenWidth</span> / <span class="number">2.0</span>, y: <span class="type">ScreenHeight</span> / <span class="number">2.0</span>)</div><div class="line">            &#125;, completion: &#123; (finished) <span class="keyword">in</span></div><div class="line">                screenImgView.removeFromSuperview()</div><div class="line">                transitionContext.completeTransition(<span class="literal">true</span>)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> navigationOperation == <span class="type">UINavigationControllerOperation</span>.pop &#123;</div><div class="line">            fromViewStartFrame.origin.x = <span class="number">0</span></div><div class="line">            containerView.addSubview(toView!)</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> lastVCImgView = <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: -<span class="type">ScreenWidth</span>, y: <span class="number">0</span>, width: <span class="type">ScreenWidth</span>, height: <span class="type">ScreenHeight</span>))</div><div class="line">            <span class="comment">//若removeCount大于0，则说明pop了不止一个控制器</span></div><div class="line">            <span class="keyword">if</span> removeCount &gt; <span class="number">0</span> &#123;</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; removeCount &#123;</div><div class="line">                    <span class="keyword">if</span> i == removeCount - <span class="number">1</span> &#123;</div><div class="line">                        <span class="comment">//当删除到要跳转页面的截图时，不要删除，并将该截图作为ToVC的截图显示</span></div><div class="line">                        lastVCImgView.image = screenShotArray.last</div><div class="line">                        removeCount = <span class="number">0</span></div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        screenShotArray.removeLast()</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                lastVCImgView.image = screenShotArray.last</div><div class="line">            &#125;</div><div class="line">            screenImgView.layer.shadowColor = <span class="type">UIColor</span>.black.cgColor</div><div class="line">            screenImgView.layer.shadowOffset = <span class="type">CGSize</span>(width: -<span class="number">0.8</span>, height: <span class="number">0</span>)</div><div class="line">            screenImgView.layer.shadowOpacity = <span class="number">0.6</span></div><div class="line">            navigationController?.view.window?.addSubview(lastVCImgView)</div><div class="line">            navigationController?.view.addSubview(screenImgView)</div><div class="line">            </div><div class="line">            <span class="type">UIView</span>.animate(withDuration: transitionDuration(using: transitionContext), animations: &#123; </div><div class="line">                screenImgView.center = <span class="type">CGPoint</span>(x: <span class="type">ScreenWidth</span> * <span class="number">3</span> / <span class="number">2.0</span>, y: <span class="type">ScreenHeight</span> / <span class="number">2.0</span>)</div><div class="line">                lastVCImgView.center = <span class="type">CGPoint</span>(x: <span class="type">ScreenWidth</span> / <span class="number">2.0</span>, y: <span class="type">ScreenHeight</span> / <span class="number">2.0</span>)</div><div class="line">            &#125;, completion: &#123; (finished) <span class="keyword">in</span></div><div class="line">                lastVCImgView.removeFromSuperview()</div><div class="line">                screenImgView.removeFromSuperview()</div><div class="line">                <span class="keyword">self</span>.screenShotArray.removeLast()</div><div class="line">                transitionContext.completeTransition(<span class="literal">true</span>)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeLastScreenShot</span><span class="params">()</span></span> &#123;<span class="comment">//调用此方法删除数组最后一张截图 (调用pop手势或一次pop多个控制器时使用)</span></div><div class="line">        screenShotArray.removeLast()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeAllScreenShot</span><span class="params">()</span></span> &#123;<span class="comment">// 移除全部屏幕截图</span></div><div class="line">        screenShotArray.removeAll()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeLastScreenShot</span><span class="params">(withNumber number : NSInteger)</span></span> &#123;<span class="comment">//从截屏数组尾部移除指定数量的截图</span></div><div class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span> ..&lt; number &#123;</div><div class="line">            screenShotArray.removeLast()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">screenShot</span><span class="params">()</span></span> -&gt; <span class="type">UIImage</span>? &#123;</div><div class="line">        <span class="comment">//将要被截图的view，即窗口的根控制器的view</span></div><div class="line">        <span class="keyword">let</span> beyondVC = <span class="keyword">self</span>.navigationController?.view.window?.rootViewController;</div><div class="line">        <span class="comment">//背景图片 总的大小</span></div><div class="line">        <span class="keyword">let</span> size = beyondVC?.view.frame.size</div><div class="line">        <span class="comment">//开启上下文，使用参数之后，截出来的是原图（YES  0.0 质量高）</span></div><div class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(size!, <span class="literal">true</span>, <span class="number">0.0</span>)</div><div class="line">        <span class="comment">//要裁剪的矩形范围</span></div><div class="line">        <span class="keyword">let</span> rect = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">ScreenWidth</span>, height: <span class="type">ScreenHeight</span>)</div><div class="line">        <span class="comment">////注：iOS7以后renderInContext：由drawViewHierarchyInRect：afterScreenUpdates：替代</span></div><div class="line">        <span class="keyword">if</span> isTabbarExist &#123;</div><div class="line">            beyondVC?.view.drawHierarchy(<span class="keyword">in</span>: rect, afterScreenUpdates: <span class="literal">false</span>)</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            navigationController?.view.drawHierarchy(<span class="keyword">in</span>: rect, afterScreenUpdates: <span class="literal">false</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//从上下文中，取出UIImage</span></div><div class="line">        <span class="keyword">let</span> snapshot = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()</div><div class="line">        <span class="comment">//千万记得，结束上下文（移除栈顶的基于当前位图的图形上下文）</span></div><div class="line">        <span class="type">UIGraphicsEndImageContext</span>()</div><div class="line"></div><div class="line">        <span class="keyword">return</span> snapshot;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">``` </div><div class="line">##### <span class="type">CustomNavigationController</span> </div><div class="line">在<span class="type">CustomNavigationController</span>中添加`<span class="type">UINavigationControllerDelegate</span>`协议，实现其代理方法，对push以及pop 和手势滑动事件进行修改</div><div class="line"></div><div class="line">```swift</div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="type">ScreenWidth</span> = <span class="type">UIScreen</span>.main.bounds.size.width</div><div class="line"><span class="keyword">let</span> <span class="type">ScreenHeight</span> = <span class="type">UIScreen</span>.main.bounds.size.height</div><div class="line"><span class="keyword">let</span> kDefaultAlpha : <span class="type">CGFloat</span> = <span class="number">0.6</span> <span class="comment">//默认的将要变透明的遮罩的初始透明度（全黑）</span></div><div class="line"><span class="keyword">let</span> kTargetTranslateScale : <span class="type">CGFloat</span> = <span class="number">0.75</span> <span class="comment">//当拖动的距离，占了屏幕的总宽度的3/4时，就让imageView完全显示，遮盖完全消失</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">colorFromRGB</span><span class="params">(rgbValue : Int)</span></span> -&gt; <span class="type">UIColor</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">UIColor</span>(red: <span class="type">CGFloat</span>(((rgbValue &amp; <span class="number">0xFF0000</span>) &gt;&gt; <span class="number">16</span>))/<span class="number">255.0</span>, green: <span class="type">CGFloat</span>(((rgbValue &amp; <span class="number">0x0FF00</span>) &gt;&gt; <span class="number">16</span>))/<span class="number">255.0</span>, blue: <span class="type">CGFloat</span>(((rgbValue &amp; <span class="number">0x0000FF</span>) &gt;&gt; <span class="number">16</span>))/<span class="number">255.0</span>, alpha: <span class="number">1.0</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomNavigationController</span>: <span class="title">UINavigationController</span>,<span class="title">UIGestureRecognizerDelegate</span>,<span class="title">UINavigationControllerDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> screenshotImageView : <span class="type">UIImageView</span>!</div><div class="line">    <span class="keyword">var</span> coverView : <span class="type">UIView</span>!</div><div class="line">    <span class="keyword">var</span> screenshotImgs : <span class="type">Array</span>&lt;<span class="type">UIImage</span>&gt;!</div><div class="line">    <span class="keyword">var</span> panGestureRec : <span class="type">UIScreenEdgePanGestureRecognizer</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> nextVCScreenShotImg : <span class="type">UIImage</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> animationController : <span class="type">AnimationController</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        delegate = <span class="keyword">self</span></div><div class="line">        </div><div class="line">        navigationBar.tintColor = colorFromRGB(rgbValue: <span class="number">0x6F7179</span>)</div><div class="line">        </div><div class="line">        view.layer.shadowColor = <span class="type">UIColor</span>.black.cgColor</div><div class="line">        view.layer.shadowOffset = <span class="type">CGSize</span>(width: -<span class="number">0.8</span>, height: <span class="number">0</span>)</div><div class="line">        view.layer.shadowOpacity = <span class="number">0.6</span></div><div class="line">        </div><div class="line">        animationController = <span class="type">AnimationController</span>()</div><div class="line">        </div><div class="line">        <span class="comment">//1、创建Pan手势识别器，并绑定监听方法</span></div><div class="line">        panGestureRec = <span class="type">UIScreenEdgePanGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(panGestureRecognizer(pan:)))</div><div class="line">        panGestureRec.edges = <span class="type">UIRectEdge</span>.<span class="keyword">left</span></div><div class="line">        <span class="comment">//为导航控制器的view添加Pan手势识别器</span></div><div class="line">        view.addGestureRecognizer(panGestureRec)</div><div class="line">        </div><div class="line">        <span class="comment">//2、创建截图的ImageView</span></div><div class="line">        screenshotImageView = <span class="type">UIImageView</span>()</div><div class="line">        <span class="comment">//app的frame是包括了状态栏高度的frame</span></div><div class="line">        screenshotImageView.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">ScreenWidth</span>, height: <span class="type">ScreenHeight</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//3、创建截图上面的黑色半透明遮罩</span></div><div class="line">        coverView = <span class="type">UIView</span>()</div><div class="line">        <span class="comment">//遮罩的frame就是截图的frame</span></div><div class="line">        coverView.frame = screenshotImageView.frame</div><div class="line">        <span class="comment">//遮罩为黑色</span></div><div class="line">        coverView.backgroundColor = <span class="type">UIColor</span>.black</div><div class="line">        </div><div class="line">        <span class="comment">//4、存放所有的截图数组初始化</span></div><div class="line">        screenshotImgs = []</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//MARK:实现`UINavigationControllerDelegate`的代理方法</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">navigationController</span><span class="params">(<span class="number">_</span> navigationController: UINavigationController, animationControllerFor operation: UINavigationControllerOperation, from fromVC: UIViewController, to toVC: UIViewController)</span></span> -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span>? &#123;</div><div class="line">        animationController.navigationOperation = operation</div><div class="line">        animationController.navigationController = <span class="keyword">self</span></div><div class="line">        <span class="keyword">return</span> animationController</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">pushViewController</span><span class="params">(<span class="number">_</span> viewController: UIViewController, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="comment">//只有在导航控制器里面有子控制器的时候才需要截图</span></div><div class="line">        <span class="keyword">if</span> viewControllers.<span class="built_in">count</span> &gt;= <span class="number">1</span> &#123;</div><div class="line">            <span class="comment">//调用自定义方法，使用上下文截图</span></div><div class="line">            screenShot()</div><div class="line">            viewController.navigationItem.leftBarButtonItems = <span class="type">UIBarButtonItem</span>.leftBarbuttonItem(<span class="keyword">self</span>, action: #selector(leftBarBtnClicked(btn:)), normalIcon: <span class="string">"back"</span>, hightlightIcon: <span class="string">"back"</span>)</div><div class="line">            viewController.hidesBottomBarWhenPushed = <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">         <span class="comment">//截图完毕之后，才调用父类的push方法</span></div><div class="line">        <span class="keyword">super</span>.pushViewController(viewController, animated: <span class="literal">true</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//重写常用的Pop方法</span></div><div class="line">    <span class="comment">/*</span></div><div class="line">     由于可能调用的是导航栏的popViewController(animated: Bool) -&gt; UIViewController?方法、popToViewController(_ viewController: UIViewController, animated: Bool) -&gt; [UIViewController]?方法 或func popToRootViewController(animated: Bool) -&gt; [UIViewController]?来返回，这种情况下，删除的可能就不是一张截图，因此我们需要分别重写这些Pop方法，去确定我们要删除多少张图片</div><div class="line">     */</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">popViewController</span><span class="params">(animated: Bool)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">        <span class="keyword">let</span> index = viewControllers.<span class="built_in">count</span></div><div class="line">        <span class="keyword">if</span> screenshotImgs.<span class="built_in">count</span> &gt;= index - <span class="number">1</span> &#123;</div><div class="line">            screenshotImgs.removeLast()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.popViewController(animated: animated)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">popToViewController</span><span class="params">(<span class="number">_</span> viewController: UIViewController, animated: Bool)</span></span> -&gt; [<span class="type">UIViewController</span>]? &#123;</div><div class="line">        <span class="keyword">var</span> removeCount = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span>  vc <span class="keyword">in</span> viewControllers &#123;</div><div class="line">            <span class="keyword">if</span> viewController == vc &#123;</div><div class="line">                <span class="keyword">break</span></div><div class="line">            &#125;</div><div class="line">            screenshotImgs.removeLast()</div><div class="line">            removeCount += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        animationController.removeCount = removeCount</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.popToViewController(viewController, animated: animated)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">popToRootViewController</span><span class="params">(animated: Bool)</span></span> -&gt; [<span class="type">UIViewController</span>]? &#123;</div><div class="line">        animationController.removeCount = screenshotImgs.<span class="built_in">count</span></div><div class="line">        screenshotImgs.removeAll()</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.popToRootViewController(animated: animated)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:实现截图保存功能，并在push前截图</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">screenShot</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//将要被截图的view，即窗口的根控制器的view</span></div><div class="line">        <span class="keyword">let</span> beyondVC = <span class="keyword">self</span>.view.window?.rootViewController;</div><div class="line">        <span class="comment">//背景图片 总的大小</span></div><div class="line">        <span class="keyword">let</span> size = beyondVC?.view.frame.size</div><div class="line">        <span class="comment">//开启上下文，使用参数之后，截出来的是原图（YES  0.0 质量高）</span></div><div class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(size!, <span class="literal">true</span>, <span class="number">0.0</span>)</div><div class="line">        <span class="comment">//要裁剪的矩形范围</span></div><div class="line">        <span class="keyword">let</span> rect = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">ScreenWidth</span>, height: <span class="type">ScreenHeight</span>)</div><div class="line">        <span class="comment">////注：iOS7以后renderInContext：由drawViewHierarchyInRect：afterScreenUpdates：替代</span></div><div class="line">        <span class="keyword">if</span> tabBarController == beyondVC &#123;</div><div class="line">            beyondVC?.view.drawHierarchy(<span class="keyword">in</span>: rect, afterScreenUpdates: <span class="literal">false</span>)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            view.drawHierarchy(<span class="keyword">in</span>: rect, afterScreenUpdates: <span class="literal">false</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//从上下文中，取出UIImage</span></div><div class="line">        <span class="keyword">let</span> snapshot = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()</div><div class="line">        <span class="comment">//添加截取好的图片到图片数组</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> _snapshot = snapshot &#123;</div><div class="line">            screenshotImgs.append(_snapshot)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//千万记得，结束上下文（移除栈顶的基于当前位图的图形上下文）</span></div><div class="line">        <span class="type">UIGraphicsEndImageContext</span>()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//MARK:响应手势的方法</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">panGestureRecognizer</span><span class="params">(pan : UIScreenEdgePanGestureRecognizer)</span></span> &#123;</div><div class="line">        <span class="comment">//如果当前显示的控制器已经是根控制器了，不做任何切换动画，直接返回</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.visibleViewController == <span class="keyword">self</span>.viewControllers[<span class="number">0</span>] &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//判断pan手势的各个阶段</span></div><div class="line">        <span class="keyword">switch</span> panGestureRec.state &#123;</div><div class="line">        <span class="keyword">case</span> .began:<span class="comment">//开始拖拽阶段</span></div><div class="line">            dragBegin()</div><div class="line">        <span class="keyword">case</span> .ended,.cancelled,.failed:<span class="comment">//结束拖拽阶段</span></div><div class="line">            dragEnd()</div><div class="line">        <span class="keyword">default</span>:<span class="comment">//正在拖拽阶段</span></div><div class="line">            dragging(pan: pan)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:开始拖拽，添加图片和遮罩</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dragBegin</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//重点：每次开始pan手势时，都要添加截图imageView和遮罩cover到window中</span></div><div class="line">        view.window?.insertSubview(screenshotImageView, at: <span class="number">0</span>)</div><div class="line">        view.window?.insertSubview(coverView, aboveSubview: screenshotImageView)</div><div class="line">        </div><div class="line">        <span class="comment">//并且，让imageView显示截图数组中的最后（最新）一张截图</span></div><div class="line">        screenshotImageView.image = screenshotImgs.last</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:正在拖动，动画效果的精髓，进行位移和透明度的变化</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dragging</span><span class="params">(pan : UIScreenEdgePanGestureRecognizer)</span></span> &#123;</div><div class="line">        <span class="comment">//得到手指拖动的位移</span></div><div class="line">        <span class="keyword">let</span> offsetX = pan.translation(<span class="keyword">in</span>: view).x</div><div class="line">        </div><div class="line">        <span class="comment">//让整个view都平移</span></div><div class="line">        <span class="comment">//挪动整个导航view</span></div><div class="line">        <span class="keyword">if</span> offsetX &gt; <span class="number">0</span> &#123;</div><div class="line">            view.transform = <span class="type">CGAffineTransform</span>(translationX: offsetX, y: <span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//计算目前手指拖动位移占屏幕总的宽高的比例，当这个比例达到3/4时，就让imageview完全显示，遮盖完全消失</span></div><div class="line">        <span class="keyword">let</span> currentTranslateScaleX = offsetX / <span class="keyword">self</span>.view.frame.width</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> offsetX &lt; <span class="type">ScreenWidth</span> &#123;</div><div class="line">            screenshotImageView.transform = <span class="type">CGAffineTransform</span>(translationX: (offsetX - <span class="type">ScreenWidth</span>) * <span class="number">0.6</span>, y: <span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 让遮盖透明度改变,直到减为0,让遮罩完全透明,默认的比例-(当前平衡比例/目标平衡比例)*默认的比例</span></div><div class="line">        <span class="keyword">let</span> alpha = kDefaultAlpha - (currentTranslateScaleX / kTargetTranslateScale) * kDefaultAlpha</div><div class="line">        </div><div class="line">        coverView.alpha = alpha</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:结束拖动，判断结束时拖动的距离做响应的处理，并将图片和遮罩从父控件上移除</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dragEnd</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//取出挪动的距离</span></div><div class="line">        <span class="keyword">let</span> translateX = view.transform.tx</div><div class="line">        <span class="comment">//取出宽度</span></div><div class="line">        <span class="keyword">let</span> width = view.frame.size.width</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> translateX &lt;= <span class="number">40</span> &#123;<span class="comment">// 如果手指移动的距离还不到屏幕的一半,往左边挪 (弹回)</span></div><div class="line">            <span class="type">UIView</span>.animate(withDuration: <span class="number">0.3</span>, animations: &#123;</div><div class="line">                <span class="comment">//重要~~让被右移的view弹回归位,只要清空transform即可办到</span></div><div class="line">                <span class="keyword">self</span>.view.transform = <span class="type">CGAffineTransform</span>.identity</div><div class="line">                <span class="comment">//让imageview大小恢复默认的</span></div><div class="line">                <span class="keyword">self</span>.screenshotImageView.transform = <span class="type">CGAffineTransform</span>(translationX: -<span class="type">ScreenWidth</span>, y: <span class="number">0</span>)</div><div class="line">                <span class="comment">//让遮盖的透明度恢复默认的alpha</span></div><div class="line">                <span class="keyword">self</span>.coverView.alpha = kDefaultAlpha</div><div class="line">            &#125;, completion: &#123; (finished) <span class="keyword">in</span></div><div class="line">                <span class="comment">//重要,动画完成之后,每次都要记得 移除两个view,下次开始拖动时,再添加进来</span></div><div class="line">                <span class="keyword">self</span>.screenshotImageView.removeFromSuperview()</div><div class="line">                <span class="keyword">self</span>.coverView.removeFromSuperview()</div><div class="line">                </div><div class="line">            &#125;)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// 如果手指移动的距离还超过了屏幕的一半,往右边挪</span></div><div class="line">            <span class="type">UIView</span>.animate(withDuration: <span class="number">0.3</span>, animations: &#123;</div><div class="line">                <span class="comment">// 让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform</span></div><div class="line">                <span class="keyword">self</span>.view.transform = <span class="type">CGAffineTransform</span>(translationX: width, y: <span class="number">0</span>)</div><div class="line">                <span class="comment">//让imageView位移还原</span></div><div class="line">                <span class="keyword">self</span>.screenshotImageView.transform = <span class="type">CGAffineTransform</span>(translationX: <span class="number">0</span>, y: <span class="number">0</span>)</div><div class="line">                <span class="comment">//让遮盖alpha变为0，变得完全透明</span></div><div class="line">                <span class="keyword">self</span>.coverView.alpha = <span class="number">0</span></div><div class="line">            &#125;, completion: &#123; (finished) <span class="keyword">in</span></div><div class="line">                <span class="comment">// 重要~~让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform,不然下次再次开始drag时会出问题,因为view的transform没有归零</span></div><div class="line">                <span class="keyword">self</span>.view.transform = <span class="type">CGAffineTransform</span>.identity</div><div class="line">                <span class="comment">// 移除两个view,下次开始拖动时,再加回来</span></div><div class="line">                <span class="keyword">self</span>.screenshotImageView.removeFromSuperview()</div><div class="line">                <span class="keyword">self</span>.coverView.removeFromSuperview()</div><div class="line">                <span class="comment">// 执行正常的Pop操作:移除栈顶控制器,让真正的前一个控制器成为导航控制器的栈顶控制器</span></div><div class="line">                <span class="keyword">self</span>.popViewController(animated: <span class="literal">false</span>)</div><div class="line">                <span class="keyword">self</span>.animationController.removeLastScreenShot()</div><div class="line">            &#125;)</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//MARK:返回方法</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">leftBarBtnClicked</span><span class="params">(btn:UIButton)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.popViewController(animated: <span class="literal">true</span>)</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>参考博客<br><a href="http://www.jianshu.com/p/31f177158c9e" target="_blank" rel="external">【iOS】让我们一次性解决导航栏的所有问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;调整导航条的按钮的位置&quot;&gt;&lt;a href=&quot;#调整导航条的按钮的位置&quot; class=&quot;headerlink&quot; title=&quot;调整导航条的按钮的位置&quot;&gt;&lt;/a&gt;调整导航条的按钮的位置&lt;/h4&gt;&lt;p&gt;在自定义导航条左侧返回按钮，返回按钮明显会有点偏右，应该如何调整的，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CoreText实现图文混排以及点击事件</title>
    <link href="http://yoursite.com/2017/08/05/CoreText%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E4%BB%A5%E5%8F%8A%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/08/05/CoreText实现图文混排以及点击事件/</id>
    <published>2017-08-05T11:14:18.000Z</published>
    <updated>2017-08-12T10:07:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CoreText简介"><a href="#CoreText简介" class="headerlink" title="CoreText简介"></a>CoreText简介</h3><p>Core Text 是基于 iOS 3.2+ 和 OSX 10.5+ 的一种能够对文本格式和文本布局进行精细控制的文本引擎。<br>它良好的结合了 UIKit 和 Core Graphics/Quartz：<br>&gt;</p><font color="#ff0000">UIKit</font>的<font color="#ff0000">UILabel</font>允许你通过在<font color="#ff0000">IB</font>中简单的拖曳添加文本，但你不能改变文本的颜色和其中的单词。<br><font color="#ff0000">Core Graphics/Quartz</font>几乎允许你做任何系统允许的事情，但你需要为每个字形计算位置，并画在屏幕上。<br><font color="#ff0000">Core Text</font>正结合了这两者！你可以完全控制位置、布局、类似文本大小和颜色这样的属性，而<font color="#ff0000">Core Text</font>将帮你完善其它的东西——类似文本换行、字体呈现等等。<br><font color="#ff0000">iOS7</font>新推出的类库<font color="#ff0000">Textkit</font>，其实是在之前推出的CoreText上的封装<br><font color="#ff0000">CoreText</font>的主要作用也是用于文字的排版和渲染，但它是一种先进而又处于<font color="#0000ff">底层技术</font>，如果我们需要将文本内容直接渲染到图形上下文<font color="#ff0000">(Graphics context)</font>时，<font color="#0000ff">从性能和易用性来考虑，最佳方案就是使用CoreText</font>。<br><br>### 富文本<br>&gt;<br><font color="#ff0000">富文本格式(RTF)</font>规范是为了便于在应用程序之间轻松转储格式化<strong><em>文本</em></strong>和<strong><em>图形</em></strong>的一种<font color="#0000ff">编码方法</font>。<br>现在，用户可以利用特定转换软件，在不同系统如<font color="#0000ff">MS-DOS</font>、<font color="#0000ff">Windows</font>、<font color="#0000ff">OS/2</font>、<font color="#0000ff">Macintosh</font>和<font color="#0000ff">Power Macintosh</font>的应用程序之间转移字处理文档。<br><font color="#ff0000">RTF</font>规范提供一种在不同的输出设备、操作环境和操作系统之间交换文本和图形的一种格式。<br><font color="#ff0000">RTF</font>使用<font color="#0000ff">ANSI</font>,<font color="#0000ff">PC-8</font>, <font color="#0000ff">Macintosh</font>, 或<font color="#0000ff">IBM PC</font>字符集控制文档的表示法和格式化，包括屏幕显示和打印。<br>凭借<font color="#ff0000">RTF</font>规范，不同的操作系统和不同的软件程序创建的文档能够在这些操作系统和应用程序之间传递。<br>将一个格式化的文件转换为<font color="#ff0000">RTF</font>文件的软件称为<font color="#0000ff">RTF书写器</font>。<br><font color="#0000ff">RTF书写器</font>用于分离现有文本中的程序控制信息，并且生成一个包含文本和与之相关的<font color="#ff0000">RTF</font>组的新文件。<br>将<font color="#ff0000">RTF</font>文件转换成格式化文件的软件则称为<font color="#0000ff">RTF阅读器</font>。<br><br>简单来说附带有每一个文字属性的字符串，就是富文本。在iOS中，<code>AttributeString</code>专门用来处理富文本。<code>AttributedString</code>也分为<code>NSAttributedString</code>和<code>NSMutableAttributedString</code>两个类。<br>常用的一些方法<br><br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-initWithString: <span class="comment">//以NSString初始化一个富文本对象</span></div><div class="line">-setAttributes:range: <span class="comment">//为富文本中的一段范围添加一些属性，第一个参数是个NSDictionary字典，第二个参数是NSRange。</span></div><div class="line">-addAttribute:value:range: <span class="comment">//添加一个属性</span></div><div class="line">-addAttributes:range: <span class="comment">//添加多个属性</span></div><div class="line">-removeAttribute:range: <span class="comment">//移除属性</span></div></pre></td></tr></table></figure><br><br>代码示例<br><br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> * dic = @&#123;<span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> fontWithName:<span class="string">@"Zapfino"</span> size:<span class="number">20</span>],<span class="built_in">NSForegroundColorAttributeName</span>:[<span class="built_in">UIColor</span> redColor],<span class="built_in">NSUnderlineStyleAttributeName</span>:@(<span class="built_in">NSUnderlineStyleSingle</span>)&#125;;</div><div class="line">    <span class="built_in">NSMutableAttributedString</span> * attributeStr = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:<span class="string">@"0我是一个富文本，9听说我有很多属性，19I will try。32这里清除属性."</span>];</div><div class="line"><span class="comment">//    设置属性</span></div><div class="line">    [attributeStr setAttributes:dic range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attributeStr.length)];</div><div class="line"><span class="comment">//    添加属性</span></div><div class="line">    [attributeStr addAttribute:<span class="built_in">NSFontAttributeName</span> value:[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">30</span>] range:<span class="built_in">NSMakeRange</span>(<span class="number">9</span>, <span class="number">10</span>)];</div><div class="line">    [attributeStr addAttribute:<span class="built_in">NSForegroundColorAttributeName</span> value:[<span class="built_in">UIColor</span> cyanColor] range:<span class="built_in">NSMakeRange</span>(<span class="number">13</span>, <span class="number">13</span>)];</div><div class="line"><span class="comment">//    添加多个属性</span></div><div class="line">    <span class="built_in">NSDictionary</span> * dicAdd = @&#123;<span class="built_in">NSBackgroundColorAttributeName</span>:[<span class="built_in">UIColor</span> yellowColor],<span class="built_in">NSLigatureAttributeName</span>:@<span class="number">1</span>&#125;;</div><div class="line">    [attributeStr addAttributes:dicAdd range:<span class="built_in">NSMakeRange</span>(<span class="number">19</span>, <span class="number">13</span>)];</div><div class="line"><span class="comment">//    移除属性</span></div><div class="line">    [attributeStr removeAttribute:<span class="built_in">NSFontAttributeName</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">32</span>, <span class="number">9</span>)];</div><div class="line">    <span class="built_in">UILabel</span> * label = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">400</span>)];</div><div class="line">    label.numberOfLines = <span class="number">0</span>;</div><div class="line">    label.attributedText = attributeStr;</div></pre></td></tr></table></figure><br><br>### CoreText坐标系与UIKit坐标系<br><img src="http://oui2ar2u7.bkt.clouddn.com/96ed8957aedfb08d.jpg" alt=""><br>从图中可看出<font color="#ff0000">CoreText坐标系是以左下角为坐标原点</font>，而我们常用的<font color="#0000ff">UIKit是以左上角为坐标原点</font>。因此在CoreText中的布局完成后需要对其坐标系进行转换，否则直接绘制出现位置反转的镜像情况。<br>&gt;<br>在iOS的不同framework中使用着不同的坐标系：<br><font color="#ff0000">UIKit</font> － y轴向下<br><font color="#ff0000">Core Graphics(Quartz)</font> － y轴向上<br><font color="#ff0000">OpenGL ES</font>－ y轴向上<br><font color="#ff0000">UIKit</font>是iPhone SDK的Cocoa Touch层的核心framework，是iPhone应用程序图形界面和事件驱动的基础，它和传统的windows桌面一样，坐标系是y轴向下的;<font color="#ff0000">Core Graphics(Quartz)</font>一个基于<em>2D</em>的图形绘制引擎，它的坐标系则是y轴向上的；而<font color="#ff0000">OpenGL ES</font>是iPhone SDK的<em>2D</em>和<em>3D</em>绘制引擎，它使用左手坐标系，它的坐标系也是y轴向上的，如果不考虑z轴，在二维下它的坐标系和Quartz是一样的。<br><br>### CoreText绘制富文本<br>CoreText实现图文混排其实就是在富文本中插入一个空白的图片占位符的富文本字符串，通过代理设置相关的图片尺寸信息，根据从富文本得到的frame计算图片绘制的frame再绘制图片这么一个过程。<br>#### 整体代码<br><br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> drawRect:rect];</div><div class="line">    <span class="comment">//获取当前绘制上下文</span></div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="built_in">CGContextSetTextMatrix</span>(context, <span class="built_in">CGAffineTransformIdentity</span>);<span class="comment">//设置当前文本矩阵为不做图形变换</span></div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0</span>, <span class="keyword">self</span>.bounds.size.height);<span class="comment">//平移方法，将context向上平移一个屏幕高</span></div><div class="line">    <span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1.0</span>, <span class="number">-1.0</span>);<span class="comment">//缩放方法，x轴缩放系数为1，则不变，y轴缩放系数为-1，则相当于以x轴为轴旋转180度</span></div><div class="line">    <span class="built_in">NSMutableAttributedString</span> * attributeStr = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:<span class="string">@"\n这里在测试图文混排，\n我是一个富文本"</span>];</div><div class="line">    <span class="built_in">CTRunDelegateCallbacks</span> callBacks;</div><div class="line">    memset(&amp;callBacks,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">CTRunDelegateCallbacks</span>));</div><div class="line">    callBacks.version = kCTRunDelegateVersion1;</div><div class="line">    callBacks.getAscent = ascentCallBacks;</div><div class="line">    callBacks.getDescent = descentCallBacks;</div><div class="line">    callBacks.getWidth = widthCallBacks;</div><div class="line">    <span class="built_in">NSDictionary</span> * dicPic = @&#123;<span class="string">@"height"</span>:@<span class="number">129</span>,<span class="string">@"width"</span>:@<span class="number">129</span>&#125;;</div><div class="line">    <span class="built_in">CTRunDelegateRef</span> delegate = <span class="built_in">CTRunDelegateCreate</span>(&amp; callBacks, (__bridge <span class="keyword">void</span> *)dicPic);</div><div class="line">    <span class="keyword">unichar</span> placeHolder = <span class="number">0xFFFC</span>;</div><div class="line">    <span class="built_in">NSString</span> * placeHolderStr = [<span class="built_in">NSString</span> stringWithCharacters:&amp;placeHolder length:<span class="number">1</span>];</div><div class="line">    <span class="built_in">NSMutableAttributedString</span> * placeHolderAttrStr = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:placeHolderStr];</div><div class="line">    <span class="built_in">CFAttributedStringSetAttribute</span>((<span class="built_in">CFMutableAttributedStringRef</span>)placeHolderAttrStr, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">1</span>), kCTRunDelegateAttributeName, delegate);</div><div class="line">    <span class="built_in">CFRelease</span>(delegate);</div><div class="line">    [attributeStr insertAttributedString:placeHolderAttrStr atIndex:<span class="number">12</span>];</div><div class="line">    <span class="built_in">CTFramesetterRef</span> frameSetter = <span class="built_in">CTFramesetterCreateWithAttributedString</span>((<span class="built_in">CFAttributedStringRef</span>)attributeStr);</div><div class="line">    <span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line">    <span class="built_in">CGPathAddRect</span>(path, <span class="literal">NULL</span>, <span class="keyword">self</span>.bounds);</div><div class="line">    <span class="built_in">NSInteger</span> length = attributeStr.length;</div><div class="line">    _length = attributeStr.length;</div><div class="line">    <span class="built_in">CTFrameRef</span> frame = <span class="built_in">CTFramesetterCreateFrame</span>(frameSetter, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, length), path, <span class="literal">NULL</span>);</div><div class="line">    _ctFrame = frame;</div><div class="line">    <span class="built_in">CTFrameDraw</span>(frame, context);</div><div class="line">    </div><div class="line">    <span class="built_in">UIImage</span> * image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"bd_logo1.jpeg"</span>];</div><div class="line">    <span class="built_in">CGRect</span> imgFrm = [<span class="keyword">self</span> calculateImageRectWithFrame:frame];</div><div class="line">    <span class="keyword">self</span>.imgFrm = imgFrm;</div><div class="line">    <span class="built_in">CGContextDrawImage</span>(context,imgFrm, image.CGImage);</div><div class="line">    </div><div class="line">    <span class="built_in">CFRelease</span>(path);</div><div class="line">    <span class="built_in">CFRelease</span>(frameSetter);</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> ascentCallBacks(<span class="keyword">void</span> * ref)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [(<span class="built_in">NSNumber</span> *)[(__bridge <span class="built_in">NSDictionary</span> *)ref valueForKey:<span class="string">@"height"</span>] floatValue];</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> descentCallBacks(<span class="keyword">void</span> * ref)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> widthCallBacks(<span class="keyword">void</span> * ref)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [(<span class="built_in">NSNumber</span> *)[(__bridge <span class="built_in">NSDictionary</span> *)ref valueForKey:<span class="string">@"width"</span>] floatValue];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">-(<span class="built_in">CGRect</span>)calculateImageRectWithFrame:(<span class="built_in">CTFrameRef</span>)frame</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSArray</span> * arrLines = (<span class="built_in">NSArray</span> *)<span class="built_in">CTFrameGetLines</span>(frame);</div><div class="line">    <span class="built_in">NSInteger</span> count = [arrLines count];</div><div class="line">    <span class="built_in">CGPoint</span> points[count];</div><div class="line">    <span class="built_in">CTFrameGetLineOrigins</span>(frame, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), points);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i ++) &#123;</div><div class="line">        <span class="built_in">CTLineRef</span> line = (__bridge <span class="built_in">CTLineRef</span>)arrLines[i];</div><div class="line">        <span class="built_in">NSArray</span> * arrGlyphRun = (<span class="built_in">NSArray</span> *)<span class="built_in">CTLineGetGlyphRuns</span>(line);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrGlyphRun.count; j ++) &#123;</div><div class="line">            <span class="built_in">CTRunRef</span> run = (__bridge <span class="built_in">CTRunRef</span>)arrGlyphRun[j];</div><div class="line">            <span class="built_in">NSDictionary</span> * attributes = (<span class="built_in">NSDictionary</span> *)<span class="built_in">CTRunGetAttributes</span>(run);            <span class="built_in">CTRunDelegateRef</span> delegate = (__bridge <span class="built_in">CTRunDelegateRef</span>)[attributes valueForKey:(<span class="keyword">id</span>)kCTRunDelegateAttributeName];</div><div class="line">            <span class="keyword">if</span> (delegate == <span class="literal">nil</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">NSDictionary</span> * dic = <span class="built_in">CTRunDelegateGetRefCon</span>(delegate);</div><div class="line">            <span class="keyword">if</span> (![dic isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">CGPoint</span> point = points[i];</div><div class="line">            <span class="built_in">CGFloat</span> ascent;</div><div class="line">            <span class="built_in">CGFloat</span> descent;</div><div class="line">            <span class="built_in">CGRect</span> boundsRun;</div><div class="line">            boundsRun.size.width = <span class="built_in">CTRunGetTypographicBounds</span>(run, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), &amp;ascent, &amp;descent, <span class="literal">NULL</span>);</div><div class="line">            boundsRun.size.height = ascent + descent;</div><div class="line">            <span class="built_in">CGFloat</span> xOffset = <span class="built_in">CTLineGetOffsetForStringIndex</span>(line, <span class="built_in">CTRunGetStringRange</span>(run).location, <span class="literal">NULL</span>);</div><div class="line">            boundsRun.origin.x = point.x + xOffset;</div><div class="line">            boundsRun.origin.y = point.y - descent;</div><div class="line">            <span class="built_in">CGPathRef</span> path = <span class="built_in">CTFrameGetPath</span>(frame);</div><div class="line">            <span class="built_in">CGRect</span> colRect = <span class="built_in">CGPathGetBoundingBox</span>(path);</div><div class="line">            <span class="built_in">CGRect</span> imageBounds = <span class="built_in">CGRectOffset</span>(boundsRun, colRect.origin.x, colRect.origin.y);</div><div class="line">            <span class="keyword">return</span> imageBounds;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGRectZero</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)dealloc</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CFRelease</span>(_ctFrame);</div><div class="line">&#125;</div><div class="line">```  </div><div class="line"><span class="meta">#### 逐句解释</span></div><div class="line"></div><div class="line">```objectivec</div><div class="line"> <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();<span class="comment">//获取当前绘制上下文</span></div></pre></td></tr></table></figure><br><br>所有的绘制操作都是在上下文上进行绘制的<br><br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置当前文本矩阵为不做图形变换</span></div><div class="line"><span class="built_in">CGContextSetTextMatrix</span>(context, <span class="built_in">CGAffineTransformIdentity</span>); </div><div class="line"><span class="comment">//平移方法，将context向上平移一个屏幕高</span></div><div class="line"><span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0</span>, <span class="keyword">self</span>.bounds.size.height);</div><div class="line"><span class="comment">//缩放方法，x轴缩放系数为1，则不变，y轴缩放系数为-1，则相当于以x轴为轴旋转180度</span></div><div class="line"><span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1.0</span>, <span class="number">-1.0</span>);</div></pre></td></tr></table></figure><br><br>coreText 起初是为OSX设计的，而OSX得坐标原点是左下角，y轴正方向朝上。iOS中坐标原点是左上角，y轴正方向向下。若不进行坐标转换，则文字从下开始，还是倒着的。这三句对context的坐标系进行转换<br>&gt;context说的是绘画人所处的角度上下文,画布无论怎么样都是正对着屏幕的，它不会旋转，或者放大缩小，或者移动,认为context就是画布这种理解是错误的<br>CTM，Context Translate Matrix。 它是把要绘制的上下文以一个叫做Matrix的东西来表示，可以简单地想作，绘制的上下文的每一个点都映射在Matrix上，你在Matrix上的操作都会使得上下文上的点产生相应的变动。如放大、旋转、移动。<br><br><br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">事实上，图文混排就是在要插入图片的位置插入一个富文本类型的占位符。通过CTRUNDelegate设置图片</div><div class="line">设置一个回调结构体，告诉代理该回调那些方法</div><div class="line">*/</div><div class="line"><span class="comment">//创建一个回调结构体，设置相关参数</span></div><div class="line"><span class="built_in">CTRunDelegateCallbacks</span> callBacks;</div><div class="line"><span class="comment">//memset将已开辟内存空间 callbacks 的首 n 个字节的值设为值 0, 相当于对CTRunDelegateCallbacks内存空间初始化</span></div><div class="line">memset(&amp;callBacks,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">CTRunDelegateCallbacks</span>));</div><div class="line"><span class="comment">//设置回调版本，默认这个</span></div><div class="line">callBacks.version = kCTRunDelegateVersion1;</div><div class="line"><span class="comment">//设置图片顶部距离基线的距离</span></div><div class="line">callBacks.getAscent = ascentCallBacks;</div><div class="line"><span class="comment">//设置图片底部距离基线的距离</span></div><div class="line">callBacks.getDescent = descentCallBacks;</div><div class="line"><span class="comment">//设置图片宽度</span></div><div class="line">callBacks.getWidth = widthCallBacks;</div></pre></td></tr></table></figure><br><br>coreText中大量的调用c的方法。大部分跟系统底层有关的都需要调c的方法。所以设置代理要按照人家的方法来啊。<br><br><font color="#ff00ff" size="3px">补充一下知识</font>  <p><img src="http://oui2ar2u7.bkt.clouddn.com/e34179b7262c069a.gif" alt="">  </p><p>这是一个CTRun的尺寸图，我们绘制图片的时候实际上实在一个CTRun中绘制这个图片，那么CTRun绘制的坐标系中，它会以origin点作为原点进行绘制。<br><code>基线为过原点的x轴，ascent即为CTRun顶线距基线的距离，descent即为底线距基线的距离。</code><br>我们绘制图片应该从原点开始绘制，图片的高度及宽度及CTRun的高度及宽度，我们通过代理设置CTRun的尺寸间接设置图片的尺寸。  </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> * dicPic = @&#123;<span class="string">@"height"</span>:@<span class="number">129</span>,<span class="string">@"width"</span>:@<span class="number">129</span>&#125;;</div><div class="line"><span class="built_in">CTRunDelegateRef</span> delegate = <span class="built_in">CTRunDelegateCreate</span>(&amp; callBacks, (__bridge <span class="keyword">void</span> *)dicPic);</div></pre></td></tr></table></figure><p>上面只是设置了回调结构体，然而我们还没有告诉这个代理我们要的图片尺寸。<br>所以这句话就在<code>设置代理的时候绑定了一个返回图片尺寸的字典。</code><br>事实上此处你可以<code>绑定任意对象</code>。此处你<code>绑定的对象既是回调方法中的参数ref</code>。<br>三个回调方法代码如下</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> ascentCallBacks(<span class="keyword">void</span> * ref)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [(<span class="built_in">NSNumber</span> *)[(__bridge <span class="built_in">NSDictionary</span> *)ref valueForKey:<span class="string">@"height"</span>] floatValue];</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> descentCallBacks(<span class="keyword">void</span> * ref)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> widthCallBacks(<span class="keyword">void</span> * ref)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [(<span class="built_in">NSNumber</span> *)[(__bridge <span class="built_in">NSDictionary</span> *)ref valueForKey:<span class="string">@"width"</span>] floatValue];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于是c的方法，所以也没有什么对象的概念。是一个指针类型的数据。不过oc的对象其实也就是c的结构体。我们可以通过类型转换获得oc中的字典。<br><code>__bridge既是C的结构体转换成OC对象时需要的一个修饰词。</code></p><p>图片的插入(创建一个富文本类型的图片占位符，绑定我们的代理)</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建空白字符</span></div><div class="line"><span class="keyword">unichar</span> placeHolder = <span class="number">0xFFFC</span>;</div><div class="line"><span class="comment">//已空白字符生成字符串</span></div><div class="line"><span class="built_in">NSString</span> * placeHolderStr = [<span class="built_in">NSString</span> stringWithCharacters:&amp;placeHolder length:<span class="number">1</span>];</div><div class="line"><span class="comment">//用字符串初始化占位符的富文本</span></div><div class="line"><span class="built_in">NSMutableAttributedString</span> * placeHolderAttrStr = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:placeHolderStr];</div><div class="line"><span class="comment">//给字符串中的范围中字符串设置代理</span></div><div class="line"><span class="built_in">CFAttributedStringSetAttribute</span>((<span class="built_in">CFMutableAttributedStringRef</span>)placeHolderAttrStr, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">1</span>), kCTRunDelegateAttributeName, delegate);</div><div class="line"><span class="comment">//释放（__bridge进行C与OC数据类型的转换，C为非ARC，需要手动管理）</span></div><div class="line"><span class="built_in">CFRelease</span>(delegate);</div></pre></td></tr></table></figure><p>C中就是传递指针的数据比如说字符串，数组时转换不需要用__bridge<br>需要手动释放是因为进行了类型转换之后就不属于对象了，也不再归自动引用计数机制管理了，所以手动管理。  </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将占位符插入原富文本</span></div><div class="line">[attributeStr insertAttributedString:placeHolderAttrStr atIndex:<span class="number">12</span>];</div></pre></td></tr></table></figure><p>绘制文本</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一个frame的工厂，负责生成frame</span></div><div class="line"><span class="built_in">CTFramesetterRef</span> frameSetter = <span class="built_in">CTFramesetterCreateWithAttributedString</span>((<span class="built_in">CFAttributedStringRef</span>)attributeStr);</div><div class="line"><span class="comment">//创建绘制区域</span></div><div class="line"><span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line"><span class="comment">//添加绘制尺寸</span></div><div class="line"><span class="built_in">CGPathAddRect</span>(path, <span class="literal">NULL</span>, <span class="keyword">self</span>.bounds);</div><div class="line"><span class="built_in">NSInteger</span> length = attributeStr.length;</div><div class="line"><span class="comment">//工厂根据绘制区域及富文本（可选范围，多次设置）设置frame</span></div><div class="line"><span class="built_in">CTFrameRef</span> frame = <span class="built_in">CTFramesetterCreateFrame</span>(frameSetter, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>,length), path, <span class="literal">NULL</span>);</div><div class="line"><span class="comment">//根据frame绘制文字</span></div><div class="line"><span class="built_in">CTFrameDraw</span>(frame, context);</div></pre></td></tr></table></figure><p><strong><code>frameSetter</code></strong>是根据富文本生成的一个<strong><code>frame</code></strong>生成的工厂，你可以通过<strong><code>framesetter</code></strong>以及你想要绘制的富文本的范围获取该CTRun的frame。<br>但是你需要注意的是，获取的frame是仅绘制你所需要的那部分富文本的frame。即当前情况下，你绘制范围定为（10，1），那么你得到的尺寸是只绘制（10，1）的尺寸，他应该从屏幕左上角开始（因为你改变了坐标系），而不是当你绘制全部富文本时他该在的位置。</p><p>然后建立一会绘制的尺寸，实际上就是在指定你的绘制范围。<br>接着生成整个富文本绘制所需要的<strong><code>frame</code></strong>。因为范围是全部文本，所以获取的frame即为全部文本的frame(一定要搞清楚全部与指定范围获取的frame他们都是从左上角开始的，否则你会进入一个奇怪的误区，稍后会提到的)。<br>最后，根据你获得的frame，绘制全部富文本  </p><font color="#ff00ff" size="3px">补充一下知识</font>   <p><img src="http://oui2ar2u7.bkt.clouddn.com/c60db79021e6c801.jpg" alt=""><br><img src="http://oui2ar2u7.bkt.clouddn.com/dee7c3a14e289722.jpg" alt="">  </p><blockquote><p>CTFrame可以理解为一个整体的画布由很多行(CTLine)组成，而每一行又由一个或者多个小方块(CTRun)组成，我们不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。</p><p>CTFramesetter其实就是CTFrame的工厂方法，通过给定的NSAttributedString，生成CTRrame，同时系统自动的创建了CTTypesetter，CTTypesetter就是管理你的字体的类。</p></blockquote><p>绘制图片<br>绘制图片用下面这个方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGContextDrawImage</span>(context,imgFrm, image.CGImage);<span class="comment">//绘制图片</span></div></pre></td></tr></table></figure><p>有三个参数，分别是context，frame，以及image。context就是当前的上下文image就是要添加的那个图片，不过是CGImage类型,通过UIImage转出CGImage就好了，下面讲一下frame的获取:<strong><code>-(CGRect)calculateImageRectWithFrame:(CTFrameRef)frame</code></strong>。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据frame获取需要绘制的线的数组</span></div><div class="line"><span class="built_in">NSArray</span> * arrLines = (<span class="built_in">NSArray</span> *)<span class="built_in">CTFrameGetLines</span>(frame);</div><div class="line"><span class="comment">//获取线的数量</span></div><div class="line"><span class="built_in">NSInteger</span> count = [arrLines count];</div><div class="line"><span class="comment">//建立起点的数组（cgpoint类型为结构体，故用C语言的数组）</span></div><div class="line"><span class="built_in">CGPoint</span> points[count];</div><div class="line"><span class="comment">//获取起点</span></div><div class="line"><span class="built_in">CTFrameGetLineOrigins</span>(frame, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), points);</div></pre></td></tr></table></figure><p>因为CTFrameGetLines（）返回值是CFArrayRef类型的数据。就是一个c的数组类型吧<br>每个CTLine都有自己的origin。所以要生成一个相同元素个数的数组去盛放origin对象。<br>然后用CTFrameGetLineOrigins获取所有原点。</p><p>计算frame<br>遍历frame中的所有CTRun，检查是不是我们绑定图片的那个，如果是，根据该CTRun所在CTLine的origin以及CTRun在CTLine中的横向偏移量计算出CTRun的原点，加上其尺寸即为该CTRun的尺寸。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i ++) &#123;<span class="comment">//遍历线的数组</span></div><div class="line">        <span class="built_in">CTLineRef</span> line = (__bridge <span class="built_in">CTLineRef</span>)arrLines[i];</div><div class="line">        <span class="built_in">NSArray</span> * arrGlyphRun = (<span class="built_in">NSArray</span> *)<span class="built_in">CTLineGetGlyphRuns</span>(line);<span class="comment">//获取GlyphRun数组（GlyphRun：高效的字符绘制方案）</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrGlyphRun.count; j ++) &#123;<span class="comment">//遍历CTRun数组</span></div><div class="line">            <span class="built_in">CTRunRef</span> run = (__bridge <span class="built_in">CTRunRef</span>)arrGlyphRun[j];<span class="comment">//获取CTRun</span></div><div class="line">            <span class="built_in">NSDictionary</span> * attributes = (<span class="built_in">NSDictionary</span> *)<span class="built_in">CTRunGetAttributes</span>(run);<span class="comment">//获取CTRun的属性</span></div><div class="line">            <span class="built_in">CTRunDelegateRef</span> delegate = (__bridge <span class="built_in">CTRunDelegateRef</span>)[attributes valueForKey:(<span class="keyword">id</span>)kCTRunDelegateAttributeName];<span class="comment">//获取代理</span></div><div class="line">            <span class="keyword">if</span> (delegate == <span class="literal">nil</span>) &#123;<span class="comment">//非空</span></div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">NSDictionary</span> * dic = <span class="built_in">CTRunDelegateGetRefCon</span>(delegate);<span class="comment">//判断代理字典</span></div><div class="line">            <span class="keyword">if</span> (![dic isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">CGPoint</span> point = points[i];<span class="comment">//获取一个起点</span></div><div class="line">            <span class="built_in">CGFloat</span> ascent;<span class="comment">//获取上距</span></div><div class="line">            <span class="built_in">CGFloat</span> descent;<span class="comment">//获取下距</span></div><div class="line">            <span class="built_in">CGRect</span> boundsRun;<span class="comment">//创建一个frame</span></div><div class="line">            boundsRun.size.width = <span class="built_in">CTRunGetTypographicBounds</span>(run, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), &amp;ascent, &amp;descent, <span class="literal">NULL</span>);</div><div class="line">            boundsRun.size.height = ascent + descent;<span class="comment">//取得高</span></div><div class="line">            <span class="built_in">CGFloat</span> xOffset = <span class="built_in">CTLineGetOffsetForStringIndex</span>(line, <span class="built_in">CTRunGetStringRange</span>(run).location, <span class="literal">NULL</span>);<span class="comment">//获取x偏移量</span></div><div class="line">            boundsRun.origin.x = point.x + xOffset;<span class="comment">//point是行起点位置，加上每个字的偏移量得到每个字的x</span></div><div class="line">            boundsRun.origin.y = point.y - descent;<span class="comment">//计算原点</span></div><div class="line">            <span class="built_in">CGPathRef</span> path = <span class="built_in">CTFrameGetPath</span>(frame);<span class="comment">//获取绘制区域</span></div><div class="line">            <span class="built_in">CGRect</span> colRect = <span class="built_in">CGPathGetBoundingBox</span>(path);<span class="comment">//获取剪裁区域边框</span></div><div class="line">            <span class="built_in">CGRect</span> imageBounds = <span class="built_in">CGRectOffset</span>(boundsRun, colRect.origin.x, colRect.origin.y);</div><div class="line">            <span class="keyword">return</span> imageBounds;</div></pre></td></tr></table></figure><p>手动释放创建的对象</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CFRelease</span>(path);</div><div class="line"><span class="built_in">CFRelease</span>(frameSetter);</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CFRelease</span>(_ctFrame);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="两坐标系中point和frame的变换"><a href="#两坐标系中point和frame的变换" class="headerlink" title="两坐标系中point和frame的变换"></a>两坐标系中point和frame的变换</h4><blockquote><p>point<br>UIKit坐标系上的point转换为CoreText坐标系上的point，在UIKit坐标系上的一个点为(x,y),其在CoreText坐标系上为(x,self.bounds.size.height - y)<br>反过来转换也是一样的在CoreText坐标系上的一个点为(x,y),其在UIKit坐标系上为(x,self.bounds.size.height - y)  </p><p>frame<br>UIKit坐标系上的frame转换为CoreText坐标系上的frame，在UIKit坐标系上的一个frame为(x,y,width,height),其在CoreText坐标系上为(x,self.bounds.size.height - y - height,width,height)<br>反过来转换也是一样的在CoreText坐标系上的一个frame为(x,y,width,height),其在UIKit坐标系上为(x,self.bounds.size.height - y - height,width,height)</p></blockquote><h3 id="实现点击事件"><a href="#实现点击事件" class="headerlink" title="实现点击事件"></a>实现点击事件</h3><p>通过touchBegan方法拿到当前点击到的点，然后通过坐标判断这个点是否在某段文字上，如果在则触发对应事件。  </p><h4 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UITouch</span> * touch = [touches anyObject];</div><div class="line">    <span class="built_in">CGPoint</span> location = [<span class="keyword">self</span> systemPointFromScreenPoint:[touch locationInView:<span class="keyword">self</span>]];</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> checkIsClickOnImgWithPoint:location])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> clickOnStrWithPoint:location];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)checkIsClickOnImgWithPoint:(<span class="built_in">CGPoint</span>)location</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> isFrame:<span class="keyword">self</span>.imgFrm containsPoint:location])</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"您点击到了图片"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)clickOnStrWithPoint:(<span class="built_in">CGPoint</span>)location</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSArray</span> * lines = (<span class="built_in">NSArray</span> *)<span class="built_in">CTFrameGetLines</span>(_ctFrame);</div><div class="line">    <span class="built_in">CFRange</span> ranges[lines.count];</div><div class="line">    <span class="built_in">CGPoint</span> origins[lines.count];</div><div class="line">    <span class="built_in">CTFrameGetLineOrigins</span>(_ctFrame, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), origins);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lines.count; i ++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">CTLineRef</span> line = (__bridge <span class="built_in">CTLineRef</span>)lines[i];</div><div class="line">        <span class="built_in">CFRange</span> range = <span class="built_in">CTLineGetStringRange</span>(line);</div><div class="line">        ranges[i] = range;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _length; i ++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">long</span> maxLoc = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> lineNum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lines.count; j ++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">CFRange</span> range = ranges[j];</div><div class="line">            maxLoc = range.location + range.length <span class="number">-1</span>;</div><div class="line">            <span class="keyword">if</span> (i &lt;= maxLoc)</div><div class="line">            &#123;</div><div class="line">                lineNum = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">CTLineRef</span> line = (__bridge <span class="built_in">CTLineRef</span>)lines[lineNum];</div><div class="line">        <span class="built_in">CGPoint</span> origin = origins[lineNum];</div><div class="line">        <span class="built_in">CGRect</span> <span class="built_in">CTRunFrame</span> = [<span class="keyword">self</span> frameForCTRunWithIndex:i <span class="built_in">CTLine</span>:line origin:origin];</div><div class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> isFrame:<span class="built_in">CTRunFrame</span> containsPoint:location])</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"您点击到了第 %d 个字符，位于第 %d 行，然而他没有响应事件。"</span>,i,lineNum + <span class="number">1</span>);<span class="comment">//点击到文字，然而没有响应的处理。可以做其他处理</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"您没有点击到文字"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)isIndex:(<span class="built_in">NSInteger</span>)index inRange:(<span class="built_in">NSRange</span>)range</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ((index &lt;= range.location + range.length - <span class="number">1</span>) &amp;&amp; (index &gt;= range.location))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGPoint</span>)systemPointFromScreenPoint:(<span class="built_in">CGPoint</span>)origin</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGPointMake</span>(origin.x, <span class="keyword">self</span>.bounds.size.height - origin.y);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)isFrame:(<span class="built_in">CGRect</span>)frame containsPoint:(<span class="built_in">CGPoint</span>)point</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGRectContainsPoint</span>(frame, point);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGRect</span>)frameForCTRunWithIndex:(<span class="built_in">NSInteger</span>)index <span class="built_in">CTLine</span>:(<span class="built_in">CTLineRef</span>)line origin:(<span class="built_in">CGPoint</span>)origin</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGFloat</span> offsetX = <span class="built_in">CTLineGetOffsetForStringIndex</span>(line, index, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">CGFloat</span> offsetX2 = <span class="built_in">CTLineGetOffsetForStringIndex</span>(line, index + <span class="number">1</span>, <span class="literal">NULL</span>);</div><div class="line">    offsetX += origin.x;</div><div class="line">    offsetX2 += origin.x;</div><div class="line">    <span class="built_in">CGFloat</span> offsetY = origin.y;</div><div class="line">    <span class="built_in">CGFloat</span> lineAscent;</div><div class="line">    <span class="built_in">CGFloat</span> lineDeScent;</div><div class="line">    <span class="built_in">NSArray</span> * runs = (__bridge <span class="built_in">NSArray</span> *)<span class="built_in">CTLineGetGlyphRuns</span>(line);</div><div class="line">    <span class="built_in">CTRunRef</span> runCurrent;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; runs.count; k ++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">CTRunRef</span> run = (__bridge <span class="built_in">CTRunRef</span>)runs[k];</div><div class="line">        <span class="built_in">CFRange</span> range = <span class="built_in">CTRunGetStringRange</span>(run);</div><div class="line">        <span class="built_in">NSRange</span> rangeOC = <span class="built_in">NSMakeRange</span>(range.location, range.length);</div><div class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> isIndex:index inRange:rangeOC])</div><div class="line">        &#123;</div><div class="line">            runCurrent = run;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CTRunGetTypographicBounds</span>(runCurrent, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), &amp;lineAscent, &amp;lineDeScent, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">CGFloat</span> height = lineAscent + lineDeScent;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGRectMake</span>(offsetX, offsetY, offsetX2 - offsetX, height);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="分段解析"><a href="#分段解析" class="headerlink" title="分段解析"></a>分段解析</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///点击方法</span></div><div class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UITouch</span> * touch = [touches anyObject];</div><div class="line">   <span class="comment">//获得点击位置在CoreText坐标系上的坐标</span></div><div class="line">    <span class="built_in">CGPoint</span> location = [<span class="keyword">self</span> systemPointFromScreenPoint:[touch locationInView:<span class="keyword">self</span>]];</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> checkIsClickOnImgWithPoint:location]) &#123;<span class="comment">//检查是否点击在图片上，如果在，优先响应图片事件</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> ClickOnStrWithPoint:location];<span class="comment">//响应字符串事件</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>坐标转换<br>因为UIKit坐标系与系统坐标系的不同，我们要将坐标系统一为CoreText坐标</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//坐标转换，将UIkit坐标转换为CoreText坐标</span></div><div class="line">- (<span class="built_in">CGPoint</span>)systemPointFromScreenPoint:(<span class="built_in">CGPoint</span>)origin</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGPointMake</span>(origin.x, <span class="keyword">self</span>.bounds.size.height - origin.y);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>点击图片判断  </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//遍历图片frame的数组与点击位置比较，如果在范围内则响应数组取出对应响应并执行，返回YES,否则返回NO</span></div><div class="line">- (<span class="built_in">BOOL</span>)checkIsClickOnImgWithPoint:(<span class="built_in">CGPoint</span>)location</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> isFrame:<span class="keyword">self</span>.imgFrm containsPoint:location])</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"您点击到了图片"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//检测点是否包含在frame中</span></div><div class="line">- (<span class="built_in">BOOL</span>)isFrame:(<span class="built_in">CGRect</span>)frame containsPoint:(<span class="built_in">CGPoint</span>)point</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGRectContainsPoint</span>(frame, point);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于传入的point是CoreText坐标（本例中），所以frame我们一定要传入CoreText坐标系下的frame才能正确对应。</p><p>点击文字判断<br><img src="http://oui2ar2u7.bkt.clouddn.com/1501901391x1948173751.png" alt="">  </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串点击检查</span></div><div class="line"><span class="comment">//将响应字符串的每个字符取出与点击位置比较，若在范围内则点击到响应文字</span></div><div class="line">- (<span class="keyword">void</span>)clickOnStrWithPoint:(<span class="built_in">CGPoint</span>)location</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSArray</span> * lines = (<span class="built_in">NSArray</span> *)<span class="built_in">CTFrameGetLines</span>(_ctFrame);<span class="comment">//获取所有CTLine</span></div><div class="line">    <span class="built_in">CFRange</span> ranges[lines.count];<span class="comment">//初始化每一CTLine的range数组</span></div><div class="line">    <span class="built_in">CGPoint</span> origins[lines.count];<span class="comment">//初始化每一CTLine的原点数组</span></div><div class="line">    <span class="built_in">CTFrameGetLineOrigins</span>(_ctFrame, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), origins);<span class="comment">//获取所有CTLine的原点</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lines.count; i ++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">CTLineRef</span> line = (__bridge <span class="built_in">CTLineRef</span>)lines[i];</div><div class="line">        <span class="built_in">CFRange</span> range = <span class="built_in">CTLineGetStringRange</span>(line);</div><div class="line">        ranges[i] = range;</div><div class="line">    &#125;<span class="comment">//获得所有CTLine的Range</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _length; i ++)</div><div class="line">    &#123;<span class="comment">//逐字检查</span></div><div class="line">        <span class="keyword">long</span> maxLoc = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> lineNum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lines.count; j ++)</div><div class="line">        &#123;<span class="comment">//获取对应字符所在CTLine的index</span></div><div class="line">            <span class="built_in">CFRange</span> range = ranges[j];</div><div class="line">            maxLoc = range.location + range.length <span class="number">-1</span>;</div><div class="line">            <span class="keyword">if</span> (i &lt;= maxLoc)</div><div class="line">            &#123;</div><div class="line">                lineNum = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">CTLineRef</span> line = (__bridge <span class="built_in">CTLineRef</span>)lines[lineNum];<span class="comment">//取到字符对应的CTLine</span></div><div class="line">        <span class="built_in">CGPoint</span> origin = origins[lineNum];<span class="comment">//获得字符对应的CTLine的原点</span></div><div class="line">        <span class="built_in">CGRect</span> <span class="built_in">CTRunFrame</span> = [<span class="keyword">self</span> frameForCTRunWithIndex:i <span class="built_in">CTLine</span>:line origin:origin];<span class="comment">//计算对应字符的frame</span></div><div class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> isFrame:<span class="built_in">CTRunFrame</span> containsPoint:location])</div><div class="line">        &#123;<span class="comment">//如果点击位置在字符范围内，响应时间，跳出循环</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"您点击到了第 %d 个字符，位于第 %d 行，然而他没有响应事件。"</span>,i,lineNum + <span class="number">1</span>);<span class="comment">//点击到文字，然而没有响应的处理。可以做其他处理</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"您没有点击到文字"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///字符frame计算</span></div><div class="line"><span class="comment">/*</span></div><div class="line"> 返回索引字符的frame</div><div class="line"></div><div class="line"> index：索引</div><div class="line"> line：索引字符所在CTLine</div><div class="line"> origin：line的起点</div><div class="line">*/</div><div class="line">-(<span class="built_in">CGRect</span>)frameForCTRunWithIndex:(<span class="built_in">NSInteger</span>)index</div><div class="line">                         <span class="built_in">CTLine</span>:(<span class="built_in">CTLineRef</span>)line</div><div class="line">                         origin:(<span class="built_in">CGPoint</span>)origin</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGFloat</span> offsetX = <span class="built_in">CTLineGetOffsetForStringIndex</span>(line, index, <span class="literal">NULL</span>);<span class="comment">//获取字符起点相对于CTLine的原点的偏移量</span></div><div class="line">    <span class="built_in">CGFloat</span> offsexX2 = <span class="built_in">CTLineGetOffsetForStringIndex</span>(line, index + <span class="number">1</span>, <span class="literal">NULL</span>);<span class="comment">//获取下一个字符的偏移量，两者之间即为字符X范围</span></div><div class="line">    offsetX += origin.x;</div><div class="line">    offsexX2 += origin.x;<span class="comment">//坐标转换，将点的CTLine坐标转换至CoreText坐标</span></div><div class="line">    <span class="built_in">CGFloat</span> offsetY = origin.y;<span class="comment">//取到CTLine的起点Y</span></div><div class="line">    <span class="built_in">CGFloat</span> lineAscent;<span class="comment">//初始化上下边距的变量</span></div><div class="line">    <span class="built_in">CGFloat</span> lineDescent;</div><div class="line">    <span class="built_in">NSArray</span> * runs = (__bridge <span class="built_in">NSArray</span> *)<span class="built_in">CTLineGetGlyphRuns</span>(line);<span class="comment">//获取所有CTRun</span></div><div class="line">    <span class="built_in">CTRunRef</span> runCurrent;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; runs.count; k ++) &#123;<span class="comment">//获取当前点击的CTRun</span></div><div class="line">        <span class="built_in">CTRunRef</span> run = (__bridge <span class="built_in">CTRunRef</span>)runs[k];</div><div class="line">        <span class="built_in">CFRange</span> range = <span class="built_in">CTRunGetStringRange</span>(run);<span class="comment">//获得CTRun在富文本中的范围</span></div><div class="line">        <span class="built_in">NSRange</span> rangeOC = <span class="built_in">NSMakeRange</span>(range.location, range.length);</div><div class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> isIndex:index inRange:rangeOC]) &#123;</div><div class="line">            runCurrent = run;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CTRunGetTypographicBounds</span>(runCurrent, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), &amp;lineAscent, &amp;lineDescent, <span class="literal">NULL</span>);<span class="comment">//获得对应CTRun的尺寸信息</span></div><div class="line">    offsetY -= lineDescent;</div><div class="line">    <span class="built_in">CGFloat</span> height = lineAscent + lineDescent;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGRectMake</span>(offsetX, offsetY, offsexX2 - offsetX, height);<span class="comment">//返回一个字符的Frame</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CTLineGetOffsetForStringIndex</span>(,,)</div></pre></td></tr></table></figure><blockquote><p>获取一行文字中，指定charIndex字符相对x原点的偏移量，返回值与第三个参数同为一个值。如果charIndex超出一行的字符长度则反回最大长度结束位置的偏移量，如一行文字共有17个字符，哪么返回的是第18个字符的起始偏移，即第17个偏移+第17个字符占有的宽度=第18个起始位置的偏移。因此想求一行字符所占的像素长度时，就可以使用此函数，将charIndex设置为大于字符长度即可。  </p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///范围检测</span></div><div class="line">-(<span class="built_in">BOOL</span>)isIndex:(<span class="built_in">NSInteger</span>)index inRange:(<span class="built_in">NSRange</span>)range</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ((index &lt;= range.location + range.length - <span class="number">1</span>) &amp;&amp; (index &gt;= range.location)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="CoreText实现图文混排之文字环绕及点击算法"><a href="#CoreText实现图文混排之文字环绕及点击算法" class="headerlink" title="CoreText实现图文混排之文字环绕及点击算法"></a>CoreText实现图文混排之文字环绕及点击算法</h3><p>整体代码  </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CoreTextV</span> ()</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">CTFrameRef</span> _frame;</div><div class="line">    <span class="built_in">NSInteger</span> _length;</div><div class="line">    <span class="built_in">CGRect</span> _imgFrm;</div><div class="line">    <span class="built_in">NSMutableArray</span> * arrText;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CoreTextV</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> drawRect:rect];</div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="built_in">CGContextSetTextMatrix</span>(context, <span class="built_in">CGAffineTransformIdentity</span>);</div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0</span>, <span class="keyword">self</span>.bounds.size.height);</div><div class="line">    <span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1.0</span>f, <span class="number">-1.0</span>f);</div><div class="line">    arrText = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    <span class="built_in">NSMutableAttributedString</span> * attributedStr = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:<span class="stringspan>];</div><div class="line">    [attributedStr addAttribute:<span class="built_in">NSForegroundColorAttributeName</span> value:[<span class="built_in">UIColor</span> whiteColor] range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attributedStr.length)];</div><div class="line">    <span class="built_in">CTRunDelegateCallbacks</span> callBacks;</div><div class="line">    memset(&amp;callBacks, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">CTRunDelegateCallbacks</span>));</div><div class="line">    callBacks.version = kCTRunDelegateVersion1;</div><div class="line">    callBacks.getAscent = ascentCallBacks;</div><div class="line">    callBacks.getDescent = descentCallBacks;</div><div class="line">    callBacks.getWidth = widthCallBacks;</div><div class="line">    <span class="built_in">NSDictionary</span> * dicPic = @&#123;<span class="string">@"height"</span> : @<span class="number">90</span>, <span class="string">@"width"</span> : @<span class="number">160</span>&#125;;</div><div class="line">    <span class="built_in">CTRunDelegateRef</span> delegate = <span class="built_in">CTRunDelegateCreate</span>(&amp;callBacks, (__bridge <span class="keyword">void</span> *)dicPic);</div><div class="line">    <span class="keyword">unichar</span> placeHolder = <span class="number">0xFFFC</span>;</div><div class="line">    <span class="built_in">NSString</span> * placeHolderStr = [<span class="built_in">NSString</span> stringWithCharacters:&amp;placeHolder length:<span class="number">1</span>];</div><div class="line">    <span class="built_in">NSMutableAttributedString</span> * placeHolderAttrStr = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:placeHolderStr];</div><div class="line">    <span class="built_in">CFAttributedStringSetAttribute</span>((<span class="built_in">CFMutableAttributedStringRef</span>)placeHolderAttrStr, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">1</span>), kCTRunDelegateAttributeName, delegate);</div><div class="line">    <span class="built_in">CFRelease</span>(delegate);</div><div class="line">    [attributedStr insertAttributedString:placeHolderAttrStr atIndex:<span class="number">300</span>];</div><div class="line">    <span class="built_in">NSDictionary</span> * activeAttr = @&#123;<span class="built_in">NSForegroundColorAttributeName</span> : [<span class="built_in">UIColor</span> redColor],<span class="string">@"click"</span> : <span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(click))&#125;;</div><div class="line">    [attributedStr addAttributes:activeAttr range:<span class="built_in">NSMakeRange</span>(<span class="number">100</span>, <span class="number">30</span>)];</div><div class="line">    [attributedStr addAttributes:activeAttr range:<span class="built_in">NSMakeRange</span>(<span class="number">400</span>, <span class="number">100</span>)];</div><div class="line">    </div><div class="line">    <span class="built_in">CTFramesetterRef</span> frameSetter = <span class="built_in">CTFramesetterCreateWithAttributedString</span>((<span class="built_in">CFAttributedStringRef</span>)attributedStr);</div><div class="line">    <span class="comment">//只要在这个地方传入的path中将特殊区域排除我们获得的frame就不包含该区域，从而绘制的文本也不会在该区域中绘制。</span></div><div class="line">    <span class="built_in">UIBezierPath</span> * path = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="keyword">self</span>.bounds];</div><div class="line">    <span class="built_in">UIBezierPath</span> * cirP = [<span class="built_in">UIBezierPath</span> bezierPathWithOvalInRect:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>)];</div><div class="line">    [path appendPath:cirP];</div><div class="line">    _length = attributedStr.length;</div><div class="line">    _frame = <span class="built_in">CTFramesetterCreateFrame</span>(frameSetter, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, _length), path.CGPath, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">CTFrameDraw</span>(_frame, context);</div><div class="line">    </div><div class="line">    <span class="built_in">UIImage</span> * image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"bd_logo1.jpeg"</span>];</div><div class="line">    [<span class="keyword">self</span> handleActiveRectWithFrame:_frame];</div><div class="line">    <span class="built_in">CGContextDrawImage</span>(context, _imgFrm, image.CGImage);</div><div class="line">    </div><div class="line">    <span class="built_in">CGContextDrawImage</span>(context, cirP.bounds, [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"bd_logo1.jpeg"</span>] dw_ClipImageWithPath:cirP mode:DWContentModeScaleAspectFill].CGImage);</div><div class="line">    <span class="built_in">CFRelease</span>(_frame);</div><div class="line">    <span class="built_in">CFRelease</span>(frameSetter);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> ascentCallBacks(<span class="keyword">void</span> * ref)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [(<span class="built_in">NSNumber</span> *)[(__bridge <span class="built_in">NSDictionary</span> *)ref valueForKey:<span class="string">@"height"</span>] floatValue];</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> descentCallBacks(<span class="keyword">void</span> * ref)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> widthCallBacks(<span class="keyword">void</span> * ref)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [(<span class="built_in">NSNumber</span> *)[(__bridge <span class="built_in">NSDictionary</span> *)ref valueForKey:<span class="string">@"width"</span>] floatValue];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)handleActiveRectWithFrame:(<span class="built_in">CTFrameRef</span>)frame</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSArray</span> * arrLines = (<span class="built_in">NSArray</span> *)<span class="built_in">CTFrameGetLines</span>(frame);</div><div class="line">    <span class="built_in">NSInteger</span> count = [arrLines count];</div><div class="line">    <span class="built_in">CGPoint</span> points[count];</div><div class="line">    <span class="built_in">CTFrameGetLineOrigins</span>(frame, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), points);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i ++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">CTLineRef</span> line = (__bridge <span class="built_in">CTLineRef</span>)arrLines[i];</div><div class="line">        <span class="built_in">NSArray</span> * arrGlyphRun = (<span class="built_in">NSArray</span> *)<span class="built_in">CTLineGetGlyphRuns</span>(line);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrGlyphRun.count; j ++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">CTRunRef</span> run = (__bridge <span class="built_in">CTRunRef</span>)arrGlyphRun[j];</div><div class="line">            <span class="built_in">NSDictionary</span> * attributes = (<span class="built_in">NSDictionary</span> *)<span class="built_in">CTRunGetAttributes</span>(run);</div><div class="line">            <span class="built_in">CTRunDelegateRef</span> delegate = (__bridge <span class="built_in">CTRunDelegateRef</span>)[attributes valueForKey:(<span class="keyword">id</span>)kCTRunDelegateAttributeName];</div><div class="line">            <span class="built_in">CGPoint</span> point = points[i];</div><div class="line">            <span class="keyword">if</span> (delegate == <span class="literal">nil</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">NSString</span> * string = attributes[<span class="string">@"click"</span>];</div><div class="line">                <span class="keyword">if</span> (string)</div><div class="line">                &#123;</div><div class="line">                    [arrText addObject:[<span class="built_in">NSValue</span> valueWithCGRect:[<span class="keyword">self</span> getLocWithFrame:frame <span class="built_in">CTLine</span>:line <span class="built_in">CTRun</span>:run origin:point]]];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">NSDictionary</span> * metaDic = <span class="built_in">CTRunDelegateGetRefCon</span>(delegate);</div><div class="line">            <span class="keyword">if</span> (![metaDic isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            _imgFrm = [<span class="keyword">self</span> getLocWithFrame:frame <span class="built_in">CTLine</span>:line <span class="built_in">CTRun</span>:run origin:point];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGRect</span>)getLocWithFrame:(<span class="built_in">CTFrameRef</span>)frame <span class="built_in">CTLine</span>:(<span class="built_in">CTLineRef</span>)line <span class="built_in">CTRun</span>:(<span class="built_in">CTRunRef</span>)run origin:(<span class="built_in">CGPoint</span>)origin</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGFloat</span> ascent;</div><div class="line">    <span class="built_in">CGFloat</span> descent;</div><div class="line">    <span class="built_in">CGRect</span> boundsRun;</div><div class="line">    boundsRun.size.width = <span class="built_in">CTRunGetTypographicBounds</span>(run, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), &amp;ascent, &amp;descent, <span class="literal">NULL</span>);</div><div class="line">    boundsRun.size.height = ascent + descent;</div><div class="line">    <span class="built_in">CGFloat</span> xOffset = <span class="built_in">CTLineGetOffsetForStringIndex</span>(line, <span class="built_in">CTRunGetStringRange</span>(run).location, <span class="literal">NULL</span>);</div><div class="line">    boundsRun.origin.x = origin.x + xOffset;</div><div class="line">    boundsRun.origin.y = origin.y - descent;</div><div class="line">    <span class="built_in">CGPathRef</span> path = <span class="built_in">CTFrameGetPath</span>(frame);</div><div class="line">    <span class="built_in">CGRect</span> colRect = <span class="built_in">CGPathGetBoundingBox</span>(path);</div><div class="line">    <span class="built_in">CGRect</span> deleteBounds = <span class="built_in">CGRectOffset</span>(boundsRun, colRect.origin.x, colRect.origin.y);</div><div class="line">    <span class="keyword">return</span> deleteBounds;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGRect</span>)convertRectFromLoc:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGRectMake</span>(rect.origin.x, <span class="keyword">self</span>.bounds.size.height - rect.origin.y - rect.size.height, rect.size.width, rect.size.height);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGPoint</span>)systemPointFromScreenPoint:(<span class="built_in">CGPoint</span>)origin</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGPointMake</span>(origin.x, <span class="keyword">self</span>.bounds.size.height - origin.y);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UITouch</span> * touch = [touches anyObject];</div><div class="line">    <span class="built_in">CGPoint</span> location = [<span class="keyword">self</span> systemPointFromScreenPoint:[touch locationInView:<span class="keyword">self</span>]];</div><div class="line"><span class="comment">//    CGRect imageFrmToScreen = [self convertRectFromLoc:_imgFrm];</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectContainsPoint</span>(_imgFrm, location))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"您点击了图片"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    [arrText enumerateObjectsUsingBlock:^(<span class="built_in">NSValue</span> * rectV, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line"><span class="comment">//        CGRect textFrmToScreen = [self convertRectFromLoc:[rectV CGRectValue]];</span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">CGRectContainsPoint</span>(rectV.CGRectValue, location))</div><div class="line">        &#123;</div><div class="line">            [<span class="keyword">self</span> click];</div><div class="line">            *stop = <span class="literal">YES</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)click</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"您点击了文字"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><p><img src="http://oui2ar2u7.bkt.clouddn.com/1501913622x1948173751.png" alt=""><br>为什么cirP的rect是CGRectMake(100, 100, 100, 200)，这个排除的区域却在那里?原因就在于UIKit坐标系统跟CoreText坐标系统的区别。  </p><p>绘制椭圆图片可以借助github上的一个工具库<a href="https://github.com/CodeWicky/-Tools" target="_blank" rel="external">DWImageUtils</a> 贴上代码 </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">UIImage</span> *)dw_ClipImageWithPath:(<span class="built_in">UIBezierPath</span> *)path mode:(DWContentMode)mode</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGFloat</span> originScale = <span class="keyword">self</span>.size.width * <span class="number">1.0</span> / <span class="keyword">self</span>.size.height;</div><div class="line">    <span class="built_in">CGRect</span> boxBounds = path.bounds;</div><div class="line">    <span class="built_in">CGFloat</span> width = boxBounds.size.width;</div><div class="line">    <span class="built_in">CGFloat</span> height = width / originScale;</div><div class="line">    <span class="keyword">switch</span> (mode) &#123;</div><div class="line">        <span class="keyword">case</span> DWContentModeScaleAspectFit:</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (height &gt; boxBounds.size.height) &#123;</div><div class="line">                height = boxBounds.size.height;</div><div class="line">                width = height * originScale;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> DWContentModeScaleAspectFill:</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (height &lt; boxBounds.size.height) &#123;</div><div class="line">                height = boxBounds.size.height;</div><div class="line">                width = height * originScale;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">if</span> (height != boxBounds.size.height) &#123;</div><div class="line">                height = boxBounds.size.height;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">///开启上下文</span></div><div class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(boxBounds.size, <span class="literal">NO</span>, [<span class="built_in">UIScreen</span> mainScreen].scale);</div><div class="line">    <span class="built_in">CGContextRef</span> bitmap = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    </div><div class="line">    <span class="comment">///归零path</span></div><div class="line">    <span class="built_in">UIBezierPath</span> * newPath = [path <span class="keyword">copy</span>];</div><div class="line">    [newPath applyTransform:<span class="built_in">CGAffineTransformMakeTranslation</span>(-path.bounds.origin.x, -path.bounds.origin.y)];</div><div class="line">    [newPath addClip];</div><div class="line">    </div><div class="line">    <span class="comment">///移动原点至图片中心</span></div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(bitmap, boxBounds.size.width / <span class="number">2.0</span>, boxBounds.size.height / <span class="number">2.0</span>);</div><div class="line">    <span class="built_in">CGContextScaleCTM</span>(bitmap, <span class="number">1.0</span>, <span class="number">-1.0</span>);</div><div class="line">    <span class="built_in">CGContextDrawImage</span>(bitmap, <span class="built_in">CGRectMake</span>(-width / <span class="number">2</span>, -height / <span class="number">2</span>, width, height), <span class="keyword">self</span>.CGImage);</div><div class="line">    </div><div class="line">    <span class="comment">///生成图片</span></div><div class="line">    <span class="built_in">UIImage</span> *newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> newImage;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://oui2ar2u7.bkt.clouddn.com/1501907720x1948173751.png" alt="">  </p><p>点击事件获取<br>1、主流方式：CTLineGetStringIndexForPosition</p><blockquote><p>主流方式就是当前大部分基于CoreText封装的富文本展示类（包括TTTAttributedLabel、NIAttributedLabel和FTCoreTextView）中使用的方法 CTLineGetStringIndexForPosition。这个方法是获取当前点在所在文字处于当前绘制文本的索引值。事实上如果没有一些其他因素的话，能使用这个方法是最简便快捷的</p><p>但是在实际使用中CTLineGetStringIndexForPosition这个方法<font color="#0000ff">获取一个字的index范围是这个字前面大概半个字开始到这个字中间的位置,从这个字的中间到这个字的后半个字就会获得下一个字的index。</font>  </p><p>CTLineGetStringIndexForPosition这个方法还有另一个作用还是很好用的。这个方法最好的用处就是判断一行CTLine最多容纳多少的字符，只需把这个point的x位置调很大（超过CTFrame path的宽度）就可以了。</p></blockquote><p>2、遍历CTRun比较法 (代码中的写法)<br>一次遍历中拿到所有活动图片和活动文字的frame，按照点击图片的处理方式处理文字，在添加点击事件的活动文本的特征点中添加加了click(属性名随便写，不要太low就行了)这么一个属性。通过遍历CTRun将活动文本的frame算出来，并存到一个数组里面arrText。</p><pre><code class="objectivec">[arrText addObject:[<span class="built_in">NSValue</span> valueWithCGRect:[<span class="keyword">self</span> getLocWithFrame:frame <span class="built_in">CTLine</span>:line <span class="built_in">CTRun</span>:run origin:point]]];</code></pre><blockquote><p>注意：文字frame不同于获取图片的frame。由于图片是在一个空白占位符上绘制文字，所以一定是以一个CTRun进行绘制的。但是第一篇文章中老司机说过，每个CTRun是所有具有相同属性的连续同行文字的集合。针对CTRun的特性，我们不难想到，文字由于可能出现两行，也有可能会活动文本的字体字号等其他属性不尽相同导致一段文字由两个CTRun进行绘制，所以不能单纯的保存一个frame，而是要以一个数组容纳他。再通过一些逻辑将不同的活动文本区别开来。</p></blockquote><p>参考：<br><a href="http://www.jianshu.com/p/6db3289fb05d" target="_blank" rel="external">CoreText实现图文混排</a><br><a href="http://www.jianshu.com/p/51c47329203e" target="_blank" rel="external">CoreText实现图文混排之点击事件</a><br><a href="http://www.jianshu.com/p/e154047b0f98" target="_blank" rel="external">CoreText实现图文混排之文字环绕及点击算法</a><br><a href="http://www.cnblogs.com/gatsbywang/p/4248977.html" target="_blank" rel="external">CoreText中坐标转换的一些理解</a><br><a href="http://blog.csdn.net/majiakun1/article/details/38140411" target="_blank" rel="external">CTLineRef详细介绍</a><br><a href="http://www.tuicool.com/articles/FfYjim" target="_blank" rel="external">CoreText原理及基本使用方法</a><br><a href="https://my.oschina.net/megan/blog/269042" target="_blank" rel="external">CoreText 实现图文混排</a><br><a href="https://my.oschina.net/u/2361492/blog/526814" target="_blank" rel="external">使用CoreText实现图文混排</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CoreText简介&quot;&gt;&lt;a href=&quot;#CoreText简介&quot; class=&quot;headerlink&quot; title=&quot;CoreText简介&quot;&gt;&lt;/a&gt;CoreText简介&lt;/h3&gt;&lt;p&gt;Core Text 是基于 iOS 3.2+ 和 OSX 10.5+ 的一种
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跳到设置页面以及App间跳转</title>
    <link href="http://yoursite.com/2017/08/04/%E8%B7%B3%E5%88%B0%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2%E4%BB%A5%E5%8F%8AApp%E9%97%B4%E8%B7%B3%E8%BD%AC/"/>
    <id>http://yoursite.com/2017/08/04/跳到设置页面以及App间跳转/</id>
    <published>2017-08-04T15:23:40.000Z</published>
    <updated>2017-08-04T15:24:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>###从APP跳转至设置页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">跳转的URL写法:    </div><div class="line">设置页面 App-Prefs:root(之前在那个设置页面，就跳转到相应的设置页面)      </div><div class="line">无线局域网 App-Prefs:root=WIFI</div><div class="line">蓝牙 App-Prefs:root=Bluetooth</div><div class="line">蜂窝移动网络 App-Prefs:root=MOBILE_DATA_SETTINGS_ID</div><div class="line">个人热点 App-Prefs:root=INTERNET_TETHERING</div><div class="line">运营商 App-Prefs:root=Carrier</div><div class="line">通知 App-Prefs:root=NOTIFICATIONS_ID</div><div class="line">通用 App-Prefs:root=General</div><div class="line">通用-关于本机 App-Prefs:root=General&amp;path=About</div><div class="line">通用-键盘 App-Prefs:root=General&amp;path=Keyboard</div><div class="line">通用-辅助功能 App-Prefs:root=General&amp;path=ACCESSIBILITY</div><div class="line">通用-语言与地区 App-Prefs:root=General&amp;path=INTERNATIONAL</div><div class="line">通用-还原 App-Prefs:root=Reset</div><div class="line">墙纸 App-Prefs:root=Wallpaper</div><div class="line">Siri App-Prefs:root=SIRI</div><div class="line">隐私 App-Prefs:root=Privacy</div><div class="line">Safari App-Prefs:root=SAFARI</div><div class="line">音乐 App-Prefs:root=MUSIC</div><div class="line">音乐-均衡器 App-Prefs:root=MUSIC&amp;path=com.apple.Music:EQ</div><div class="line">照片与相机 App-Prefs:root=Photos</div><div class="line">FaceTime App-Prefs:root=FACETIME</div></pre></td></tr></table></figure><p><strong>使用例子</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define iOS10 ([[UIDevice currentDevice].systemVersion doubleValue] &gt;= 10.0)</span></div><div class="line"> <span class="comment">//宏定义，判断是否是 iOS10.0以上</span></div><div class="line"></div><div class="line"><span class="built_in">NSString</span> * urlStr = <span class="string">@"App-Prefs:root=Bluetooth"</span>;</div><div class="line">    <span class="keyword">if</span> ([[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:[<span class="built_in">NSURL</span> URLWithString:urlStr]]) &#123;</div><div class="line">        <span class="keyword">if</span> (iOS10) &#123;</div><div class="line">            <span class="comment">//iOS10.0以上  使用的操作</span></div><div class="line">            [[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:urlStr] options:@&#123;&#125; completionHandler:<span class="literal">nil</span>];</div><div class="line">        &#125; <span class="keyword">else</span> </div><div class="line">        &#123;</div><div class="line">            <span class="comment">//iOS10.0以下  使用的操作</span></div><div class="line">            [[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:urlStr]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//iOS10.0以上 ，使用的操作方法</span></div><div class="line">- (<span class="keyword">void</span>)openURL:(<span class="built_in">NSURL</span>*)url options:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)options completionHandler:(<span class="keyword">void</span> (^ __<span class="keyword">nullable</span>)(<span class="built_in">BOOL</span> success))completion <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">10</span>_0) <span class="built_in">NS_EXTENSION_UNAVAILABLE_IOS</span>(<span class="string">""</span>);</div><div class="line">```  </div><div class="line"></div><div class="line">```objectivec</div><div class="line"><span class="comment">//iOS10.0以下，使用的操作方法</span></div><div class="line">- (<span class="built_in">BOOL</span>)openURL:(<span class="built_in">NSURL</span>*)url <span class="built_in">NS_DEPRECATED_IOS</span>(<span class="number">2</span>_0, <span class="number">10</span>_0, <span class="string">"Please use openURL:options:completionHandler: instead"</span>) <span class="built_in">NS_EXTENSION_UNAVAILABLE_IOS</span>(<span class="string">""</span>);</div></pre></td></tr></table></figure><p>注:<code>prefs:root=</code> 在iOS10以上的系统没作用了，而且可能会被app store 拒绝，应该这不是公开的URL Scheme了</p><h3 id="APP之间的跳转"><a href="#APP之间的跳转" class="headerlink" title="APP之间的跳转"></a>APP之间的跳转</h3><p>添加一个URL type  URL Schemes设置为APP的跳转标识(其道理同<strong>设置页面</strong>的跳转) 如何skipToFirst<br><img src="http://i1.bvimg.com/1949/7d52ebeab120f8b5.png" alt="URL type"><br>在第二个APP中，在需要跳转到第一个APP的地方，添加以下代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> * URLString = <span class="string">@"skipToFirst://"</span>;</div><div class="line"><span class="built_in">NSURL</span> * url = [<span class="built_in">NSURL</span> URLWithString:URLString];</div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:url];</div></pre></td></tr></table></figure><p>重新运行第二个APP，并且触发跳转到第一个APP的事件，就完成APP之间的跳转了。</p><h3 id="APP间的传值"><a href="#APP间的传值" class="headerlink" title="APP间的传值"></a>APP间的传值</h3><p>实现APP间跳转的功能。<br>跳转的代码修改为</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> * URLString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"skipToFirst://userName=%@&amp;password=%@"</span>,<span class="string">@"userName"</span>,<span class="string">@"123456"</span>];</div><div class="line"><span class="built_in">NSURL</span> * url = [<span class="built_in">NSURL</span> URLWithString:URLString];</div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:url];</div></pre></td></tr></table></figure><p>在第一个App的AppDelegate中</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application openURL:(<span class="built_in">NSURL</span> *)url sourceApplication:(<span class="built_in">NSString</span> *)sourceApplication annotation:(<span class="keyword">id</span>)annotation</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *urlStr = [url absoluteString];  <span class="comment">//转化为 完整的url字符串</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,urlStr);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//iOS9之后苹果建议用</span></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)app openURL:(<span class="built_in">NSURL</span> *)url options:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">UIApplicationOpenURLOptionsKey</span>,<span class="keyword">id</span>&gt; *)options</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *urlStr = [url absoluteString];  <span class="comment">//转化为 完整的url字符串</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,urlStr);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样就获取到了urlStr字符串，之后就是自己根据需要的数据对里面的字符串进行处理。</p><h3 id="UIApplication-sharedApplication-openURL-其他应用"><a href="#UIApplication-sharedApplication-openURL-其他应用" class="headerlink" title="[[UIApplication sharedApplication] openURL: ]其他应用"></a>[[UIApplication sharedApplication] openURL: ]其他应用</h3><p>调用电话拨号</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 拨打电话时，不出现确认框</span></div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"tel://13800138000"</span>]]; </div><div class="line"></div><div class="line"><span class="comment">// 拨打电话时，弹出确认框</span></div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"telprompt://800888"</span>]];</div></pre></td></tr></table></figure><p>调用自带Mail</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mailto后加自己账户</span></div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"mailto://admin@yourName.com"</span>]]; </div><div class="line">```  </div><div class="line">调用safari  </div><div class="line"></div><div class="line">```objectivec</div><div class="line"><span class="comment">// 调到百度主页</span></div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.baidu.com"</span>]];</div></pre></td></tr></table></figure><p>调用短信SMS</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"sms://10086"</span>]];</div></pre></td></tr></table></figure><p>调用app Store</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"itms-apps://"</span>]];</div></pre></td></tr></table></figure><p>调用iBook</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"itms-books://"</span>]];</div></pre></td></tr></table></figure><p>调用 Map</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"maps://"</span>]];</div></pre></td></tr></table></figure><p>调用 Facetime➕自己账户</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意后面加上faceTime的账号</span></div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"facetime://"</span>]];</div></pre></td></tr></table></figure><p>常用的App的URL Schemes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">“QQ”的url是 mqq:// </div><div class="line">  “微信”是 weixin:// </div><div class="line">  “淘宝”是 taobao:// </div><div class="line">  “点评”是 dianping://     dianping://search </div><div class="line">  “微博”是 sinaweibo:// </div><div class="line">  “名片全能王”是 camcard:// </div><div class="line">  “weico微博”是 weico:// </div><div class="line">  “支付宝”是 alipay:// </div><div class="line">  “豆瓣fm”是 doubanradio:// </div><div class="line">  “微盘”是 sinavdisk:// </div><div class="line">  “网易公开课”是 ntesopen://</div><div class="line">  “美团”是 i**:// </div><div class="line">  “京东”是 openapp.jdmoble:// </div><div class="line">  “人人”是 renren:// </div><div class="line">  “我查查”是 wcc:// </div><div class="line">  “1号店”是 wccbyihaodian:// </div><div class="line">  “有道词典”是 yddictproapp:// </div><div class="line">  “知乎”是 zhihu://</div><div class="line">  “优酷”是  youku://</div></pre></td></tr></table></figure><p>跳转到淘宝</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> * urlString = <span class="string">@"taobao://"</span>;</div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:urlString] ];</div></pre></td></tr></table></figure><p>ipad版URL Schemes：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">ZAKER ：【zakeripad://】</div><div class="line">  mdict：【mdict://】</div><div class="line">  京东hd：【openApp.jdiPad://】</div><div class="line">  易迅：【wx6964eb0b10aa369b://】；【icson://】；【wap2app://】；【com51buyiPad://】；【sinaweibosso.2217266362://】；【yixunipad://】；</div><div class="line">  wunderlist：【fb208559595824260://】；【wunderlist://】；</div><div class="line">  1password：【db-0bcm217bz8olcxj://】；</div><div class="line">  支付宝：【alipay://】；</div><div class="line">  亚马逊：【fb115829135094686://】；</div><div class="line">  查找朋友：【grenada://】；【findmyfriends://】；【fmf1://】；</div><div class="line">  查找iphone：【fmip1://】；</div><div class="line">  homestyler：【fb110202249127916://】；</div><div class="line">  百度旅游hd：【sinaweibosso.3772466956://】；</div><div class="line">  百度视频hd：【BaiduVideoiPad://】；【baiduvideoipadapp://】；</div><div class="line">  百度相册hd：【BaiDuCloudAlbumHD://】；</div><div class="line">  百度音乐hd：【tencent100518384://】；【QQ05FDC9F0://】；【wxdeda8b7428c87b0b://】；【sinaweibosso.4257500584://】；【BaiduMusicHD://】；</div><div class="line">  百度浏览器hd：【bdbrowser://】；</div><div class="line">  百度文库hd：【bdwenku://】；</div><div class="line">  百度地图hd：【sinaweibosso.675661989://】；</div><div class="line">  百度云：【tencent100312028://】；</div><div class="line">  一个one：【clover-one://】；</div><div class="line">  launchpro：【launch://】；【launchpro://】；【launchpro-light://】；【launchpro-dial://】；【launchpro-tweet://】；【launchpro-brightness://】；【launchpro-messaging://】；【launchpro-email://】；【launchpro-dropbox://】；【launchpro-clipboard://】；【launchpro-facebook://】；【launchpro-sinaweibo://】；【launch-textexpander://】；【db-23algz5zbfx3ocs://】；【launchipad://】；</div><div class="line">  当当hd：【dangdanghd://】；【ddhd://】；</div><div class="line">  大众点评hd：【dianpinghd://】；</div><div class="line">  多看阅读：【duokan-reader://】；</div><div class="line">  艺龙旅行hd：【elongiPad://】；</div><div class="line">  圈点hd：【skitch://】；</div><div class="line">  食记hd：【wxb9a9141190826bd8://】；</div><div class="line">  印象笔记hd：【enx://】；</div><div class="line">  popAgraph：【popagraphtumblr://】；</div><div class="line">  dropbox：【db-auth://】；【dbapi-1://】；【dbapi-2://】；【dbapi-3://】；【fb210019893730://】；</div><div class="line">  goodreader：【ghttp://】；【ghttps://】；【grhttp://】；【grhttps://】；【giwhttp://】；【giwhttps://】；【gropen://】；【com.goodreader.sendtogr://】；</div><div class="line">  houzz：【fb166981393359376://】；</div><div class="line">  ifttt：【ifttt://】；</div><div class="line">  名片全能王hd：【camcard://】；【fb444471182246461hdfull://】；【CamCardHDOpenAPI://】；</div><div class="line">  万年历：【wx5f3a0d4653cd3485://】；</div><div class="line">  拉手团购hd：【LaShouGroupHDPay://】；</div><div class="line">  美团hd：【i**://】；</div><div class="line">  evermemo：【evermemo://】；</div><div class="line">  网易云课堂：【wangyiyunketang://】；</div><div class="line">  网易公开课：【ntesopen://】；</div><div class="line">  订票助手2：【trainassistfree://】；</div><div class="line">  pcalc lite：【pcalc://】；</div><div class="line">  爱奇艺视频：【QIYIHD-iPad://】；</div><div class="line">  documents：【fb435446596521711://】；</div><div class="line">  三国kill：【sgk://】；</div><div class="line">  知乎日报hd：【wb2812384762://】；【wb801442902://】；【wx81bd672c6e11bad0://】；【QQ05FE6368://】；【tencent100557672://】；【pocketapp89757://】；</div><div class="line">  扇贝新闻：【shanbaynews://】；</div><div class="line">  扇贝单词：【shanbay://】；</div><div class="line">  扇贝单词hd：【shanbaywordshd://】；</div><div class="line">  扇贝炼句：【wx6cf98af31a47ba29://】；</div><div class="line">  百词斩：[wxce5d9e837051d623://】；</div><div class="line">  微盘：【sinaweibosso.2938478327://】；【sinavdisksso.2938478327://】；</div><div class="line">  新浪公开课：【wxa376b1970423b610://】；</div><div class="line">  skype：【skype://】；</div><div class="line">  什么值得买hd：【wxed08b6c4003b1fd5://】；</div><div class="line">  搜狐视频hd：【sohu-SViPad://】；【sohuvideohd://】；【wx91d741cfa16379bc://】；</div><div class="line">  teamviewer:【teamviewer8://】；</div><div class="line">  格志：【griddiary://】；【sumi-interactive://】；【db-d7wn1aiwz2ck3tj://】；</div><div class="line">  淘宝hd：【taobao://】；【itaobao://】；【taobaohd://】；【wx25e5e60c1e9fcd97://】；【sinaweibosso.346252009://】；【zhuzhancaipiao4ipad://】；【laiwangc6e34c6bf://】；</div><div class="line">  天猫：【tmall://】；</div><div class="line">  腾讯视频hd：【tenvideohd://】；【tenvideo2://】；</div><div class="line">  qq通讯录：【tencentappqqpim://】；</div><div class="line">  qq：【mqqflyticket://】；</div><div class="line">  微信：【weixin://】；【fb290293790992170://】；【wechat://】；</div><div class="line">  同步推正版HD：【tbtui://】；【tuihd://】；</div><div class="line">  航旅纵横pro：【sinaweibosso.umetrip://】；【umetrippro://】；</div><div class="line">  mathpad：【myscriptmathpad://】；</div><div class="line">  下厨房：【wxd80665a1fc1bf282://】；</div><div class="line">  无忌论坛：【wb801384327://】；【wxe932dc78276c3c24://】；【wb1315970163://】；</div><div class="line">  雅虎天气！：【yweather://】；</div><div class="line">  一号店：【ipadstore://】；</div><div class="line">  优酷hd：【youkuhd://】；</div><div class="line">  知乎日报：【wx841a6aace4a1dca4://】；</div><div class="line">  知乎：【zhihu://】；</div><div class="line">  diesel facts：【dk.publishonline.dieselfacts.china://】；【dps.9aebe5a79fb04d9abddf77d97c6794dc://】；</div><div class="line">  欧陆词典pro：【eudic://】；</div><div class="line">  拓词：【towordsp://】；</div><div class="line">  瘦身旅程：【sina.5253876156240b2daf015c9d://】；</div><div class="line">  词ci：【wx599b00cd734bd4a9://】；</div></pre></td></tr></table></figure><p>参考：<a href="http://www.jianshu.com/p/20ce7f846f75" target="_blank" rel="external">APP跳转 及iOS10跳转在设置页面</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###从APP跳转至设置页面&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>画虚线</title>
    <link href="http://yoursite.com/2017/07/20/%E7%94%BB%E8%99%9A%E7%BA%BF/"/>
    <id>http://yoursite.com/2017/07/20/画虚线/</id>
    <published>2017-07-20T15:41:42.000Z</published>
    <updated>2017-07-20T15:49:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="通过UIImage的绘图方法来绘制"><a href="#通过UIImage的绘图方法来绘制" class="headerlink" title="通过UIImage的绘图方法来绘制"></a>通过UIImage的绘图方法来绘制</h3><p>绘制一条水平的虚线</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIImage</span> *)drawDashLineWithSize:(<span class="built_in">CGSize</span>)size</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(size);</div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="comment">//设置线条终点形状</span></div><div class="line">    <span class="built_in">CGContextSetLineCap</span>(context, kCGLineCapRound);</div><div class="line">    <span class="comment">// 设置颜色</span></div><div class="line">    <span class="built_in">CGContextSetStrokeColorWithColor</span>(context, [<span class="built_in">UIColor</span> colorWithWhite:<span class="number">0.408</span> alpha:<span class="number">1.000</span>].CGColor);</div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> lengths[] = &#123;<span class="number">10</span>,<span class="number">2</span>&#125;;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     CGContextSetLineDash</div><div class="line">     此函数需要四个参数：</div><div class="line">     context – 这个不用多说</div><div class="line">     phase - 表示在第一个虚线绘制的时候跳过多少个点</div><div class="line">     lengths – lengths的值｛10,2｝表示先绘制10个点，再跳过2个点   如果把lengths值改为｛10, 20, 10｝，则表示先绘制10个点，跳过20个点，绘制10个点，跳过10个点，再绘制20个点，如此反复</div><div class="line">     count – lengths数组的长度</div><div class="line">     */</div><div class="line">    <span class="built_in">CGContextSetLineDash</span>(context, <span class="number">0</span>, lengths, <span class="number">2</span>); <span class="comment">//画虚线</span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(context, <span class="number">0.0</span>, <span class="number">2.0</span>); <span class="comment">//开始画线</span></div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(context, size.width, <span class="number">2.0</span>);</div><div class="line">    <span class="built_in">CGContextStrokePath</span>(context);</div><div class="line">    <span class="comment">// UIGraphicsGetImageFromCurrentImageContext()返回的就是image</span></div><div class="line">    <span class="built_in">UIImage</span> * image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">    </div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;通过UIImage的绘图方法来绘制&quot;&gt;&lt;a href=&quot;#通过UIImage的绘图方法来绘制&quot; class=&quot;headerlink&quot; title=&quot;通过UIImage的绘图方法来绘制&quot;&gt;&lt;/a&gt;通过UIImage的绘图方法来绘制&lt;/h3&gt;&lt;p&gt;绘制一条水平的虚线&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>距离传感器、加速计和蓝牙</title>
    <link href="http://yoursite.com/2017/07/12/%E8%B7%9D%E7%A6%BB%E4%BC%A0%E6%84%9F%E5%99%A8%E3%80%81%E5%8A%A0%E9%80%9F%E8%AE%A1%E5%92%8C%E8%93%9D%E7%89%99/"/>
    <id>http://yoursite.com/2017/07/12/距离传感器、加速计和蓝牙/</id>
    <published>2017-07-12T12:00:31.000Z</published>
    <updated>2017-08-12T10:23:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、距离传感器"><a href="#1、距离传感器" class="headerlink" title="1、距离传感器"></a>1、距离传感器</h4><p><img src="http://oui2ar2u7.bkt.clouddn.com/0cf2403fe38ed88b.png" alt="">  </p><pre><code class="objectivec"> <span class="comment">// 1.开启距离传感器(注意: 默认情况距离传感器是关闭的)</span><span class="comment">//    [UIApplication sharedApplication].proximitySensingEnabled = YES;</span>    <span class="comment">// 只要开启之后, 就开始实时监听</span>    [<span class="built_in">UIDevice</span> currentDevice].proximityMonitoringEnabled = <span class="literal">YES</span>;    <span class="comment">// 2.当监听到有物体靠近设备时系统会发出通知</span>    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(proximityStateDidChange:) name:<span class="built_in">UIDeviceProximityStateDidChangeNotification</span> object:<span class="literal">nil</span>];<span class="comment">// 当监听到有物体靠近设备时调用 </span>- (<span class="keyword">void</span>)proximityStateDidChange:(<span class="built_in">NSNotification</span> *)note{<span class="comment">//    NSLog(@"%@", note);</span>   <span class="keyword">if</span>( [<span class="built_in">UIDevice</span> currentDevice].proximityState)   {       <span class="built_in">NSLog</span>(<span class="string">@"有物体靠近"</span>);   }<span class="keyword">else</span>   {       <span class="built_in">NSLog</span>(<span class="string">@"物体离开"</span>);   }}</code></pre><h4 id="2、加速计-CoreMotion"><a href="#2、加速计-CoreMotion" class="headerlink" title="2、加速计 CoreMotion"></a>2、加速计 CoreMotion</h4><h5 id="加速计的经典应用场景"><a href="#加速计的经典应用场景" class="headerlink" title="加速计的经典应用场景"></a>加速计的经典应用场景</h5><ul><li>摇一摇  </li><li>计步器</li></ul><p><strong>方法1 push （一直在采集）</strong></p><pre><code class="objectivec">- (<span class="keyword">void</span>)push{    <span class="comment">// 1.创建coreMotion管理者</span>    <span class="comment">//    CMMotionManager *mgr = [[CMMotionManager alloc] init];</span>    <span class="keyword">self</span>.mgr = [[<span class="built_in">CMMotionManager</span> alloc] init];    <span class="comment">// 2.判断加速计是否可用</span>    <span class="keyword">if</span> (<span class="keyword">self</span>.mgr.isAccelerometerAvailable) {        <span class="comment">/*         isAccelerometerActive 是否正在采集         accelerometerData 采集到得数据         startAccelerometerUpdates  pull         startAccelerometerUpdatesToQueue  push         stopAccelerometerUpdates 停止采集         accelerometerUpdateInterval 采样时间         */</span>        <span class="comment">// 3.设置采样时间</span>        <span class="keyword">self</span>.mgr.accelerometerUpdateInterval = <span class="number">1</span> / <span class="number">30.0</span>;        <span class="comment">// 4.开始采样</span>        [<span class="keyword">self</span>.mgr startAccelerometerUpdatesToQueue:[<span class="built_in">NSOperationQueue</span> mainQueue] withHandler:^(<span class="built_in">CMAccelerometerData</span> *accelerometerData, <span class="built_in">NSError</span> *error) {            <span class="comment">// 这个block是采集到数据时就会调用</span>            <span class="keyword">if</span> (error) <span class="keyword">return</span> ;            <span class="built_in">CMAcceleration</span> acceleration = accelerometerData.acceleration;            <span class="built_in">NSLog</span>(<span class="string">@"x = %f y = %f z = %f"</span>, acceleration.x, acceleration.y , acceleration.z);        }];    }<span class="keyword">else</span>    {        <span class="built_in">NSLog</span>(<span class="string">@"加速计不可用"</span>);    }}</code></pre><p><strong>方法2 pull （需要时才采集）</strong></p><pre><code class="objectivec"><span class="comment">// 1.创建coreMotion管理者</span>    <span class="keyword">self</span>.mgr = [[<span class="built_in">CMMotionManager</span> alloc] init];     <span class="keyword">if</span> (<span class="keyword">self</span>.mgr.isAccelerometerAvailable) {          <span class="comment">// 3.开始采样</span>         [<span class="keyword">self</span>.mgr startAccelerometerUpdates]; <span class="comment">// pull</span>     }<span class="keyword">else</span>     {         <span class="built_in">NSLog</span>(<span class="string">@"加速计不可用"</span>);     }- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span> *)touches withEvent:(<span class="built_in">UIEvent</span> *)event{    <span class="built_in">CMAcceleration</span> acceleration = <span class="keyword">self</span>.mgr.accelerometerData.acceleration;     <span class="built_in">NSLog</span>(<span class="string">@"x = %f y = %f z = %f"</span>, acceleration.x, acceleration.y , acceleration.z);}</code></pre><h4 id="3、蓝牙"><a href="#3、蓝牙" class="headerlink" title="3、蓝牙"></a>3、蓝牙</h4><h5 id="iOS中提供了4个框架用于实现蓝牙连接"><a href="#iOS中提供了4个框架用于实现蓝牙连接" class="headerlink" title="iOS中提供了4个框架用于实现蓝牙连接"></a>iOS中提供了4个框架用于实现蓝牙连接</h5><p><strong>1、GameKit.framework（用法简单）</strong>  </p><ul><li>只能用于iOS设备之间的连接，多用于游戏（比如五子棋对战），从iOS7开始过期(仅限于沙盒)  </li><li>只能用于iOS设备之间的连接  </li><li>只能用于同一个应用程序之间的连接  </li><li>最好别利用蓝牙发送比较大的数据  </li></ul><pre><code class="objectivec">- (<span class="keyword">IBAction</span>)connect {    <span class="comment">// 1.创建选择其他蓝牙设备的控制器</span>    GKPeerPickerController *peerPk = [[GKPeerPickerController alloc] init];    <span class="comment">// 2.成为该控制器的代理</span>    peerPk.delegate = <span class="keyword">self</span>;    <span class="comment">// 3.显示蓝牙控制器</span>    [peerPk show];}<span class="meta">#pragma mark - GKPeerPickerControllerDelegate</span><span class="comment">// 4.实现dialing方法</span><span class="comment">/** *  当蓝牙设备连接成功就会调用 * *  @param picker  触发时间的控制器 *  @param peerID  连接蓝牙设备的ID *  @param session 连接蓝牙的会话(可用通讯), 以后只要拿到session就可以传输数据 */</span>- (<span class="keyword">void</span>)peerPickerController:(GKPeerPickerController *)picker didConnectPeer:(<span class="built_in">NSString</span> *)peerID toSession:(GKSession *)session{    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, peerID);    <span class="comment">// 1.保存会话</span>    <span class="keyword">self</span>.session = session;    <span class="comment">// 2.设置监听接收传递过来的数据</span>    <span class="comment">/*     Handler: 谁来处理接收到得数据     withContext: 传递数据     */</span>    [<span class="keyword">self</span>.session setDataReceiveHandler:<span class="keyword">self</span> withContext:<span class="literal">nil</span>];    <span class="comment">// 2.关闭显示蓝牙设备控制器</span>    [picker dismiss];}<span class="comment">/** *  接收到其它设备传递过来的数据就会调用 * *  @param data    传递过来的数据 *  @param peer    传递数据设备的ID *  @param session 会话 *  @param context 注册监听时传递的数据 */</span>- (<span class="keyword">void</span>) receiveData:(<span class="built_in">NSData</span> *)data fromPeer:(<span class="built_in">NSString</span> *)peer inSession: (GKSession *)session context:(<span class="keyword">void</span> *)context{<span class="comment">//    NSLog(@"%s", __func__);</span>    <span class="comment">// 1.将传递过来的数据转换为图片(注意: 因为发送的时图片, 所以才需要转换为图片)</span>    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:data];    <span class="keyword">self</span>.customIV.image = image;}- (<span class="keyword">void</span>)peerPickerControllerDidCancel:(GKPeerPickerController *)picker{} <span class="meta">#pragma mark —- 发送数据</span>- (<span class="keyword">IBAction</span>)send {    <span class="comment">// 利用session发送图片数据即可</span>    <span class="comment">// 1.取出customImageView上得图片, 转换为二进制</span>    <span class="built_in">UIImage</span> *image =  <span class="keyword">self</span>.customIV.image;    <span class="built_in">NSData</span> *data = <span class="built_in">UIImagePNGRepresentation</span>(image);    <span class="comment">/*     GKSendDataReliable, 数据安全的发送模式, 慢     GKSendDataUnreliable, 数据不安全的发送模式, 快     */</span>    <span class="comment">/*     data: 需要发送的数据     DataReliable: 是否安全的发送数据(发送数据的模式)     error: 是否监听发送错误     */</span>    [<span class="keyword">self</span>.session sendDataToAllPeers:data withDataMode:GKSendDataReliable error:<span class="literal">nil</span>];}</code></pre><p><strong>2、MultipeerConnectivity.framework</strong><br>只能用于iOS设备之间的连接，从iOS7开始引入，主要用于文件共享（仅限于沙盒的文件）用法跟GameKit类似  </p><p><strong>3、ExternalAccessory.framework</strong><br>可用于第三方蓝牙设备交互，但是蓝牙设备必须经过苹果MFi认证（国内较少）  </p><p><strong>4、CoreBluetooth.framework（时下热门）</strong>            </p><ul><li>可用于第三方蓝牙设备交互，必须要支持蓝牙4.0  </li><li>硬件至少是4s，系统至少是iOS6  </li><li>蓝牙4.0以低功耗著称，一般也叫BLE（Bluetooth Low Energy）  </li><li>目前应用比较多的案例：运动手坏、嵌入式设备、智能家居  </li></ul><p>每个蓝牙4.0设备都是通过服务（Service）和特征（Characteristic）来展示自己的<br>一个设备必然包含一个或多个服务，每个服务下面又包含若干个特征<br>特征是与外界交互的最小单位<br>比如说，一台蓝牙4.0设备，用特征A来描述自己的出厂信息，用特征B来收发数据<br>服务和特征都是用UUID来唯一标识的，通过UUID就能区别不同的服务和特征<br>设备里面各个服务(service)和特征(characteristic)的功能，均由蓝牙设备硬件厂商提供，比如哪些是用来交互(读写)，哪些可获取模块信息(只读)等 </p><p><strong>Core Bluetooth的开发步骤：</strong>  </p><ol><li>建立中心设备  </li><li>扫描外设（Discover Peripheral）  </li><li>连接外设(Connect Peripheral)  </li><li>扫描外设中的服务和特征(Discover Services And Characteristics)  </li><li>利用特征与外设做数据交互(Explore And Interact)<br>断开连接(Disconnect)</li></ol><pre><code class="objectivec"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span><span class="meta">#import <span class="meta-string">&lt;CoreBluetooth/CoreBluetooth.h&gt;</span></span><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">CBCentralManagerDelegate</span>, <span class="title">CBPeripheralDelegate</span>&gt;</span><span class="comment">/** *  外设 */</span><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *peripherals;<span class="comment">/** *  中心管理者 */</span><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) CBCentralManager *mgr;<span class="keyword">@end</span><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span>- (<span class="built_in">NSMutableArray</span> *)peripherals{    <span class="keyword">if</span> (!_peripherals) {        _peripherals = [<span class="built_in">NSMutableArray</span> array];    }    <span class="keyword">return</span> _peripherals;}- (<span class="keyword">void</span>)viewDidLoad {    [<span class="keyword">super</span> viewDidLoad];    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span>    <span class="comment">// 1.创建中心设备</span>    CBCentralManager *mgr = [[CBCentralManager alloc] init];    <span class="keyword">self</span>.mgr = mgr;    <span class="comment">// 设置代理</span>    mgr.delegate = <span class="keyword">self</span>;    <span class="comment">// 2.利用中心设备扫描外部设备</span>    <span class="comment">/*     如果指定数组代表只扫描指定的设备     */</span>    [mgr scanForPeripheralsWithServices:<span class="literal">nil</span> options:<span class="literal">nil</span>];}<span class="meta">#pragma mark - CBCentralManagerDelegate</span>- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeripheral *)peripheral advertisementData:(<span class="built_in">NSDictionary</span> *)advertisementData RSSI:(<span class="built_in">NSNumber</span> *)RSSI{    <span class="comment">// 保存扫描到得外部设备</span>    <span class="comment">// 判断如果数组中不包含当前扫描到得外部设置才保存</span>    <span class="keyword">if</span> (![<span class="keyword">self</span>.peripherals containsObject:peripheral]) {        peripheral.delegate = <span class="keyword">self</span>;        [<span class="keyword">self</span>.peripherals addObject:peripheral];    }}<span class="comment">/** *  模拟点击, 然后连接所有的外设 */</span>- (<span class="keyword">void</span>)start{    <span class="keyword">for</span> (CBPeripheral *peripheral <span class="keyword">in</span> <span class="keyword">self</span>.peripherals) {        <span class="comment">/**         *  连接外设         */</span>        [<span class="keyword">self</span>.mgr connectPeripheral:peripheral options:<span class="literal">nil</span>];    }}<span class="comment">/** *  连接外设成功调用 */</span>- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral{    <span class="comment">// 扫描外设中得服务</span>    [peripheral discoverServices:<span class="literal">nil</span>];}<span class="comment">/** *  连接外设失败调用 */</span>- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didDisconnectPeripheral:(CBPeripheral *)peripheral error:(<span class="built_in">NSError</span> *)error{}<span class="meta">#pragma makr - CBPeripheralDelegate</span><span class="comment">/** *  只要扫描到服务就会调用 * *  @param peripheral 服务所在的外设 */</span>- (<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didDiscoverServices:(<span class="built_in">NSError</span> *)error{    <span class="comment">// 获取外设中所有扫描到得服务</span>    <span class="built_in">NSArray</span> *services = peripheral.services;    <span class="keyword">for</span> (CBService *service <span class="keyword">in</span> services) {        <span class="comment">// 拿到需要的服务</span>        <span class="keyword">if</span> ([service.UUID.UUIDString isEqualToString:<span class="string">@"123"</span>])        {            <span class="comment">// 从需要的服务中查找需要的特征</span>            <span class="comment">// 从peripheral中得service中扫描特征</span>            [peripheral discoverCharacteristics:<span class="literal">nil</span> forService:service];        }    }}<span class="comment">/** *  只要扫描到特征就会调用 * *  @param peripheral 特征所属的外设 *  @param service    特征所属的服务 */</span>- (<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didDiscoverCharacteristicsForService:(CBService *)service error:(<span class="built_in">NSError</span> *)error{    <span class="comment">// 拿到服务中所有的特征</span>    <span class="built_in">NSArray</span> *characteristics =  service.characteristics;    <span class="comment">// 遍历特征, 拿到需要的特征处理</span>    <span class="keyword">for</span> (CBCharacteristic * characteristic <span class="keyword">in</span> characteristics) {        <span class="keyword">if</span> ([characteristic.UUID.UUIDString isEqualToString:<span class="string">@"8888"</span>]) {            <span class="built_in">NSLog</span>(<span class="string">@"设置闹钟"</span>);        }    }}</code></pre><h4 id="4、陀螺仪与方向感应器"><a href="#4、陀螺仪与方向感应器" class="headerlink" title="4、陀螺仪与方向感应器"></a>4、陀螺仪与方向感应器</h4><p><img src="http://oui2ar2u7.bkt.clouddn.com/6835496cd35f29c6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、距离传感器&quot;&gt;&lt;a href=&quot;#1、距离传感器&quot; class=&quot;headerlink&quot; title=&quot;1、距离传感器&quot;&gt;&lt;/a&gt;1、距离传感器&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oui2ar2u7.bkt.clouddn.com/0cf2403
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2017/07/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/12/正则表达式/</id>
    <published>2017-07-12T11:52:19.000Z</published>
    <updated>2017-07-12T11:54:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、匹配数字"><a href="#1、匹配数字" class="headerlink" title="1、匹配数字"></a>1、匹配数字</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 1.不能以0开头</div><div class="line">    // 2.全部是数字</div><div class="line">    // 3.5-11位</div><div class="line">    return [self match:@"^[1-9]\\d&#123;4,10&#125;$”];</div><div class="line">   // 1.创建正则表达式</div><div class="line">    NSRegularExpression *regex = [[NSRegularExpression alloc] initWithPattern:pattern options:0 error:nil];</div><div class="line">    // 2.测试字符串</div><div class="line">    NSArray *results = [regex matchesInString:self options:0 range:NSMakeRange(0, self.length)];</div></pre></td></tr></table></figure><h4 id="2、-匹配多个条件，相当于or-或"><a href="#2、-匹配多个条件，相当于or-或" class="headerlink" title="2、| 匹配多个条件，相当于or\或"></a>2、| 匹配多个条件，相当于or\或</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 表情的规则</span></div><div class="line">    <span class="built_in">NSString</span> *emotionPattern = <span class="string">@"\\[[0-9a-zA-Z\\u4e00-\\u9fa5]+\\]"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// @的规则</span></div><div class="line">    <span class="built_in">NSString</span> *atPattern = <span class="string">@"@[0-9a-zA-Z\\u4e00-\\u9fa5]+"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// #话题#的规则</span></div><div class="line">    <span class="built_in">NSString</span> *topicPattern = <span class="string">@"#[0-9a-zA-Z\\u4e00-\\u9fa5]+#"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// url链接的规则</span></div><div class="line">    <span class="built_in">NSString</span> *urlPattern = <span class="string">@"\\b(([\\w-]+://?|www[.])[^\\s()&lt;&gt;]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|/)))"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// | 匹配多个条件,相当于or\或</span></div><div class="line">    <span class="built_in">NSString</span> *pattern = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@|%@|%@|%@"</span>, emotionPattern, atPattern, topicPattern, urlPattern];</div><div class="line">    </div><div class="line">    <span class="built_in">NSRegularExpression</span> *regex = [[<span class="built_in">NSRegularExpression</span> alloc] initWithPattern:pattern options:<span class="number">0</span> error:<span class="literal">nil</span>];</div><div class="line">    <span class="comment">// 2.测试字符串</span></div><div class="line">    <span class="built_in">NSArray</span> *results = [regex matchesInString:str options:<span class="number">0</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, str.length)];</div><div class="line">    </div><div class="line">    <span class="comment">// 3.遍历结果</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSTextCheckingResult</span> *result <span class="keyword">in</span> results) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ %@"</span>, <span class="built_in">NSStringFromRange</span>(result.range), [str substringWithRange:result.range]);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、匹配数字&quot;&gt;&lt;a href=&quot;#1、匹配数字&quot; class=&quot;headerlink&quot; title=&quot;1、匹配数字&quot;&gt;&lt;/a&gt;1、匹配数字&lt;/h4&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>添加3DTouch</title>
    <link href="http://yoursite.com/2017/07/12/%E6%B7%BB%E5%8A%A03DTouch/"/>
    <id>http://yoursite.com/2017/07/12/添加3DTouch/</id>
    <published>2017-07-12T11:34:44.000Z</published>
    <updated>2017-08-12T10:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h3><h4 id="1、纯代码添加"><a href="#1、纯代码添加" class="headerlink" title="1、纯代码添加"></a>1、纯代码添加</h4><pre><code class="objectivec">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions {    <span class="comment">// Override point for customization after application launch.</span>    <span class="keyword">self</span>.window.rootViewController = [[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:[ViewController new]];    <span class="built_in">UIApplicationShortcutIcon</span> * icon1 = [<span class="built_in">UIApplicationShortcutIcon</span> iconWithTemplateImageName:<span class="string">@"photo_rocket"</span>];    <span class="comment">/**     type 该item唯一表示符     localizedTitle 标题     localizedSubTitle 副标题     icon 图标，可以用系统类型，也可以自定义使用图片     userInfo:用户信息字典，自定义参数，完成具体功能需求     */</span>    <span class="built_in">UIApplicationShortcutItem</span> * item1 = [[<span class="built_in">UIApplicationShortcutItem</span> alloc] initWithType:<span class="string">@"com.3DTouchDemo.item1"</span> localizedTitle:<span class="string">@"windowPhone"</span> localizedSubtitle:<span class="string">@"weiruan"</span> icon:icon1 userInfo:<span class="literal">nil</span>];    <span class="built_in">UIApplicationShortcutIcon</span> * icon2 = [<span class="built_in">UIApplicationShortcutIcon</span> iconWithType:<span class="built_in">UIApplicationShortcutIconTypeBookmark</span>];    <span class="built_in">UIApplicationShortcutItem</span> * item2 = [[<span class="built_in">UIApplicationShortcutItem</span> alloc] initWithType:<span class="string">@"com.3DTouchDemo.Item2"</span> localizedTitle:<span class="string">@"iOS"</span> localizedSubtitle:<span class="string">@"Apple"</span> icon:icon2 userInfo:<span class="literal">nil</span>];    <span class="built_in">UIApplicationShortcutIcon</span> * icon3 = [<span class="built_in">UIApplicationShortcutIcon</span> iconWithType:<span class="built_in">UIApplicationShortcutIconTypeMessage</span>];    <span class="built_in">UIApplicationShortcutItem</span> * item3 = [[<span class="built_in">UIApplicationShortcutItem</span> alloc] initWithType:<span class="string">@"com.3DTouchDemo.Item3"</span> localizedTitle:<span class="string">@"android"</span> localizedSubtitle:<span class="string">@"google"</span> icon:icon3 userInfo:<span class="literal">nil</span>];    <span class="comment">//将Items添加到app图标</span>    application.shortcutItems = @[item2,item3,item1];    <span class="keyword">return</span> <span class="literal">YES</span>;}<span class="meta">#pragma mark - 3D touch 代理方法</span>-(<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application performActionForShortcutItem:(<span class="built_in">UIApplicationShortcutItem</span> *)shortcutItem completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span>))completionHandler{    <span class="keyword">if</span> ([shortcutItem.type isEqualToString:<span class="string">@"com.3DTouchDemo.Item2"</span>])    {    }}</code></pre><h4 id="2、在info-plist上面添加"><a href="#2、在info-plist上面添加" class="headerlink" title="2、在info.plist上面添加"></a>2、在info.plist上面添加</h4><p><img src="http://oui2ar2u7.bkt.clouddn.com/4859e5c9fefd7dfa.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;两种方式&quot;&gt;&lt;a href=&quot;#两种方式&quot; class=&quot;headerlink&quot; title=&quot;两种方式&quot;&gt;&lt;/a&gt;两种方式&lt;/h3&gt;&lt;h4 id=&quot;1、纯代码添加&quot;&gt;&lt;a href=&quot;#1、纯代码添加&quot; class=&quot;headerlink&quot; title=&quot;1、纯
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS runtime详解</title>
    <link href="http://yoursite.com/2017/07/03/iOS-runtime%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/07/03/iOS-runtime详解/</id>
    <published>2017-07-03T14:58:22.000Z</published>
    <updated>2017-08-12T10:13:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引导"><a href="#引导" class="headerlink" title="引导"></a>引导</h3><p>runtime是运行时，对于从事iOS开发，想要深入学习OC的人，runtime是必须熟悉掌握的东西。</p><h3 id="runtime的概念"><a href="#runtime的概念" class="headerlink" title="runtime的概念"></a>runtime的概念</h3><p><strong>Objective-C</strong> 是基于 <strong>C</strong> 的，它为 C 添加了<em>面向对象</em>的特性。它将很多静态语言在编译和链接时期做的事放到了<strong>runtime</strong> 运行时来处理，可以说<em>runtime</em>是我们<em>Objective-C</em>幕后工作者。</p><ul><li><strong>runtime</strong>（简称<em>运行时</em>），是一套 <strong>纯C(C和汇编写的)</strong> 的API。而<strong>OC就是运行时机制</strong>，也就是在运行时候的一些机制，其中最主要的是<strong>消息机制</strong>。</li><li>对于 C 语言，<strong>函数的调用在编译的时候会决定调用哪个函数。</strong>  </li><li>OC的函数调用成为消息发送，属于<strong>动态调用过程</strong>。在编译的时候并不能决定真正调用哪个函数，只有在真正运行的时候才会根据函数的名称找到对应的函数来调用。  </li><li>在编译阶段，OC可以<strong>调用任何函数</strong>，即使这个函数并未实现，只要声明过就不会报错，只有当运行的时候才会报错，这是因为OC是运行时动态调用的。而C语言<strong>调用未实现的函数</strong>就会报错。  </li></ul><h3 id="runtime的消息机制"><a href="#runtime的消息机制" class="headerlink" title="runtime的消息机制"></a>runtime的消息机制</h3><ul><li>我们写的<strong>OC代码</strong>在<em>运行</em>的时候也是转换成了<strong>runtime</strong>方式运行的。<strong>任何方法调用本质：就是发送一个消息</strong>（用runtime发送消息，OC底层实现通过<strong>runtime</strong>实现）。</li><li><strong>消息机制原理</strong>：对象根据方法编号SEL去映射表查找对应的方法实现。</li><li>每一个OC的方法，底层必然有一个与之对应的runtime方法。</li></ul><p><strong>简单示例：</strong><br>验证：方法调用，是否真的是转换为消息机制？<br>必须要导入头文件 <code>#import&lt;objc/message.h&gt;</code><br>注解1：我们导入系统的头文件，一般用尖括号。<br>注解2：OC 解决消息机制方法提示步骤【查找build setting -&gt; 搜索msg -&gt; objc_msgSend（YES –&gt; NO）】<br>注解3：最终生成消息机制,编译器做的事情，最终代码，需要把当前代码重新编译，用xcode编译器，【clang -rewrite-objc main.m 查看最终生成代码】，示例：cd main.m –&gt; 输入前面指令，就会生成 .opp文件(C++代码)<br>注解4：这里一般不会直接导入<objc runtime.h=""><br><strong><em>示例代码：OC 方法–&gt;runtime 方法</em></strong></objc></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">说明: eat(无参) 和 run(有参) 是 Person模型类中的私有方法「可以帮我调用私有方法」；</div><div class="line"></div><div class="line"><span class="comment">// Person *p = [Person alloc];</span></div><div class="line"><span class="comment">// 底层的实际写法</span></div><div class="line">Person *p = objc_msgSend(objc_getClass(<span class="string">"Person"</span>), sel_registerName(<span class="string">"alloc"</span>));</div><div class="line"></div><div class="line"><span class="comment">// p = [p init];</span></div><div class="line">p = objc_msgSend(p, sel_registerName(<span class="string">"init"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 调用对象方法（本质：让对象发送消息）</span></div><div class="line"><span class="comment">//[p eat];</span></div><div class="line"></div><div class="line"><span class="comment">// 本质：让类对象发送消息</span></div><div class="line">objc_msgSend(p, <span class="keyword">@selector</span>(eat));</div><div class="line">objc_msgSend([Person <span class="keyword">class</span>], <span class="keyword">@selector</span>(run:),<span class="number">20</span>);</div><div class="line"></div><div class="line"><span class="comment">//--------------------------- &lt;#我是分割线#&gt; ------------------------------//</span></div><div class="line"><span class="comment">// 也许下面这种好理解一点</span></div><div class="line"></div><div class="line"><span class="comment">// id objc = [NSObject alloc];</span></div><div class="line"><span class="keyword">id</span> objc = objc_msgSend([<span class="built_in">NSObject</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(alloc));</div><div class="line"></div><div class="line"><span class="comment">// objc = [objc init];</span></div><div class="line">objc = objc_msgSend(objc, <span class="keyword">@selector</span>(init));</div></pre></td></tr></table></figure><h3 id="runtime-方法调用流程「消息机制」"><a href="#runtime-方法调用流程「消息机制」" class="headerlink" title="runtime 方法调用流程「消息机制」"></a>runtime 方法调用流程「消息机制」</h3><h4 id="消息机制方法调用流程"><a href="#消息机制方法调用流程" class="headerlink" title="消息机制方法调用流程"></a>消息机制方法调用流程</h4><p>怎么去调用类方法和实例方法，<strong>实例方法</strong>：(<em>保存到类对象的方法列表</em>) ，<strong>类方法</strong>：(<em>保存到元类(Meta Class)中方法列表</em>)。<br>1.<strong>OC</strong>在向一个对象发送消息时，runtime库会根据对象的<strong>isa指针</strong>找到该对象对应的<strong>类</strong>或其<strong>父类</strong>中查找方法。<br>2.注册方法编号（这里用方法编号的好处，可以快速查找）。<br>3.根据方法编号去查找对应方法。<br>4.找到只是最终函数实现地址，根据地址去方法区调用对应函数。  </p><h4 id="一个objc-对象的-isa-的指针指向什么？有什么作用？"><a href="#一个objc-对象的-isa-的指针指向什么？有什么作用？" class="headerlink" title="一个objc 对象的 isa 的指针指向什么？有什么作用？"></a>一个objc 对象的 isa 的指针指向什么？有什么作用？</h4><p>每一个对象内部都有<strong>一个isa指针</strong>，这个指针是指向它的真实类型，根据这个指针就能知道将来调用哪个类的方法。</p><h3 id="runtime-常见作用"><a href="#runtime-常见作用" class="headerlink" title="runtime 常见作用"></a>runtime 常见作用</h3><ul><li>动态交换两个方法的实现  </li><li>动态添加属性  </li><li>实现字典转模型的自动转换  </li><li>发送消息  </li><li>动态添加方法  </li><li>拦截并替换方法  </li><li>实现 NSCoding 的自动归档和解档</li></ul><h3 id="runtime-常用开发应用场景「工作掌握」"><a href="#runtime-常用开发应用场景「工作掌握」" class="headerlink" title="runtime 常用开发应用场景「工作掌握」"></a>runtime 常用开发应用场景「工作掌握」</h3><h4 id="runtime-交换方法"><a href="#runtime-交换方法" class="headerlink" title="runtime 交换方法"></a>runtime 交换方法</h4><p>应用场景：当第三方框架 或者 系统原生方法功能不能满足我们的时候，我们可以在保持系统原有方法功能的基础上，添加额外的功能。<br>需求：加载一张图片直接用[UIImage imageNamed:@”image”];是无法知道到底有没有加载成功。给系统的imageNamed添加额外功能（是否加载图片成功）。<br>方案一：继承系统的类，重写方法.（弊端：每次使用都需要导入）<br>方案二：使用 runtime，交换方法.<br>实现步骤：<br>1.给系统的方法添加分类<br>2.自己实现一个带有扩展功能的方法<br>3.交换方法,只需要交换一次  </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// 方案一：先搞个分类，定义一个能加载图片并且能打印的方法+ (instancetype)imageWithName:(NSString *)name;</span></div><div class="line">    <span class="comment">// 方案二：交换 imageNamed 和 ln_imageNamed 的实现，就能调用 imageNamed，间接调用 ln_imageNamed 的实现。</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"123"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/message.h&gt;</span> </span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">Image</span>)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> load方法: 把类加载进内存的时候调用,只会调用一次</div><div class="line"> 方法应先交换，再去调用</div><div class="line"> */</div><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 1.获取 imageNamed方法地址</span></div><div class="line">    <span class="comment">// class_getClassMethod（获取某个类的方法）</span></div><div class="line">    Method imageNamedMethod = class_getClassMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(imageNamed:));</div><div class="line">    <span class="comment">// 2.获取 ln_imageNamed方法地址</span></div><div class="line">    Method ln_imageNamedMethod = class_getClassMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(ln_imageNamed:));</div><div class="line"></div><div class="line">    <span class="comment">// 3.交换方法地址，相当于交换实现方式;「method_exchangeImplementations 交换两个方法的实现」</span></div><div class="line">    method_exchangeImplementations(imageNamedMethod, ln_imageNamedMethod);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 看清楚下面是不会有死循环的</div><div class="line"> 调用 imageNamed =&gt; ln_imageNamed</div><div class="line"> 调用 ln_imageNamed =&gt; imageNamed</div><div class="line"> */</div><div class="line"><span class="comment">// 加载图片 且 带判断是否加载成功</span></div><div class="line">+ (<span class="built_in">UIImage</span> *)ln_imageNamed:(<span class="built_in">NSString</span> *)name &#123;</div><div class="line"></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> ln_imageNamed:name];</div><div class="line">    <span class="keyword">if</span> (image) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"runtime添加额外功能--加载成功"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"runtime添加额外功能--加载失败"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 不能在分类中重写系统方法imageNamed，因为会把系统的功能给覆盖掉，而且分类中不能调用super</div><div class="line"> 所以第二步，我们要 自己实现一个带有扩展功能的方法.</div><div class="line"> + (UIImage *)imageNamed:(NSString *)name &#123;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// 打印输出</span></div><div class="line"><span class="number">2017</span><span class="number">-02</span><span class="number">-17</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">14.693</span> runtime[<span class="number">12761</span>:<span class="number">543574</span>] runtime添加额外功能--加载成功</div></pre></td></tr></table></figure><p><strong>总结：</strong>我们交换两个方法地址指向，必须在系统的imageNamed:方法调用前，所以讲代码卸载分类的load方法中，最后当运行的时候系统的方法就会去找我们的方法的实现。</p><h4 id="runtime给分类动态添加属性"><a href="#runtime给分类动态添加属性" class="headerlink" title="runtime给分类动态添加属性"></a>runtime给分类动态添加属性</h4><p><strong>原理：</strong>给一个类声明属性，其实本质就是给这个类添加关联，并不是直接把这个值的内存空间添加到类存空间。  </p><p><strong>应用场景：</strong>给系统的类添加属性的时候，可以使用runtime动态添加属性方法。<br>注解：系统 NSObject 添加一个分类，我们知道在分类中是不能够添加成员属性的，虽然我们用了@property，但是仅仅会自动生成get和set方法的声明，并没有带下划线的属性和方法实现生成。但是我们可以通过runtime就可以做到给它方法的实现。  </p><p><strong>需求：</strong>给系统 NSObject 类动态添加属性 name 字符串。  </p><p><strong>案例代码：</strong>方法+调用+打印</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">Property</span>)</span></div><div class="line"></div><div class="line"><span class="comment">// @property分类:只会生成get,set方法声明,不会生成实现,也不会生成下划线成员属性</span></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *height;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">Property</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name &#123;</div><div class="line"></div><div class="line">    <span class="comment">// objc_setAssociatedObject（将某个值跟某个对象关联起来，将某个值存储到某个对象中）</span></div><div class="line">    <span class="comment">// object:给哪个对象添加属性</span></div><div class="line">    <span class="comment">// key:属性名称</span></div><div class="line">    <span class="comment">// value:属性值</span></div><div class="line">    <span class="comment">// policy:保存策略</span></div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="string">@"name"</span>, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)name &#123;</div><div class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="string">@"name"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用</span></div><div class="line"><span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">objc.name = <span class="string">@"123"</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"runtime动态添加属性name==%@"</span>,objc.name);</div><div class="line"></div><div class="line"><span class="comment">// 打印输出</span></div><div class="line"><span class="number">2017</span><span class="number">-02</span><span class="number">-17</span> <span class="number">19</span>:<span class="number">37</span>:<span class="number">10.530</span> runtime[<span class="number">12761</span>:<span class="number">543574</span>] runtime动态添加属性--name == <span class="number">123</span></div></pre></td></tr></table></figure><p><strong>总结：</strong>给属性赋值的本质其实就是让属性与一个对象产生关联，所以要个NSObject的分类的name属性赋值就是让name和NSObject产生关联，runtime可以做到这一点。  </p><h4 id="runtime字典转模型"><a href="#runtime字典转模型" class="headerlink" title="runtime字典转模型"></a>runtime字典转模型</h4><p>字典转模型的方式:</p><ul><li><p>一个一个给模型属性赋值  </p></li><li><p>字典转模型KVC实现<br>1、KVC字典转模型弊端：必须保证，模型中的属性和字典中的key一一对应<br>2、如果不一致，就会调用<code>[&lt;Status 0x7fa74b545d60&gt; setValue:forUndefinedKey:]</code> 报<code>key</code>找不到的错。<br>3、分析：模型中的属性和字典中的<code>key</code>不一一对应，系统就会调用<code>setValue:forUndefinedKey:</code>报错。<br>4、解决：重写对象的<code>setValue:forUndefinedKey:</code>，把系统的方法覆盖，就能继续使用KVC字典转模型。</p></li><li><p>字典转模型Runtime实现<br>思路：利用运行时，遍历模型中的所有属性，根据模型中的属性名，去字典中查找<code>key</code>，取出对应的值，给模型的属性赋值（注：字典中的取值，不一定会全部取出来）。   </p><p>考虑情况：<br>1、当字典中的<code>key</code> 和模型的属性匹配不上。<br>2、模型中嵌套模型（模型属性是另一个模型对象)。<br>3、模型的属性是一个数组，数组中是一个个模型对象。  </p><p>注解：字典中的<code>key</code>和模型的属性不对应的情况有两种，一种是字典的键值对大于模型的属性数量，这时候我们不需要任何处理，因为<code>runtime</code>是先遍历模型所有属性，再去字典中根据属性名找对应的值进行赋值，多余的键值对不需要去看；另外一种情况是模型属性数量大于字典中的键值对，这时候由于属性没有对应值会被赋值为<code>nil</code>，就会导致<code>crash</code>,只需加一个判断即可。  </p><p>实现步骤：提供一个NSObject分类，专门字典转模型，以后所有模型都可以通过这个分类实现字典转模型。  </p><p><strong>MJExtension</strong>字典转模型实现也是通过底层对runtime进行封装，才可以把模型中所有属性遍历出来。  </p></li></ul><h5 id="字典转模型Runtime方式实现"><a href="#字典转模型Runtime方式实现" class="headerlink" title="字典转模型Runtime方式实现"></a>字典转模型Runtime方式实现</h5><p>1、runtime字典转为模型 – 字典中的key和模型的属性不匹配(模型属性数量大于字典键值对)，代码如下:  </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Runtime:根据模型中属性,去字典中取出对应的value给模型属性赋值</span></div><div class="line"><span class="comment">// 思路：遍历模型中所有属性-&gt;使用运行时</span></div><div class="line">+ (<span class="keyword">instancetype</span>)modelWithDict:(<span class="built_in">NSDictionary</span> *)dict</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 1.创建对应的对象</span></div><div class="line">    <span class="keyword">id</span> objc = [[<span class="keyword">self</span> alloc] init];</div><div class="line"></div><div class="line">    <span class="comment">// 2.利用runtime给对象中的属性赋值</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     class_copyIvarList: 获取类中的所有成员变量</div><div class="line">     Ivar：成员变量</div><div class="line">     第一个参数：表示获取哪个类中的成员变量</div><div class="line">     第二个参数：表示这个类有多少成员变量，传入一个Int变量地址，会自动给这个变量赋值</div><div class="line">     返回值Ivar *：指的是一个ivar数组，会把所有成员属性放在一个数组中，通过返回的数组就能全部获取到。</div><div class="line">     count: 成员变量个数</div><div class="line">     */</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 获取类中的所有成员变量</span></div><div class="line">    Ivar *ivarList = class_copyIvarList(<span class="keyword">self</span>, &amp;count);</div><div class="line"></div><div class="line">    <span class="comment">// 遍历所有成员变量</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="comment">// 根据角标，从数组取出对应的成员变量</span></div><div class="line">        Ivar ivar = ivarList[i];</div><div class="line"></div><div class="line">        <span class="comment">// 获取成员变量名字</span></div><div class="line">        <span class="built_in">NSString</span> *ivarName = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</div><div class="line"></div><div class="line">        <span class="comment">// 处理成员变量名-&gt;字典中的key(去掉 _ ,从第一个角标开始截取)</span></div><div class="line">        <span class="built_in">NSString</span> *key = [ivarName substringFromIndex:<span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="comment">// 根据成员属性名去字典中查找对应的value</span></div><div class="line">        <span class="keyword">id</span> value = dict[key];</div><div class="line"></div><div class="line">        <span class="comment">// 【如果模型属性数量大于字典键值对数理，模型属性会被赋值为nil】</span></div><div class="line">        <span class="comment">// 而报错 (could not set nil as the value for the key age.)</span></div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">            <span class="comment">// 给模型中属性赋值</span></div><div class="line">            [objc setValue:value forKey:key];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> objc;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line">**注**这里在获取模型类中的所有属性名，是采取 `class_copyIvarList` 先获取成员变量（以下划线开头） ，然后再处理成员变量名-&gt;字典中的key(`去掉 _ ,从第一个角标开始截取`) 得到属性名。  </div><div class="line">原因：  </div><div class="line">`Ivar：成员变量,以下划线开头`，`Property 属性 `   </div><div class="line">获取类里面属性 `class_copyPropertyList`  </div><div class="line">获取类中的所有成员变量 `class_copyIvarList`</div><div class="line"></div><div class="line">```objectivec</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> _a; <span class="comment">// 成员变量</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> attitudes_count; <span class="comment">// 属性</span></div><div class="line"></div><div class="line">这里有成员变量，就不会漏掉属性；如果有属性，可能会漏掉成员变量；</div></pre></td></tr></table></figure><p>使用<code>runtime</code>字典转模型获取模型属性名的时候，最好获取成员属性名<code>Ivar</code>因为可能会有个属性是没有<code>setter</code>和<code>getter</code>方法的。  </p><p>2、runtime字典转模型–模型中嵌套模型(模型属性是另外一个模型对象)，代码如下：  </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)modelWithDict2:(<span class="built_in">NSDictionary</span> *)dict</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 1.创建对应的对象</span></div><div class="line">    <span class="keyword">id</span> objc = [[<span class="keyword">self</span> alloc] init];</div><div class="line"></div><div class="line">    <span class="comment">// 2.利用runtime给对象中的属性赋值</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 获取类中的所有成员变量</span></div><div class="line">    Ivar *ivarList = class_copyIvarList(<span class="keyword">self</span>, &amp;count);</div><div class="line"></div><div class="line">    <span class="comment">// 遍历所有成员变量</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="comment">// 根据角标，从数组取出对应的成员变量</span></div><div class="line">        Ivar ivar = ivarList[i];</div><div class="line"></div><div class="line">        <span class="comment">// 获取成员变量名字</span></div><div class="line">        <span class="built_in">NSString</span> *ivarName = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</div><div class="line">        <span class="comment">// 获取成员变量类型</span></div><div class="line">        <span class="built_in">NSString</span> *ivarType = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getTypeEncoding(ivar)];</div><div class="line"></div><div class="line">        <span class="comment">// 替换: @\"User\" -&gt; User</span></div><div class="line">        ivarType = [ivarType stringByReplacingOccurrencesOfString:<span class="string">@"\""</span> withString:<span class="string">@""</span>];</div><div class="line">        ivarType = [ivarType stringByReplacingOccurrencesOfString:<span class="string">@"@"</span> withString:<span class="string">@""</span>];</div><div class="line"></div><div class="line">        <span class="comment">// 处理成员属性名-&gt;字典中的key(去掉 _ ,从第一个角标开始截取)</span></div><div class="line">        <span class="built_in">NSString</span> *key = [ivarName substringFromIndex:<span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="comment">// 根据成员属性名去字典中查找对应的value</span></div><div class="line">        <span class="keyword">id</span> value = dict[key];</div><div class="line"></div><div class="line">        <span class="comment">//--------------------------- &lt;#我是分割线#&gt; ------------------------------//</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="comment">// 二级转换:如果字典中还有字典，也需要把对应的字典转换成模型</span></div><div class="line">        <span class="comment">// 判断下value是否是字典,并且是自定义对象才需要转换</span></div><div class="line">        <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]] &amp;&amp; ![ivarType hasPrefix:<span class="string">@"NS"</span>]) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 字典转换成模型 userDict =&gt; User模型, 转换成哪个模型</span></div><div class="line">            <span class="comment">// 根据字符串类名生成类对象</span></div><div class="line">            Class modelClass = <span class="built_in">NSClassFromString</span>(ivarType);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (modelClass) &#123; <span class="comment">// 有对应的模型才需要转</span></div><div class="line">                <span class="comment">// 把字典转模型</span></div><div class="line">                value = [modelClass modelWithDict2:value];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 给模型中属性赋值</span></div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">            [objc setValue:value forKey:key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> objc;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line"></div><div class="line"><span class="number">3</span>、runtime字典转模型--数组中装着模型(模型的属性是一个数组，数组中是字典模型对象)，代码如下：  </div><div class="line"></div><div class="line">```objectivec</div><div class="line"><span class="comment">// Runtime:根据模型中属性,去字典中取出对应的value给模型属性赋值</span></div><div class="line"><span class="comment">// 思路：遍历模型中所有属性-&gt;使用运行时</span></div><div class="line">+ (<span class="keyword">instancetype</span>)modelWithDict3:(<span class="built_in">NSDictionary</span> *)dict</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 1.创建对应的对象</span></div><div class="line">    <span class="keyword">id</span> objc = [[<span class="keyword">self</span> alloc] init];</div><div class="line"></div><div class="line">    <span class="comment">// 2.利用runtime给对象中的属性赋值</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 获取类中的所有成员变量</span></div><div class="line">    Ivar *ivarList = class_copyIvarList(<span class="keyword">self</span>, &amp;count);</div><div class="line"></div><div class="line">    <span class="comment">// 遍历所有成员变量</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="comment">// 根据角标，从数组取出对应的成员变量</span></div><div class="line">        Ivar ivar = ivarList[i];</div><div class="line"></div><div class="line">        <span class="comment">// 获取成员变量名字</span></div><div class="line">        <span class="built_in">NSString</span> *ivarName = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</div><div class="line"></div><div class="line">        <span class="comment">// 处理成员属性名-&gt;字典中的key(去掉 _ ,从第一个角标开始截取)</span></div><div class="line">        <span class="built_in">NSString</span> *key = [ivarName substringFromIndex:<span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="comment">// 根据成员属性名去字典中查找对应的value</span></div><div class="line">        <span class="keyword">id</span> value = dict[key];</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//--------------------------- &lt;#我是分割线#&gt; ------------------------------//</span></div><div class="line">        <span class="comment">//</span></div><div class="line"></div><div class="line">        <span class="comment">// 三级转换：NSArray中也是字典，把数组中的字典转换成模型.</span></div><div class="line">        <span class="comment">// 判断值是否是数组</span></div><div class="line">        <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            <span class="comment">// 判断对应类有没有实现字典数组转模型数组的协议</span></div><div class="line">            <span class="comment">// arrayContainModelClass 提供一个协议，只要遵守这个协议的类，都能把数组中的字典转模型</span></div><div class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(arrayContainModelClass)]) &#123;</div><div class="line"></div><div class="line">                <span class="comment">// 转换成id类型，就能调用任何对象的方法</span></div><div class="line">                <span class="keyword">id</span> idSelf = <span class="keyword">self</span>;</div><div class="line"></div><div class="line">                <span class="comment">// 获取数组中字典对应的模型</span></div><div class="line">                <span class="built_in">NSString</span> *type =  [idSelf arrayContainModelClass][key];</div><div class="line"></div><div class="line">                <span class="comment">// 生成模型</span></div><div class="line">                Class classModel = <span class="built_in">NSClassFromString</span>(type);</div><div class="line">                <span class="built_in">NSMutableArray</span> *arrM = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">                <span class="comment">// 遍历字典数组，生成模型数组</span></div><div class="line">                <span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *dict <span class="keyword">in</span> value) &#123;</div><div class="line">                    <span class="comment">// 字典转模型</span></div><div class="line">                    <span class="keyword">id</span> model =  [classModel modelWithDict3:dict];</div><div class="line">                    [arrM addObject:model];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 把模型数组赋值给value</span></div><div class="line">                value = arrM;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 如果模型属性数量大于字典键值对数理，模型属性会被赋值为nil,而报错</span></div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">            <span class="comment">// 给模型中属性赋值</span></div><div class="line">            [objc setValue:value forKey:key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> objc;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line"></div><div class="line">**总结：**我们既然能获取到属性类型，那就可以拦截到模型的那个数组属性，进而对数组中每个模型遍历并字典转模型，但是我们不知道数组中的模型都是什么类型，我们可以声明一个方法，该方法目的不是让其调用，而是让其实现并返回模型的类型。  </div><div class="line"></div><div class="line"><span class="meta">#### runtime添加方法  </span></div><div class="line">**应用场景:**如果一个类的方法非常多，加载类到内存的时候比较耗资源，需要给每个方法生成映射表，可以使用动态给某个类添加方法解决。  </div><div class="line"></div><div class="line">**注解：**OC中使用的懒加载，当用到的时候才去加载它，实际上只要一个类实现了某个方法，就会被加载到内存。当我们不想加载那么多方法的时候，就可以使用runtime动态的添加方法。</div><div class="line"></div><div class="line">**需求：**runtime动态添加方法处理调用一个未实现的方法和去除报错。  </div><div class="line"></div><div class="line">**案例代码：**方法+调用+打印输出</div><div class="line"></div><div class="line">```objectivec</div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];   </div><div class="line">    Person *p = [[Person alloc] init];</div><div class="line">    <span class="comment">// 默认person，没有实现run:方法，可以通过performSelector调用，但是会报错。</span></div><div class="line">    <span class="comment">// 动态添加方法就不会报错</span></div><div class="line">    [p performSelector:<span class="keyword">@selector</span>(run:) withObject:@<span class="number">10</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"><span class="comment">// 没有返回值,1个参数</span></div><div class="line"><span class="comment">// void,(id,SEL)</span></div><div class="line"><span class="keyword">void</span> aaa(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd, <span class="built_in">NSNumber</span> *meter) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"跑了%@米"</span>, meter);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 任何方法默认都有两个隐式参数,self,_cmd（当前方法的方法编号）</span></div><div class="line"><span class="comment">// 什么时候调用:只要一个对象调用了一个未实现的方法就会调用这个方法,进行处理</span></div><div class="line"><span class="comment">// 作用:动态添加方法,处理未实现</span></div><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    <span class="comment">// [NSStringFromSelector(sel) isEqualToString:@"run"];</span></div><div class="line">    <span class="keyword">if</span> (sel == <span class="built_in">NSSelectorFromString</span>(<span class="string">@"run:"</span>)) &#123;</div><div class="line">        <span class="comment">// 动态添加run方法</span></div><div class="line">        <span class="comment">// class: 给哪个类添加方法</span></div><div class="line">        <span class="comment">// SEL: 添加哪个方法，即添加方法的方法编号</span></div><div class="line">        <span class="comment">// IMP: 方法实现 =&gt; 函数 =&gt; 函数入口 =&gt; 函数名（添加方法的函数实现（函数地址））</span></div><div class="line">        <span class="comment">// type: 方法类型，(返回值+参数类型) v:void @:对象-&gt;self :表示SEL-&gt;_cmd</span></div><div class="line">        class_addMethod(<span class="keyword">self</span>, sel, (IMP)aaa, <span class="string">"v@:@"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// 打印输出</span></div><div class="line"><span class="number">2017</span><span class="number">-02</span><span class="number">-17</span> <span class="number">19</span>:<span class="number">05</span>:<span class="number">03.917</span> runtime[<span class="number">12761</span>:<span class="number">543574</span>] runtime动态添加方法--跑了<span class="number">10</span>米</div></pre></td></tr></table></figure><h4 id="动态变量控制"><a href="#动态变量控制" class="headerlink" title="动态变量控制"></a>动态变量控制</h4><p>现在有一个Person的类，创建xiaoming对象  </p><ul><li><p>动态获取xiaoming类中的所有属性(包括私有的)<br><code>Ivar *ivar = class_copyIvarList([self.xiaoming class], &amp;count);</code>  </p></li><li><p>遍历属性找到对应的name字段<br><code>const char *varName = ivar_getName(var);</code></p></li><li><p>修改对应的字段值为20<br><code>object_setIvar(self.xiaoMing, var, @&quot;20&quot;);</code></p></li><li><p>代码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> -(<span class="keyword">void</span>)answer&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   Ivar *ivar = class_copyIvarList([<span class="keyword">self</span>.xiaoMing <span class="keyword">class</span>], &amp;count);</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;count; i++) &#123;</div><div class="line">       Ivar var = ivar[i];</div><div class="line">       <span class="keyword">const</span> <span class="keyword">char</span> *varName = ivar_getName(var);</div><div class="line">       <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:varName];</div><div class="line">       <span class="keyword">if</span> ([name isEqualToString:<span class="string">@"_age"</span>]) &#123;</div><div class="line">           object_setIvar(<span class="keyword">self</span>.xiaoMing, var, <span class="string">@"20"</span>);</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="built_in">NSLog</span>(<span class="string">@"XiaoMing's age is %@"</span>,<span class="keyword">self</span>.xiaoMing.age);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p> ####实现NSCoding的自动归档和解档<br> 实现自定义的模型持久化的过程，如果一个模型有许多个属性，需要对每个属性都实现一遍<code>encodeObject</code> 和 <code>decodeObjectForKey</code>方法，当遇到这样的模型有很多个，这是一件十分麻烦的事情，下面介绍简单的实现方法。  </p><p> 假设现在有一个Movie类，有3个属性。先看下 .h文件</p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Movie.h文件</span></div><div class="line"><span class="comment">//1. 如果想要当前类可以实现归档与反归档，需要遵守一个协议NSCoding</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Movie</span> : <span class="title">NSObject</span>&lt;<span class="title">NSCoding</span>&gt;  </span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *movieId;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *movieName;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *pic_url;</div><div class="line"><span class="keyword">@end</span></div><div class="line"> ```  </div><div class="line"> </div><div class="line"> 如果是正常写法， .m 文件应该是这样的：</div><div class="line"> </div><div class="line"> ```objectivec</div><div class="line"> <span class="comment">// Movie.m文件</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Movie</span></span></div><div class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder</div><div class="line">&#123;</div><div class="line">    [aCoder encodeObject:_movieId forKey:<span class="string">@"id"</span>];</div><div class="line">    [aCoder encodeObject:_movieName forKey:<span class="string">@"name"</span>];</div><div class="line">    [aCoder encodeObject:_pic_url forKey:<span class="string">@"url"</span>];</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        <span class="keyword">self</span>.movieId = [aDecoder decodeObjectForKey:<span class="string">@"id"</span>];</div><div class="line">        <span class="keyword">self</span>.movieName = [aDecoder decodeObjectForKey:<span class="string">@"name"</span>];</div><div class="line">        <span class="keyword">self</span>.pic_url = [aDecoder decodeObjectForKey:<span class="string">@"url"</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"> ```  </div><div class="line"> 如果这里有<span class="number">100</span>个属性，难道我们也只能把<span class="number">100</span>个属性都给写一遍吗。  </div><div class="line"> 使用runtime让我们有更简便的方法  </div><div class="line"> </div><div class="line"> ```objectivec</div><div class="line"> <span class="meta">#import <span class="meta-string">"Movie.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Movie</span></span></div><div class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)encoder</div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    Ivar *ivars = class_copyIvarList([Movie <span class="keyword">class</span>], &amp;count);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;count; i++) &#123;</div><div class="line">        <span class="comment">// 取出i位置对应的成员变量</span></div><div class="line">        Ivar ivar = ivars[i];</div><div class="line">        <span class="comment">// 查看成员变量</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *name = ivar_getName(ivar);</div><div class="line">        <span class="comment">// 归档</span></div><div class="line">        <span class="built_in">NSString</span> *key = [<span class="built_in">NSString</span> stringWithUTF8String:name];</div><div class="line">        <span class="keyword">id</span> value = [<span class="keyword">self</span> valueForKey:key];</div><div class="line">        [encoder encodeObject:value forKey:key];</div><div class="line">    &#125;</div><div class="line">    free(ivars);</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)decoder</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        Ivar *ivars = class_copyIvarList([Movie <span class="keyword">class</span>], &amp;count);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;count; i++) &#123;</div><div class="line">        <span class="comment">// 取出i位置对应的成员变量</span></div><div class="line">        Ivar ivar = ivars[i];</div><div class="line">        <span class="comment">// 查看成员变量</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *name = ivar_getName(ivar);</div><div class="line">       <span class="comment">// 归档</span></div><div class="line">       <span class="built_in">NSString</span> *key = [<span class="built_in">NSString</span> stringWithUTF8String:name];</div><div class="line">      <span class="keyword">id</span> value = [decoder decodeObjectForKey:key];</div><div class="line">       <span class="comment">// 设置到成员变量身上</span></div><div class="line">        [<span class="keyword">self</span> setValue:value forKey:key];</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        free(ivars);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"> ```  </div><div class="line"> 这样的方式实现，不管有多少个属性，写这几行代码就搞定了。如果嫌代码有点多，有更加简便的方法：两句代码搞定。</div><div class="line"> </div><div class="line"> ```objectivec</div><div class="line"> <span class="meta">#import <span class="meta-string">"Movie.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"><span class="meta">#define encodeRuntime(A) \</span></div><div class="line">\</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;\</div><div class="line">Ivar *ivars = class_copyIvarList([A <span class="keyword">class</span>], &amp;count);\</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;count; i++) &#123;\</div><div class="line">Ivar ivar = ivars[i];\</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name = ivar_getName(ivar);\</div><div class="line"><span class="built_in">NSString</span> *key = [<span class="built_in">NSString</span> stringWithUTF8String:name];\</div><div class="line"><span class="keyword">id</span> value = [<span class="keyword">self</span> valueForKey:key];\</div><div class="line">[encoder encodeObject:value forKey:key];\</div><div class="line">&#125;\</div><div class="line">free(ivars);\</div><div class="line">\</div><div class="line"><span class="meta">#define initCoderRuntime(A) \</span></div><div class="line">\</div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;\</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;\</div><div class="line">Ivar *ivars = class_copyIvarList([A <span class="keyword">class</span>], &amp;count);\</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;count; i++) &#123;\</div><div class="line">Ivar ivar = ivars[i];\</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name = ivar_getName(ivar);\</div><div class="line"><span class="built_in">NSString</span> *key = [<span class="built_in">NSString</span> stringWithUTF8String:name];\</div><div class="line"><span class="keyword">id</span> value = [decoder decodeObjectForKey:key];\</div><div class="line">[<span class="keyword">self</span> setValue:value forKey:key];\</div><div class="line">&#125;\</div><div class="line">free(ivars);\</div><div class="line">&#125;\</div><div class="line"><span class="keyword">return</span> <span class="keyword">self</span>;\</div><div class="line">\</div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Movie</span></span></div><div class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)encoder</div><div class="line">&#123;</div><div class="line">    encodeRuntime(Movie)</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)decoder</div><div class="line">&#123;</div><div class="line">    initCoderRuntime(Movie)</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><p><strong>优化：</strong>上面是encodeWithCoder 和 initWithCoder这两个方法抽成宏。我们可以把这两个宏单独放到一个文件里面，这里以后需要进行数据持久化的模型都可以直接使用这两个宏。  </p><h3 id="runtime下Class的各项操作"><a href="#runtime下Class的各项操作" class="headerlink" title="runtime下Class的各项操作"></a>runtime下Class的各项操作</h3><p>下面是 runtime 下Class的常见方法 及 带有使用示例代码。各项操作，<a href="http://www.jianshu.com/p/46dd81402f63" target="_blank" rel="external">【转载原著】http://www.jianshu.com/p/46dd81402f63</a>  </p><p><strong>unsigned int count;</strong></p><ul><li>获取属性列表</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">objc_property_t *propertyList = class_copyPropertyList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++) &#123;</div><div class="line">   <span class="keyword">const</span> <span class="keyword">char</span> *propertyName = property_getName(propertyList[i]);</div><div class="line">   <span class="built_in">NSLog</span>(<span class="string">@"property----&gt;%@"</span>, [<span class="built_in">NSString</span> stringWithUTF8String:propertyName]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>获取方法列表</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Method *methodList = class_copyMethodList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i; i&lt;count; i++) &#123;</div><div class="line">   Method method = methodList[i];</div><div class="line">   <span class="built_in">NSLog</span>(<span class="string">@"method----&gt;%@"</span>, <span class="built_in">NSStringFromSelector</span>(method_getName(method)));</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>获取成员变量列表</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Ivar *ivarList = class_copyIvarList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i; i&lt;count; i++) &#123;</div><div class="line">    Ivar myIvar = ivarList[i];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ivarName = ivar_getName(myIvar);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Ivar----&gt;%@"</span>, [<span class="built_in">NSString</span> stringWithUTF8String:ivarName]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>获得协议列表</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">__<span class="keyword">unsafe_unretained</span> Protocol **protocolList = class_copyProtocolList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i; i&lt;count; i++) &#123;</div><div class="line">    Protocol *myProtocal = protocolList[i];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *protocolName = protocol_getName(myProtocal);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"protocol----&gt;%@"</span>, [<span class="built_in">NSString</span> stringWithUTF8String:protocolName]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在有一个Person类，和person创建的xiaoming对象,有test1和test2两个方法</p><ul><li>获得类方法</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class PersonClass = object_getClass([Person <span class="keyword">class</span>]);</div><div class="line">SEL oriSEL = <span class="keyword">@selector</span>(test1);</div><div class="line">Method oriMethod = _class_getMethod(xiaomingClass, oriSEL);</div></pre></td></tr></table></figure><ul><li>获得实例方法</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class PersonClass = object_getClass([xiaoming <span class="keyword">class</span>]);</div><div class="line">SEL oriSEL = <span class="keyword">@selector</span>(test2);</div><div class="line">Method cusMethod = class_getInstanceMethod(xiaomingClass, oriSEL);</div></pre></td></tr></table></figure><ul><li>添加方法</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> addSucc = class_addMethod(xiaomingClass, oriSEL, method_getImplementation(cusMethod), method_getTypeEncoding(cusMethod));</div></pre></td></tr></table></figure><ul><li>替换原方法实现</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class_replaceMethod(toolClass, cusSEL, method_getImplementation(oriMethod), method_getTypeEncoding(oriMethod));</div></pre></td></tr></table></figure><ul><li>交换原方法实现</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method_exchangeImplementations(oriMethod, cusMethod);</div></pre></td></tr></table></figure><p>常用方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 得到类的所有方法</span></div><div class="line">    Method *allMethods = class_copyMethodList([Person <span class="keyword">class</span>], &amp;count);</div><div class="line"><span class="comment">// 得到所有成员变量</span></div><div class="line">    Ivar *allVariables = class_copyIvarList([Person <span class="keyword">class</span>], &amp;count);</div><div class="line"><span class="comment">// 得到所有属性</span></div><div class="line">    objc_property_t *properties = class_copyPropertyList([Person <span class="keyword">class</span>], &amp;count);</div><div class="line"><span class="comment">// 根据名字得到类变量的Ivar指针，但是这个在OC中好像毫无意义</span></div><div class="line">Ivar oneCVIvar = class_getClassVariable([Person <span class="keyword">class</span>], name);</div><div class="line"><span class="comment">// 根据名字得到实例变量的Ivar指针</span></div><div class="line">    Ivar oneIVIvar = class_getInstanceVariable([Person <span class="keyword">class</span>], name);</div><div class="line"><span class="comment">// 找到后可以直接对私有变量赋值</span></div><div class="line">    object_setIvar(_per, oneIVIvar, <span class="string">@"Mike"</span>);<span class="comment">//强制修改name属性</span></div><div class="line"><span class="comment">/* 动态添加方法：</span></div><div class="line">     第一个参数表示Class cls 类型；</div><div class="line">     第二个参数表示待调用的方法名称；</div><div class="line">     第三个参数(IMP)myAddingFunction，IMP是一个函数指针，这里表示指定具体实现方法myAddingFunction；</div><div class="line">     第四个参数表方法的参数，0代表没有参数；</div><div class="line">     */</div><div class="line">    class_addMethod([_per <span class="keyword">class</span>], <span class="keyword">@selector</span>(sayHi), (IMP)myAddingFunction, <span class="number">0</span>);</div><div class="line"><span class="comment">// 交换两个方法</span></div><div class="line">    method_exchangeImplementations(method1, method2);</div><div class="line"></div><div class="line"><span class="comment">// 关联两个对象</span></div><div class="line">objc_setAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key, <span class="keyword">id</span> value, objc_AssociationPolicy policy)</div><div class="line"><span class="comment">/*</span></div><div class="line"> id object                     :表示关联者，是一个对象，变量名理所当然也是object</div><div class="line"> const void *key               :获取被关联者的索引key</div><div class="line"> id value                      :被关联者，这里是一个block</div><div class="line"> objc_AssociationPolicy policy : 关联时采用的协议，有assign，retain，copy等协议，一般使用OBJC_ASSOCIATION_RETAIN_NONATOMIC</div><div class="line">*/</div></pre></td></tr></table></figure><h3 id="runtime-几个参数概念"><a href="#runtime-几个参数概念" class="headerlink" title="runtime 几个参数概念"></a>runtime 几个参数概念</h3><p><strong>1、objc_msgSend</strong><br>这是个最基本的用于发送消息的函数<br>其实编译器会根据情况在<code>objc_msgSend</code>， <code>objc_msgSend_stret</code>,<code>objc_msgSendSuper</code>， 或<code>objc_msgSendSuper_stret</code> 四个方法中选择一个来调用。如果消息是传递给超类，那么会调用名字带有<code>Super</code>的函数；如果消息返回值是数据结构而不是简单值时，那么会调用名字带有<code>stret</code>的函数。  </p><p><strong>2、SEL</strong><br><code>objc_msgSend</code>函数第二个参数类型为SEL，它是<code>selector</code>在<strong>Objc</strong>中的表示类型（<strong>Swift</strong>中是<code>Selector</code>类）。<code>selector</code>是方法选择器，可以理解为区分方法的<code>ID</code>，而这个<code>ID</code>的数据结构是<code>SEL</code>:<br><code>typedef struct objc_selector *SEL</code>;<br>其实它就是个映射到方法的C字符串，你可以用<code>Objc</code>编译器命令<code>@selector()</code>或者<code>Runtime</code>系统的<code>sel_registerName</code>函数来获得一个<code>SEL</code>类型的方法选择器。  </p><p><strong>3、id</strong><br><code>objc_msgSend</code>第一个参数类型为<code>id</code>，大家对它都不陌生，它是一个指向类实例的指针：<br><code>typedef struct objc_object *id;</code><br>那<code>objc_object</code>又是啥呢：<br><code>struct objc_object { Class isa; };</code><br><code>objc_object</code>结构体包含一个<code>isa</code>指针，根据isa指针就可以顺藤摸瓜找到对象所属的类。  </p><p><strong>4、runtime.h中Class的定义</strong>  </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_class &#123;</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;<span class="comment">//每个Class都有一个isa指针</span></div><div class="line"></div><div class="line"><span class="meta">#if !__OBJC2__</span></div><div class="line">    Class super_class                                        OBJC2_UNAVAILABLE;<span class="comment">//父类</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name                                         OBJC2_UNAVAILABLE;<span class="comment">//类名</span></div><div class="line">    <span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;<span class="comment">//类版本</span></div><div class="line">    <span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;<span class="comment">//!*!供运行期使用的一些位标识。如：CLS_CLASS (0x1L)表示该类为普通class; CLS_META(0x2L)表示该类为metaclass等(runtime.h中有详细列出)</span></div><div class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;<span class="comment">//实例大小</span></div><div class="line">    <span class="keyword">struct</span> objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;<span class="comment">//存储每个实例变量的内存地址</span></div><div class="line">    <span class="keyword">struct</span> objc_method_list **methodLists                    OBJC2_UNAVAILABLE;<span class="comment">//!*!根据info的信息确定是类还是实例，运行什么函数方法等</span></div><div class="line">    <span class="keyword">struct</span> objc_cache *cache                                 OBJC2_UNAVAILABLE;<span class="comment">//缓存</span></div><div class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;<span class="comment">//协议</span></div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line">&#125; OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure><p>可以看到运行时一个类还关联了它的超类指针，类名，成员变量，方法，缓存，还有附属的协议。<br>在objc_class结构体中：<code>ivars</code>是<code>objc_ivar_list</code>指针；<code>methodLists</code>是指向<code>objc_method_list</code>指针的指针。也就是说可以动态修改<code>*methodLists</code>的值来添加成员方法，这也是<code>Category</code>实现的原理。  </p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>1、什么是 method swizzling（俗称黑魔法）  </p><ul><li><p>简单说就是进行方法交换</p></li><li><p>在Objective-C中调用一个方法，其实是向一个对象发送消息，查找消息的唯一依据是selector的名字。利用Objective-C的动态特性，可以实现在运行时偷换selector对应的方法实现，达到给方法挂钩的目的</p></li><li><p>每个类都有一个方法列表，存放着方法的名字和方法实现的映射关系，selector的本质其实就是方法名，IMP有点类似函数指针，指向具体的Method实现，通过selector就可以找到对应的IMP。<br><img src="http://oui2ar2u7.bkt.clouddn.com/2d4ed95fd3f04b7217f3f769eafdb8c6.jpeg" alt=""></p></li><li><p>交换方法的几种实现方式  </p><ul><li>利用 method_exchangeImplementations 交换两个方法的实现  </li><li>利用 class_replaceMethod 替换方法的实现  </li><li>利用 method_setImplementation 来直接设置某个方法的IMP。<br><img src="http://oui2ar2u7.bkt.clouddn.com/cf4ae090f0098668a85a731685e2d533.jpeg" alt=""> </li></ul></li></ul><p><strong>参考：</strong><br><a href="http://www.jianshu.com/p/f6dad8e1b848" target="_blank" rel="external">Runtime Method Swizzling开发实例汇总（持续更新中）</a><br>          <a href="http://nshipster.cn/method-swizzling/" target="_blank" rel="external">OC运行时黑魔法 Method Swizzling</a></p><p>2、下面的代码输出什么?</p><pre><code class="objectivec"><span class="class"><span class="keyword">@implementation</span> <span class="title">Son</span> : <span class="title">NSObject</span></span>- (<span class="keyword">id</span>)init{    <span class="keyword">self</span> = [<span class="keyword">super</span> init];    <span class="keyword">if</span> (<span class="keyword">self</span>) {        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]));        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">super</span> <span class="keyword">class</span>]));    }    <span class="keyword">return</span> <span class="keyword">self</span>;}<span class="keyword">@end</span></code></pre><p>答案：都输出 Son</p><ul><li><p><code>class</code>获取当前方法的调用者的类，<code>superClass</code>获取当前方法的调用者的父类，<code>super</code>仅仅是一个编译指示器，就是给编译器看的，不是一个指针。  </p></li><li><p>本质：只要编译器看到super这个标志，就会让当前对象去调用父类方法，本质还是当前对象在调用这个题目主要是考察关于<code>objc</code>中对<code>self</code>和<code>super</code>的理解：</p></li><li><p><code>self</code>是类的隐藏参数，指向当前调用方法的这个类的实例。而<code>super</code>本质是一个编译器标示符，和<code>self</code>是指向的同一个消息接受者</p></li><li><p>当使用<code>self</code>调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；</p></li><li><p>而当使用<code>super</code>时，则从父类的方法列表中开始找。然后调用父类的这个方法</p></li><li><p>调用<code>[self class]</code>时，会转化成<code>objc_msgSend</code>函数</p></li></ul><pre><code class="objectivec"><span class="keyword">id</span> objc_msgSend(<span class="keyword">id</span> <span class="keyword">self</span>, SEL op, ...)- 调用 `[<span class="keyword">super</span> <span class="keyword">class</span>]`时，会转化成 `objc_msgSendSuper` 函数.<span class="keyword">id</span> objc_msgSendSuper(<span class="keyword">struct</span> objc_super *<span class="keyword">super</span>, SEL op, ...)第一个参数是 objc_super 这样一个结构体，其定义如下 <span class="keyword">struct</span> objc_super { __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> receiver; __<span class="keyword">unsafe_unretained</span> Class super_class; };第一个成员是 receiver, 类似于上面的 objc_msgSend函数第一个参数<span class="keyword">self</span>第二个成员是记录当前类的父类是什么，告诉程序从父类中开始找方法，找到方法后，最后内部是使用 objc_msgSend(objc_super-&gt;receiver, <span class="keyword">@selector</span>(<span class="keyword">class</span>))去调用， 此时已经和[<span class="keyword">self</span> <span class="keyword">class</span>]调用相同了，故上述输出结果仍然返回 Sonobjc Runtime 开源代码对- (Class)<span class="keyword">class</span>方法的实现-(Class)<span class="keyword">class</span> { <span class="keyword">return</span> object_getClass(<span class="keyword">self</span>); }</code></pre><h3 id="runtime模块推荐阅读文章"><a href="#runtime模块推荐阅读文章" class="headerlink" title="runtime模块推荐阅读文章"></a>runtime模块推荐阅读文章</h3><p> <a href="http://www.jianshu.com/p/6b905584f536" target="_blank" rel="external">西木 http://www.jianshu.com/p/6b905584f536</a><br> <a href="http://www.jianshu.com/p/9e1bc8d890f9" target="_blank" rel="external">天口三水羊 http://www.jianshu.com/p/9e1bc8d890f9</a><br> <a href="http://www.jianshu.com/p/46dd81402f63" target="_blank" rel="external">夜千寻墨 http://www.jianshu.com/p/46dd81402f63</a><br> <a href="http://www.jianshu.com/p/e071206103a4" target="_blank" rel="external">袁峥Seemygo http://www.jianshu.com/p/e071206103a4</a><br> <a href="http://www.jianshu.com/p/bd24c3f3cd0a" target="_blank" rel="external">郑钦洪_  http://www.jianshu.com/p/bd24c3f3cd0a</a><br> <a href="http://www.jianshu.com/p/f6300eb3ec3d" target="_blank" rel="external">HenryCheng http://www.jianshu.com/p/f6300eb3ec3d</a>  </p><h3 id="程序员的最爱（不点进去你会后悔的）"><a href="#程序员的最爱（不点进去你会后悔的）" class="headerlink" title="程序员的最爱（不点进去你会后悔的）"></a>程序员的最爱（不点进去你会后悔的）</h3><p> <a href="https://github.com/CustomPBWaters/Apple-OfficialTranslation-SourceAnnotation" target="_blank" rel="external">【译文 &amp; 源码】</a><br> <a href="https://github.com/CustomPBWaters/Framework-Annotations-Tools" target="_blank" rel="external">【工具类】</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;引导&quot;&gt;&lt;a href=&quot;#引导&quot; class=&quot;headerlink&quot; title=&quot;引导&quot;&gt;&lt;/a&gt;引导&lt;/h3&gt;&lt;p&gt;runtime是运行时，对于从事iOS开发，想要深入学习OC的人，runtime是必须熟悉掌握的东西。&lt;/p&gt;
&lt;h3 id=&quot;runtim
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo搭建属于自己的博客</title>
    <link href="http://yoursite.com/2017/06/07/hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/06/07/hexo搭建属于自己的博客/</id>
    <published>2017-06-07T13:24:23.000Z</published>
    <updated>2017-08-12T10:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="安装Node（必须）"><a href="#安装Node（必须）" class="headerlink" title="安装Node（必须）"></a>安装Node（必须）</h3><p><strong>作用</strong>：用来生成静态页面的<br>到<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>官网下载相应平台的最新版本，一路安装即可。</p><h3 id="安装Git（必须）"><a href="#安装Git（必须）" class="headerlink" title="安装Git（必须）"></a>安装Git（必须）</h3><p><strong>作用</strong>：把本地的hexo内容提交到github上去.<br>安装<strong>Xcode</strong>就自带有Git，就不多说了。</p><h4 id="申请GitHub（必须）"><a href="#申请GitHub（必须）" class="headerlink" title="申请GitHub（必须）"></a>申请GitHub（必须）</h4><p><strong>作用</strong>：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。  </p><h4 id="注册Github账号-必须"><a href="#注册Github账号-必须" class="headerlink" title="注册Github账号(必须)"></a>注册Github账号(必须)</h4><p>这里我们就不多讲了，小伙伴们可以点击<a href="https://github.com" target="_blank" rel="external">这里</a>，进入官网进行注册。  </p><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>登录账号后，在Github页面的右上方选择New repository进行仓库的创建。<br><img src="http://oui2ar2u7.bkt.clouddn.com/291600-7cec7b9f28359ea5.png" alt=""><br><strong>在仓库名字输入框中输入：<br>你想要的名字.github.io<br>然后点击Create repository即可</strong>  </p><h4 id="生成添加秘钥"><a href="#生成添加秘钥" class="headerlink" title="生成添加秘钥"></a>生成添加秘钥</h4><p>在终端（Terminal）输入：<br>ssh-keygen -t rsa -C “Github的注册邮箱地址”<br>一路Enter过来就好，待秘钥生成完毕，会得到两个文件id_rsa和id_rsa.pub，用带格式的记事本打开id_rsa.pub，Ctrl + a复制里面的所有内容，然后进入<a href="https://github.com/settings/ssh" target="_blank" rel="external">这里</a><br><img src="http://oui2ar2u7.bkt.clouddn.com/291600-3bff2a591beb2bb6.png" alt=""><br>将复制的内容粘贴到<strong>Key</strong>的输入框，随便写好Title里面的内容，点击<strong>Add SSH key</strong>按钮即可。</p><h3 id="安装Hexo："><a href="#安装Hexo：" class="headerlink" title="安装Hexo："></a>安装Hexo：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure><h4 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字 </div><div class="line">$ hexo init &lt;folder&gt;  </div><div class="line">//进入博客文件夹，&lt;folder&gt;为文件夹的名称  </div><div class="line">$ cd &lt;folder&gt;  </div><div class="line">//node.js的命令，根据博客既定的dependencies配置安装所有的依赖包  </div><div class="line">$ npm install</div></pre></td></tr></table></figure><h4 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置_config.yml文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Site  </div><div class="line">title: blog name#博客名  </div><div class="line">subtitle: Goals determine what you are going to be  #副标题  </div><div class="line">description: Goals determine what you are going to be #用于搜索，没有直观表现  </div><div class="line">author: author name #作者  </div><div class="line">language: zh-CN #语言  </div><div class="line">timezone:   #时区，此处不填写，hexo会以你目前电脑的时区为默认值</div></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy  </div><div class="line">  type: git  </div><div class="line">  repo: ssh://git@github.com/a-stupid-wood/a-stupid-wood.github.io </div><div class="line">  branch: master</div></pre></td></tr></table></figure><h3 id="每次部署的步骤，可按以下三步来进行。"><a href="#每次部署的步骤，可按以下三步来进行。" class="headerlink" title="每次部署的步骤，可按以下三步来进行。"></a>每次部署的步骤，可按以下三步来进行。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean  </div><div class="line">hexo generate   </div><div class="line">hexo deploy</div></pre></td></tr></table></figure><h3 id="一些常用命令："><a href="#一些常用命令：" class="headerlink" title="一些常用命令："></a>一些常用命令：</h3><pre><code class="bash">hexo new<span class="string">"postName"</span> <span class="comment">#新建文章  </span>hexo new page<span class="string">"pageName"</span> <span class="comment">#新建页面  </span>hexo generate <span class="comment">#生成静态页面至public目录  </span>hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）  </span>hexo deploy <span class="comment">#将.deploy目录部署到GitHub  </span>hexo <span class="built_in">help</span> <span class="comment"># 查看帮助  </span>hexo version <span class="comment">#查看Hexo的版本</span></code></pre><h3 id="报错总结"><a href="#报错总结" class="headerlink" title="报错总结"></a>报错总结</h3><p><strong>如发生报错:</strong><br><code>ERROR Deployer not found: git 或者 ERROR Deployer not found: github</code><br><strong>解决方法：</strong>   </p><pre><code class="bash">npm install hexo-deployer-git --save</code></pre><p><strong>如发生报错:</strong><br> <code>ERROR Process failed: layout/.DS_Store</code><br><strong>那么进入主题里面layout和_partial目录下，使用删除命令:</strong>  </p><pre><code class="bash">rm-rf.DS_Store</code></pre><p><strong>如发生报错:</strong><br><code>ERROR Plugin load failed: hexo-server</code><br><strong>原因：</strong><br><em>Besides,utilities are separated into a standalone module.hexo.util is not reachable anymore.</em><br><strong>解决方法，执行命令：</strong>  </p><pre><code class="bash">sudo npm install hexo-server</code></pre><p><strong>如发生报错:</strong><br><code>执行命令hexo server，提示：Usage: hexo ....</code><br><strong>原因：</strong><br><em>应该是没有生成本地服务</em><br><strong>解决方法，执行命令：</strong>  </p><pre><code class="bash">npm install hexo-server --save</code></pre><p><em>提示：hexo-server@0.1.2 node_modules/hexo-server<br>….</em></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h3><p><a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">hexo官方文档</a><br><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Markdown语法</a><br><a href="http://blog.csdn.net/u011974987/article/details/51331822" target="_blank" rel="external">基于Hexo+GitHub Pages 搭建博客详细教程</a><br><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">HEXO+Github,搭建属于自己的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;h3 id=&quot;安装Node（必须）&quot;&gt;&lt;a href=&quot;#安装Node（必须）&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
</feed>
